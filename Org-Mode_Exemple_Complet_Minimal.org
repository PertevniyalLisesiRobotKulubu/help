#+PROPERTY: header-args :tangle "./.org-mode-ecm.emacs.el"

* Org-Mode Exemple Complet Minimal
   :PROPERTIES:
   :ID:       orgmode:gcr:vela:83868A6E-76C2-48AE-8A5A-6A3C97492321
   :END:

Configure EMACS to easily provide ECMs.

Sysop is likely to use this often.

Start EMACS with this command:

=open /Applications/Emacs.app -n --args --quick --load ~/src/help/.org-mode-ecm.emacs.el=

#+NAME: orgmode:gcr:vela:EE055B39-1C93-45AB-B9A6-2FCFD54D47A5
#+BEGIN_SRC emacs-lisp :results output silent :comments no
;; -*- lexical-binding: t -*-
#+END_SRC

** Principle of Least Astonishment (POLA)
  :PROPERTIES:
  :ID:       orgmode:gcr:vela:43D9AB52-2157-4A1D-AD9C-D35996E91269
  :END:

*** Scoping Behavior
   :PROPERTIES:
   :ID:       orgmode:gcr:vela:C0F8DDC4-C2B7-4578-B9B4-FA13E3BF0EBD
   :END:

EMACS values dynamic-scoping for now and in the future.

EMACS values lexical-scoping in the future.

There are pecuilar interactions between [[https://yoo2080.wordpress.com/2011/12/31/lexical-scoping-and-dynamic-scoping-in-emacs-lisp/][lexically and dynamically scope closures]]
and [[https://yoo2080.wordpress.com/2013/08/14/invasion-of-special-variables-in-emacs-lisp/][special variables]].

With the future in mind, make the switch now.

It is enabled with a non-nil buffer-local variable ~lexical-binding~. The variable
is inserted into each of the Web definitions that this system provides. Those
definitions can't use Org-Mode comments so they are defined individually in each
Web.

*** Load Behavior
   :PROPERTIES:
   :ID:       orgmode:gcr:vela:B1A48CB2-9295-466E-947F-EE24D57DB548
   :END:

EMACS can load 3 different representations of a Emacs-Lisp source file code
OOTB. The name of source code file is the value before the file extension. When
you pass ~load~ a name it searches for an acceptable representation. Representation
types are indicated by their extension name. =.el= is a human readable and
uncompiled. =.elc= is not human readable and compiled. =.gz= is Gzip compressed and
contains =.el= or =.elc= files.

The variable ~load-suffixes~ determines the order for which text and byte-code
representations are first searched by extension-name. The variable
~load-file-rep-suffixes~ determines the order for all other extension types.

OOTB, EMACS combines the productivity of REPL style of development with the
speed of compiled code by ~load~'ing byte-code first, text second, and compressed
third. This workflow gives you the fastest code at run-time and lets you
experiment with new features stored in text. When you are ready to use them
every time, you compile them. There is only one downside of this approach: when
you forget that it works this way it can be confusing.

When you forget about that style of system you end up with surprising behavior.
The surprise comes when you forget to compile code and then write new code that
depends on the now old version of that code. After the next build, your system
can break in surprising ways. This violates the Principle of Least Astonishment.

This system values predictability so it does the simplest thing possible: ~load~
searches for the newest representation of a file and uses that one. It assumes
that Sysop has total and complete control over the management of file
representations.

This is the *first* thing that /ought/ to happen in the initialization of *any*
tangled system.

#+NAME: orgmode:gcr:vela:87B0CAB9-E6E5-4C68-B389-9289E65FCA7F
#+BEGIN_SRC emacs-lisp :results output silent
(setq load-prefer-newer t)
#+END_SRC

** Org-Mode Exemple Complet Minimal
   :PROPERTIES:
   :ID:       orgmode:gcr:vela:57C69AB7-A317-4823-ABBF-7DE8A5E2151C
   :END:

Every new EMACS releases comes with the latest stable Org-Mode release. To get
hot-fixes, cutting edge features, and easy patch creation though, you need to
use the version from Git.

These detailed and clear [[http://orgmode.org/manual/Installation.html][directions]] explain how ot run Org-Mode from Git. The only
thing worth mentioning again is that in order to use *any* version of Org-Mode
other than the one that comes OOTB you *must* load Org-Mode *before* anything else
in your initialization file. It is easy to do! When you get
unexpected Org-Mode behavior be sure to stop and investigate ~org-version~ and
decide whether or not it is what you expect and prepare an ECM if necessary.

Add the Org-Mode core distribution the load path.

#+NAME: orgmode:gcr:vela:D5D4EECF-00C5-4B2F-B9F9-988591C70852
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'load-path "~/src/org-mode/lisp")
#+END_SRC

Add the Org-Mode-Contributions distribution to the load path. The contributions
are essential.

#+NAME: orgmode:gcr:vela:4D4E921E-7B99-43B2-AD1F-30D2593F05D7
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'load-path "~/src/org-mode/contrib/lisp")
#+END_SRC

Allow single-character alphabetical bullet lists. This configuration must occur
before loading Org-Mode. *Never* remove this from a submitted ECM.

#+NAME: orgmode:gcr:vela:28776245-A6BB-4294-AC72-30F03F902DF7
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-list-allow-alphabetical t)
#+END_SRC

Unchecked boxes prevent marking the parent as done. This configuration must
occur before loading Org-Mode. *Never* remove this from a submitted ECM.

#+NAME: orgmode:gcr:vela:5112469C-F95A-484B-9D56-90DDC863686A
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-enforce-todo-checkbox-dependencies t)
#+END_SRC

Use the Guillemet to demarcate source blocks. Reconfigure this yearly.

#+NAME: orgmode:gcr:vela:3BBCDC21-9177-43D2-8423-0AC2253F590D
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-babel-noweb-wrap-start "«")
(setq org-babel-noweb-wrap-end "»")
#+END_SRC

Load Org-Mode.

#+NAME: orgmode:gcr:vela:86CAEC4F-CFC4-4CAD-9993-E1DCEF3BFCD1
#+BEGIN_SRC emacs-lisp :results output silent
(require 'org)
#+END_SRC
