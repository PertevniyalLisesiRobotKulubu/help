* README

HELP Enables Literate Programming.

Setup:

1) [[http://orgmode.org/][Clone Org-Mode]] to =~/src/=.
2) [[https://github.com/jwiegley/use-package][Clone Use-Package]] to =~/src/=.

* Webs We Weave

** Org-Mode Exemple Complet Minimal
   :PROPERTIES:
   :noweb-ref: Org-Mode-ECM-Tangle-Block
   :header-args:   :tangle "./.org-mode-ecm.emacs.el" :comments no
   :END:

Configure EMACS to easily provide ECMs.

Sysop is likely to use this often.

Start EMACS with this command:

=open /Applications/Emacs.app --args --quick --load ~/src/help/.org-mode-ecm.emacs.el=

#+BEGIN_SRC emacs-lisp
«Principle-of-Least-Astonishment»
«Org-Mode-ECM»
#+END_SRC

** The Whole Enchilada
   :PROPERTIES:
   :header-args:   :tangle "./.emacs.el" :comments no
   :END:

Configure EMACS to do everything provided by this document.

Sysop is likely to use this daily.

Start EMACS with this command:

=open /Applications/Emacs.app=

#+BEGIN_SRC emacs-lisp
«Org-Mode-ECM-Tangle-Block»
«Watch-What-You-Eat»
#+END_SRC

* Literate Programming

This system helps you do 4 things:

1) Load Org-Mode for creating Literate Documents
2) Tangle Literate Documents
3) Export Literate Documents
4) Program Literate Documents

They are separate and distinct operations and are defined as such.

** Org-Mode Exemple Complet Minimal
   :PROPERTIES:
   :noweb-ref: Org-Mode-ECM
   :END:

A stable version of Org-Mode is provided OOTB. It's release cycle is tied to
EMACS release cycle. To get hot-fixes, cutting edge features, and easy patch
creation though, you need to use the version from Git.

The [[http://orgmode.org/manual/Installation.html][directions]] of how to run Org-Mode from Git are detailed and clear. The only
thing worth mentioning again is that in order to use *any* version of Org-Mode
other than the one that comes OOTB you *must* load Org-Mode *before* anything else
in your initialization file. This can be surprisingly easy to do! When you get
unexpected Org-Mode behavior be sure to stop and investigate ~org-version~ and
decide whether or not it is what you expect and prepare an ECM if necessary.

Add the Org-Mode core distribution the load path.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/src/org-mode/lisp")
#+END_SRC

Add the Org-Mode-Contributions distribution to the load path. The contributions
are critical to and inseparable from the core distribution.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/src/org-mode/contrib/lisp")
#+END_SRC

This system allows for single-character alphabetical bullet ists. For Org-Mode
to provide that, the following property must exist before Org-Mode is even
loaded. This configuration must occur here. *Never* remove this from a submitted
ECM.

#+BEGIN_SRC emacs-lisp
(setq org-list-allow-alphabetical t)
#+END_SRC

Load Org-Mode.

#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

** Tangling
   :PROPERTIES:
   :noweb-ref: Org-Mode-Tangle
   :END:

** Weaving
** Programming
* Piano Lessons
* Quiet and Pleasant
* Principle of Least Astonishment
  :PROPERTIES:
  :noweb-ref: Principle-of-Least-Astonishment
  :END:

EMACS can load 3 different representations of a Emacs-Lisp source file code
OOTB. The name of source code file is the value before the file extension. When
you pass ~load~ a name it searches for an acceptable representation. Representation
types are indicated by their extension name. =.el= is a human readable and
uncompiled. =.elc= is not human readable and compiled. =.gz= is Gzip compressed and
contains =.el= or =.elc= files.

The variable ~load-suffixes~ determines the order for which text and byte-code
representations are first searched by extension-name. The variable
~load-file-rep-suffixes~ determines the order for all other extension types.

OOTB, EMACS combines the productivity of REPL style of development with the
speed of compiled code by ~load~'ing byte-code first, text second, and compressed
third. This workflow gives you the fastest code at run-time and lets you
experiment with new features stored in text. When you are ready to use them
every time, you compile them. There is only one downside of this approach: when
you forget that it works this way it can be confusing.

When you forget about that style of system you end up with surprising behavior.
The surprise comes when you forget to compile code and then write new code that
depends on the now old version of that code. After the next build, your system
can break in surprising ways. This violates the Principle of Least Astonishment.

HELP values predictability so it does the simplest thing possible: ~load~ searches
for the newest representation of a file and uses that one. It assumes that Sysop
has total and complete control over the management of file representations.

This is the *first* thing that /ought/ to happen in the initialization of *any*
tangled system.

#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC

* Watch What You Eat
  :PROPERTIES:
  :noweb-ref: Watch-What-You-Eat
  :END:

*Code requiring package-management can only follow this block.*

Before ELPA, I used SVN to manage software packages for HELP. After ELPA, HELP
used ELPA-packages. HELP uses MELPA and GNU. MELPA packages always have their
issues fixed very quickly. GNU packages rarely have issues.

Initialize Package.

#+BEGIN_SRC emacs-lisp
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("gnu" . "http://elpa.gnu.org/packages/") t)
#+END_SRC

Use-Package is the most configurable and performant way to manage ELPA packages.

Add the Use-Package distribution the load path.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/src/use-package")
#+END_SRC

Load Use-Package.

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

* Style Guide

- Code Block
  - Tell the story in speech, and then in code.
  - Consider it another paragraph and indent appropriately.
    - Never separate a paragraph and and a Code Block with a colon.
- Content
  - When importing update to conform with Style-Guide.
- Dictionary
  - Exemple Complet Minimal (ECM) :: The minimal complete example of expected
    versus actual behavior. Comes from the [[http://orgmode.org/worg/org-faq.html][Org-Mode]] community.
  - Out of the Box (OOTB) :: The default configuration of EMACS.
  - Sysop :: A proper noun. The System-Operator. The human operating this EMACS
    based Org-Mode enabled literate programming system. Yourself.
  - Tangle :: A verb. Assemble a document for consumption by another program or
    machine.
  - Weave :: A verb. Prepare a document for consumption by a human.
- Entity
  - Code Snippet
    - Use ~code style~.
  - Non-Code Snippet
    - Program names, file types
    - Use =verbatim= style
  - Package
    - Same as Headline.
    - Dashes separate definition.
    - Acronyms are all upper case to distinguish from words for example "GNU"
      vs "Gnu".
- Headline
  - Capitalize nouns, verbs, and adjectives.
  - Don't capitalize conjunctions unless they are starting the definition.
  - Sell this "chapter" to the reader.
- Hyperlink
  - External
    - Exclude those easily found with a search-engine unless you are willing to
      verify their existence frequently.
    - Include when they make the task at hand immensely easier.
  - Internal
    - Heading artifacts can be referenced so the need here is minimal to
      non-existent.
- Literate Programming
  - Comments
    - Exclude from tangle-blocks and rely on source-block for traceability
  - Noweb-Ref
    - Same as Headline.
    - Replace spaces with dashes.
    - Probably the Heading name.
- Maintenance
  - Frequently check spelling, grammar, and weasel-words.
- Plain List
  - End single sentences with a period.
- Programming Language
  - Emacs-Lisp
    - Use ~t~ for ~true~.
- Tangling
  - When ordering matters, rely on block-reuse to enforce correct generation.
- Voice
  - The audience is Sysop.
  - The audience is another EMACS user.
  - Pleasant conversation style.
  - Simple and detailed.
  - Provide answers; this document is an answer.
  - Do not pose questions; this document is not a question.
- Word Choice
  - Use Arabic numerals.
  - Instead of writing "tells EMACS", communicate the result.
  - "HELP" not "this system".
