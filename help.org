#+STARTUP: showeverything
* README

HELP Enables Literate Programming.

Setup:

1) [[http://orgmode.org/][Clone Org-Mode]] to =~/src/=.
2) [[https://github.com/jwiegley/use-package][Clone Use-Package]] to =~/src/=.

* Webs We Weave

** Org-Mode Exemple Complet Minimal
   :PROPERTIES:
   :noweb-ref: Org-Mode-ECM-Tangle-Block
   :header-args:   :tangle "./.org-mode-ecm.emacs.el" :comments no
   :END:

Configure EMACS to easily provide ECMs.

Sysop is likely to use this often.

Start EMACS with this command:

=open /Applications/Emacs.app --args --quick --load ~/src/help/.org-mode-ecm.emacs.el=

#+BEGIN_SRC emacs-lisp
«Principle-of-Least-Astonishment»
«Org-Mode-ECM»
#+END_SRC

** The Whole Enchilada
   :PROPERTIES:
   :header-args:   :tangle "./.emacs.el" :comments no
   :END:

Configure EMACS to do everything provided by this document.

Sysop is likely to use this daily.

Start EMACS with this command:

#+BEGIN_SRC emacs-lisp
«Org-Mode-ECM-Tangle-Block»
«Org-Mode-Helper-Functions»
«Org-Mode-Tangle»
«Watch-What-You-Eat»
«Org-Mode-Execute»
«Org-Mode-Weave»
«Org-Mode-Programming»
«Special-Operating-Procedure»
«Standard-Operating-Procedure»
«Quiet-and-Pleasant-Appearance»
«Piano-Lessons»
#+END_SRC

=open /Applications/Emacs.app=

* Literate Programming

This system enables you to perform 3 Literate Document activities. These
activities combine to provide a rich Literate Programming environment. Their
configuration is defined with more granularity here to make sense of how the
system is configured, where, and how it works. These activities are not
performed interactively by the user. They are automatic operations that occur
as a result of the configuration of the document itself.

The following is the guide for the default configuration of this system and how
it behaves.

Key:

- Columns
  - S :: Source document modified?
  - W :: Destination weaved-document modified?
  - T :: Destination tangled-document modified?
  - E :: Evaluation occurred?

| Activity   | S | W | T | E |
|------------+---+---+---+---|
| Tangling   | F | F | T | F |
| Evaluating | T | F | F | T |
| Exporting  | F | T | F | F |

They are separate and distinct operations and are defined as such.

The last logical action is the activity of "Programming". It is a combination of
three 3 activities listed above combined with the configuration of EMACS to do
so. This is an interactive activity performed Sysop. The other 3 are not
interactive.

** Org-Mode Exemple Complet Minimal
   :PROPERTIES:
   :noweb-ref: Org-Mode-ECM
   :END:

A stable version of Org-Mode is provided OOTB. It's release cycle is tied to
EMACS release cycle. To get hot-fixes, cutting edge features, and easy patch
creation though, you need to use the version from Git.

The [[http://orgmode.org/manual/Installation.html][directions]] of how to run Org-Mode from Git are detailed and clear. The only
thing worth mentioning again is that in order to use *any* version of Org-Mode
other than the one that comes OOTB you *must* load Org-Mode *before* anything else
in your initialization file. This can be surprisingly easy to do! When you get
unexpected Org-Mode behavior be sure to stop and investigate ~org-version~ and
decide whether or not it is what you expect and prepare an ECM if necessary.

Add the Org-Mode core distribution the load path.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/src/org-mode/lisp")
#+END_SRC

Add the Org-Mode-Contributions distribution to the load path. The contributions
are critical to and inseparable from the core distribution.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/src/org-mode/contrib/lisp")
#+END_SRC

This system allows for single-character alphabetical bullet lists. For Org-Mode
to provide that, the following property must exist before Org-Mode is even
loaded. This configuration must occur here. *Never* remove this from a submitted
ECM.

#+BEGIN_SRC emacs-lisp
(setq org-list-allow-alphabetical t)
#+END_SRC

Load Org-Mode.

#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

Org-Mode already uses the guillemet for demarcating noweb references, but it
does it using the work-around of just using less-than and greater-than
characters twice. That is fine. Because EMACS supports Unicode just fine though,
configure Org-Mode to use the real symbol. Another option would be to configure
Pretty-Mode. This is in the ECM section because so that I can verify behavior of
my code.

#+BEGIN_SRC emacs-lisp
(setq org-babel-noweb-wrap-start "«")
(setq org-babel-noweb-wrap-end "»")
#+END_SRC

** Helper Functions
   :PROPERTIES:
   :noweb-ref: Org-Mode-Helper-Functions
   :END:

#+BEGIN_SRC emacs-lisp
(defun help/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

(defun help/set-org-babel-default-inline-header-args (property value)
  "See `help/set-org-babel-default-header-args'; same but for inline header args."
  (setq org-babel-default-inline-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-inline-header-args))))
#+END_SRC

** Tangling
   :PROPERTIES:
   :noweb-ref: Org-Mode-Tangle
   :END:

There is a way to disable property inheritance that speeds up tangling a lot.
This is only for user-defined properties; *not* Org-Mode properties.

The problem is that you lose property inheritance which is unacceptable. Never,
never allow that. Its inconsistent with how Org-Mode works.

#+BEGIN_SRC emacs-lisp
(setq org-babel-use-quick-and-dirty-noweb-expansion nil)
#+END_SRC

*** Comments

Provide as much information as possible in the tangled artifact about the
origin artifact.

#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :comments "noweb")
#+END_SRC

*** Padline

~org-babel-tangle-jump-to-org~ requires padded lines. This configuration could
arguably appear in the "Programming" heading because it impacts operation. It
lives here because it *must* occur as part of the Tangling activity so that it
can be used in the Programming activity.

#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :padline "yes")
#+END_SRC

*** Noweb

Expand noweb references in source-blocks before:

| Activity   | Expand |
|------------+--------|
| Tangling   | T      |
| Evaluating | T      |
| Exporting  | F      |

This embraces the notion that you are telling the right thing to the
computer and the right thing to the human. By the time you get to exporting, you
ought to refer to the generated document.

#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :noweb "no-export")
#+END_SRC

** Evaluating
   :PROPERTIES:
   :noweb-ref: Org-Mode-Execute
   :END:

Install OB-SML.

#+BEGIN_SRC emacs-lisp
(use-package ob-sml
  :ensure t)
#+END_SRC

Org-Mode may evaluate all of the listed languages.

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((calc . t)
   (css . t)
   (dot . t)
   (ditaa . t)
   (emacs-lisp . t)
   (js . t)
   (latex . t)
   (lilypond . t)
   (makefile . t)
   (org . t)
   (perl . t)
   (python . t)
   (plantuml . t)
   (R . t)
   (scheme . t)
   (sh . t)
   (sml . t)
   (sql . t)))
#+END_SRC

*** Eval

Never evaluate source-blocks or in-line-source-blocks on export.

#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :eval "never-export")
(help/set-org-babel-default-inline-header-args :eval "never-export")
#+END_SRC

Be sure to never evaluate in-line-source-blocks on export.

#+BEGIN_SRC emacs-lisp
(setq org-export-babel-evaluate nil)
#+END_SRC

*** Results

This system stores the results of evaluation in the source document. It believes
that the results are critical to the research.

Always display results like you would seem them in a REPL. For source-blocks
this means an =output= display and for in-line-source-blocks it means a =value=
display.

Replace theme each time you evaluate the block.

#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :results "output replace")
(help/set-org-babel-default-inline-header-args :results "value replace")
#+END_SRC

** Weaving
   :PROPERTIES:
   :noweb-ref: Org-Mode-Weave
   :END:

Load Htmlize for HTML export. Use it. Use in-line CSS.

#+BEGIN_SRC emacs-lisp
(require 'htmlize)
(setq org-html-htmlize-output-type htmlize-output-type)
(setq htmlize-output-type 'inline-css)
#+END_SRC

Load Beamer for creating reports.

#+BEGIN_SRC emacs-lisp
(require 'ox-beamer)
#+END_SRC

Load Markdown export for system compatibility.

#+BEGIN_SRC emacs-lisp
(require 'ox-md)
#+END_SRC

Make sure that exported files are Unicode UTF-8.
#+BEGIN_SRC emacs-lisp
(setq org-export-coding-system 'utf-8)
#+END_SRC

Do not preserve line-breaks when exporting instead let the destination
format handle it as it sees fit. This doesn't work like I had expected and makes
me wonder what I am confused about here. When I export to HTML text containing
linebreaks no longer has linebreaks. This is what I expect. When I export that
same text to a buffer though, the line breaks are included. Currently I use
=sacha/unfill-paragraph= on that code.
#+BEGIN_SRC emacs-lisp
(setq org-export-preserve-breaks nil)
#+END_SRC

When exporting anything, do not insert the exported content into the kill ring.
#+BEGIN_SRC emacs-lisp
(setq org-export-copy-to-kill-ring nil)
#+END_SRC

By default I never want a table of contents generated. It is so easy to enable
it with a property, it will be fine to turn it off.

#+BEGIN_SRC emacs-lisp
(setq org-export-with-toc nil)
#+END_SRC

On export, maintain the literal spacing as found in the source block. Obviously
this is important for makefiles. It is really important everywhere because
anything else would violate the law of least surprise.

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

*** Exports

Always share source blocks and their results. Whether or not to generate a
result for a particular source block is configured per-block. If you don't want
to share a result for a source block then disable storage of results on that
block.

#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :exports "both")
#+END_SRC


*** KOMA-Script

I enjoy writing letters. I enjoy reading letters. LaTeX produces letters that
are easy to print and read. Org provides a [[http://orgmode.org/worg/exporters/koma-letter-export.html][KOMA Script exporter]] for [[https://www.ctan.org/pkg/koma-script?lang%3Den][koma-script]].
The Org documentation mentions that the user should read the [[http://orgmode.org/cgit.cgi/org-mode.git/plain/contrib/lisp/ox-koma-letter.el][ox-koma-letter.el]]
header documentation.

The [[https://www.ctan.org/pkg/babel?lang%3Den][babel]] packages is mentioned in the Org documentation. The package
documentation explains that it should be used with LaTeX, but not XeTeX. Some
time ago I decided to stick with LaTeX.

Load the KOMA exporter.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'ox '(require 'ox-koma-letter))
#+END_SRC

- Understanding KOMA and how to use it
  - There are 4 ways to set letter metadata, listed "from the most specific to
    the most general" (not sure exactly what this statement means, and the conclusion of my notes tries to make sense of what is really going on here and what is the best way to do things)
    - Org option lines (ORG)
    - Separate Org latex classes (LTX)
    - Emacs Lisp variables (LISP)
    - Letter Class Option files (LCO)
- Notes and thoughts on the ways to use it
  - LTX
    - By following the setup directions, you do this, creating "my-letter" class
    - Familiar and easy if you already know LaTeX
      - At some point in your workflow, you *must* define a class to use, anyway
    - Very easy to do, just define the class template and set =org-koma-letter-default-class=
  - ORG
    - Simple way that makes it very easy to just focus on the document content
    - This metadata takes highest priority in the workflow
      - So you should set your typical defaults in LISP or LCO and customize it
        here. This is exactly what I wanted to know.
      - This lets you do your tweaking in each unique file while relying on the
        most common defaults defined elsewhere
  - LISP
    - Very familiar style of configuring things
  - LCO
    - LCO == Letter Class Option filess
    - LCO files are TeX
    - They are included in the generated TeX source code from the letter
    - Gives *full* access to KOMA-Script
      - Big deal, because not everything is exposed through ORG or LISP
      - Also gives full access to any and all TeX and LaTeX code
    - LCO files are a KOMA-Script thing, so they are a LaTeX thing
    -
      #+begin_quote
      Letter metadata set in LCO files overwrites letter metadata set in Emacs
      variables but not letter metadata set in the Org file.
      #+end_quote
    - When you include multiple LCO files, they are evaluted LIFO. Properties
      are set as they first appear, and are not set again. Say you include
      "MyGeneralStuffForAnyLetter.lco" and then include
      "MyStuffSpecificToThisLetter.lco". The specific stuff will get set first.
      Then general stuff will get set last.
      - Surely there is a better way to phrase this. I will work on that.
- Recommendations
  - What is the easiest way to starat using KOMA-Script based on what you know
    today?
  - If you don't know any of the approaches
    - Then choose between learning LaTeX and Org
  - If you only know LaTeX
    - Then you will use the LTX/LCO metadata approach
  - If you only know ORG
    - Then you will use the ORG metadata approach
  - If you only know ORG and LISP
    - Then you will use the LISP approach for general metadata and the ORG
      approach specific metadata
  - If you know LTX/LCO, ORG, and LISP
    - Then you have total flexibility
    - The fact is that
      - ORG settings always trump LTX/LCO and LISP
      - LISP settings are a subset of all of the settings available in
        KOMA-Script, so you will always have to fall back to LTX/LCO if you want
        to use unexposed features
      - LCO files are just plain old LaTeX, which you already know
    - So the best thing to do
      - Is to use ORG for letter-specific settings
      - And LTX for general settings
      - Everything is a lot simpler this way because
        - One less metadata approach to keep track of
        - All KOMA-Script features are present
        - Need to learn details of KOMA-Script package anyway

Configure the default class.

[[https://tex.stackexchange.com/questions/102922/how-can-i-get-us-letter-output-from-koma-scripts-scrlttr2-class][This]] post explains how to default the US letter size. That is the likely default
for my printed correspondence.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("my-letter"
                    "\\documentclass[paper=letter, pagesize, fontsize=10pt, parskip]{scrlttr2}
\\usepackage[english]{babel}
\\usepackage[osf]{mathpazo}"))

     (setq org-koma-letter-default-class "my-letter")))
#+END_SRC

There are two formats for the letters: [[http://orgmode.org/w/?p%3Dworg.git%3Ba%3Dblob%3Bf%3Dexporters/koma-letter-new-example.org%3Bh%3D180a9a0e10dd8f7483a67946daf36732c316f821%3Bhb%3D180a9a0e10dd8f7483a67946daf36732c316f821][heading-based]] and [[http://orgmode.org/w/?p%3Dworg.git%3Ba%3Dblob%3Bf%3Dexporters/koma-letter-example.org%3Bh%3De21b8b00c3e895be9dd573d02ea84b08796296a3%3Bhb%3De21b8b00c3e895be9dd573d02ea84b08796296a3][property-based]].

Set up my default LCO files.

#+BEGIN_SRC emacs-lisp
(setq org-koma-letter-class-option-file "UScommercial9 KomaDefault")
#+END_SRC


** Programming
   :PROPERTIES:
   :noweb-ref: Org-Mode-Programming
   :END:

Never "automatically" evaluate a source block.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Make it unpleasant for Sysop to modify source-block outside of a source-block
backed buffer. The next step is to write some code to prevent modifying
source-blocks outside of that place.

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively nil)
#+END_SRC

My personal TODO workflow.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "BLOCKED" "REVIEW" "DONE")))
#+END_SRC

When running in a GUI, I would like linked images to be displayed inside of
Emacs.

#+BEGIN_SRC emacs-lisp
(setq org-startup-with-inline-images (display-graphic-p))
#+END_SRC

Use Ido completion in Org-Mode.

#+BEGIN_SRC emacs-lisp
(setq org-completion-use-ido t)
(setq org-outline-path-complete-in-steps nil)
(setq org-completion-use-iswitchb nil)
#+END_SRC

Org-Mode lets you use single letter commands to do stuff on headers. I like to
use =c= for cycling the header expansion.

#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC

Ask before execution of shell links. This might seem like an Evaluation
activity. It is. It is interactive.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-shell-link-function 'y-or-n-p)
#+END_SRC

Ask before execution of Emacs-Lisp.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-elisp-link-function 'y-or-n-p)
#+END_SRC

Make sure that incomplete TODO entries prevent the enclosing parent from every
turning to DONE.

#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
#+END_SRC

Allow the mouse to do Org-Mode things like expand and collapse headings.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (require 'org-mouse))
#+END_SRC

Use a real ellipsis to render an ellipsis for Org-Mode stuff like showing that a
header is collapsed.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "…")
#+END_SRC

It is easy to see indentation of headlines without having to count asterisks, so
don't show them, only show the significant and last one.

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

Display emphasized text as you would in a WYSIWYG editor.

#+BEGIN_SRC emacs-lisp
(setq org-fontify-emphasized-text t)
#+END_SRC

Use Unicode characters to visualize things like right arrow eg \rarr . Most of those
symbols are correctly exported to the destination format. The most obvious is
this example in LaTeX versus Text.

#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

Highlight LaTeX and related markup.

Normally, I don't do any syntax highlighting, as I believe that should be
delegated to source buffers, thinking that to do otherwise is distracting.
However, I already do configure subscripts and Greek letters to be displayed
with syntax highlighting, because I want to indicate to the human reader that
they are special, and specifically /not/-Unicode. Do the same thing for LaTeX
and related markup.

#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

Allow "refactoring" of Footnotes between documents.

#+BEGIN_SRC emacs-lisp
(setq org-footnote-define-inline t)
(setq org-footnote-auto-label 'random)
(setq org-footnote-auto-adjust nil)
(setq org-footnote-section nil)
#+END_SRC

This is an amazingly easy way to screw up your document. The more you edit
org docs, the more you realize how you must truly protect it.

#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'error)
#+END_SRC

Though I am not delving deep, it is hard not to want to customize some stuff
and perhaps this is the start. Even though I enabled this, I don't think that I
ever used it.

#+BEGIN_SRC emacs-lisp
(setq org-loop-over-headlines-in-active-region t)
#+END_SRC

It is /almost always/ faster to work with org documents when they are fully
expanded. Anyway, the structure cycling makes it really, really easy to get an
/outline view/ again.

#+BEGIN_SRC emacs-lisp
(setq org-startup-folded "nofold")
#+END_SRC

When images are displayed in the buffer, display them in their actual size. As
the operator, I want to know their true form. Any modifications required for
export will be stated explicitly.

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width t)
#+END_SRC

Hide the delimeter for emphasized text. Unicode characters break table
alignment.

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

Realign tables automatically.

#+BEGIN_SRC emacs-lisp
(setq org-startup-align-all-tables t)
#+END_SRC

Always use Unicode checkboxes.

#+BEGIN_SRC emacs-lisp
(setq org-html-checkbox-type 'unicode)
#+END_SRC

You may display syntax highlighting for code in source blocks. I don't.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively nil)
#+END_SRC

Never indent the contents of a source-block automatically.

#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
#+END_SRC

When edit mode is exited, the option exists to automatically remove empty
opening and closed lines for the source block. Never do this. The thing is that
I forgot why. When I was working on a recent analysis with ℝ there was a
space appearing in the opening and closing line of the source block that didn't
appear in the source editing buffer. That surprised me. I am sure that I've
forgotten why this is the case. I don't like it because you add a bunch of
empty lines in the source buffer for every source block. With that in mind I
will enable this feature and try it out again.

#+BEGIN_SRC emacs-lisp
(setq org-src-strip-leading-and-trailing-blank-lines t)
#+END_SRC

The source block buffer may be configured to appear in a few different places.
For a while I really liked =reorganize-frame= because sometimes you want to be
able to see the code you are editing in edition to the rest of the document. At
least that is what I am telling myself. Once I learned you could change it I
realized that 1 I should have asked if it could be changed and 2 I should have
changed it. The flow that I've got configured here is that you are either in the
source document where code blocks are not highlighted or you are in the source
block so you are editing in a buffer that is full-fledged ALEC. That is the best
way so you can focus completely on each task at hand in the ideal mode for that
task. Anything else results in distractions and errors.

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

Org-Mode has a really nice feature that hitting =C-c C-c= will generally just do
the /right thing/. It is really nice. That feature extends to source blocks of
course. Ironically I had a typo here, typing /of curse/ instead of /of course/.
The thing is that you really, really need to develop a personal workflow, and
then configure the tool to enable it. The more I learn about Org-Mode, the more
leery I am about making it really easy to evaluate code. I want it to be a
really, really specific and decided action to evaluate a code block, so don't
make it so easy as =C-c C-c=.

#+BEGIN_SRC emacs-lisp
(setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
#+END_SRC

* Piano Lessons
   :PROPERTIES:
   :noweb-ref: Piano-Lessons
   :END:

** A Fine Cup of EMACS


Every EMACS user ought to have a [[http://shop.fsf.org/product/gnu-emacs-reference-mugs/][Emacs Reference Mug]] at their desk. The mug
invite other user to ask questions. Give the mug as a gift to every user you
know who would benefit from learning EMACS. The mug reminds us all that EMACS is
the perfect configuration of EMACS. It is available on every machine. When you
break your system, you can always fall back to the good and reliable default
EMACS configuration to get your system up and running again. The OOTB
configuration of EMACS is one of the most important system configurations that
you will every find. That is why it is important never to ruin it.

This system wants to maximize accessibility for new users. It wants anyone to be
able to download and use it without surprises. It wants the mug to serve as a
fine reference for anyone to use. It wants to keep things simple and familiar so
that anyone who has learned EMACS OOTB can use it pleasantly and productively.
These goals are essential to configuring the keyboard for this system.

** A Keyboard on Every Desk

The configuration of the keyboard on an EMACS system can completely change the
experience. No keyboard makes it impossible. A Kinesis Ergo makes it feel
really good. Soft keys make it feel soft; hard keys make it feel faster. The
[[http://xahlee.info/kbd/dvorak_and_all_keyboard_layouts.html][layout of letters]] is statistically proven to make you more productive. You may
even study the statistics of your own writing and choose a layout optimized for
you. The ways to configure your keyboard are limitless because everyone is
unique. How to get the best configuration tips for your system? Do what works
for everyone.

Make this system easy to use on any keyboard. Make this system easy to use in
English. Make this system easy to use with average hand strength. These goals
are essential to configuring the keyboard for this system.

** A Full Pot of EMACS on Every Desk

#+begin_quote
If you want to go quickly, go alone. If you want to go far, go together.
#+end_quote
-- [[https://en.wikiquote.org/wiki/October_14][African proverb]]

EMACS users go far together. Here is how to do it.

- Use a QWERTY keyboard.
  - Assumptions.
    - Impossible to use EMACS without a keyboard.
    - Available on every laptop.
    - Likely to come with every computer ever.
    - Easy to find nearly everywhere.
- You are using two hands with normal strength and configuration.
  - Assumptions.
    - You have 5 fingers on each hand.
      - Thumb.
      - Index.
      - Middle.
      - Ring.
      - Pinky.
    - Each will be positioned in one of two positions at any time.
      - Home position.
        - Effortlessly reach bottom "space-bar" row to top "qwerty" row.
        - Width accessible from a-;.
        - Difficult to reach number and =F= row.
        - Full operational strength with every finger.
        - Includes caps-lock and return.
      - Foreign position.
        - Every key beyond the Home position.
        - Ring and Pinky fingers are weak. Thumb, Index, and Middle are strong.
    - Home and Foreign key usage.
      - In Home, every finger has full strength.
        - Use them as needed.
      - In Foreign, Pinky and Ring are weakest.
        - Make your hand into a crab claw to operate keys that you normally
          thing to use your Pinky. The key must be large. Use this position for
          "stamping" and "holding" keys. You can easily to the same thing with
          your thumb. You use the strength of you Thumb, Index, and Middle
          finger to bolster your Ring and Pinky to push/hold the desired key.
          This makes sense for wider physical keys. You will never use your
          Pinky or Ring by themselves.
- Never bind to =F= keys.
  - Assumptions.
    - They are a painful stretch on most keyboards. Require lone Pinky.
    - Most operating systems bind actions to them OOTB.
    - EMACS comes with key-bindings OOTB.
- Almost never bind with =C= or =M= combinations.
  - Assumptions.
    - EMACS comes with key-bindings OOTB.
    - Even though =C-c= is the "user namespace" it is usually populated with
      binding from packages that you are likely to stomp on.
    - There are often sweet and precise exceptions to this advice like
      combinations for the =RET= and =<return>= but otherwise it is a bad
      idea.
- Logical name-spaces you should use are =home-key/key-chords=,
  =double-home-key/key-chords=, =Shift-home-key/key-chords=, =s-name-space=, and
  =Hydra-name-space=.
  - Assumptions
    - Never makes sense to ignore previous assumptions.
    - Will use =s= and shift a lot so make them accessible according to strengths
      asserted above.
    - =C= and =M= name-spaces will be used a lot.
- Map your keyboard to make logical meta keys =stomp-keys= like =return=, =shift=, and
  =space-bar= easily accessible. Mirror them to make them equally accessible with
  each hand if possible.
  - Assumptions.
    - You can remap your keyboard before it reaches EMACS.
    - =Shift= is logically a meta key in this system using Key-Chord.
    - Map is a verb for defining keys, not key-bindings.
    - Map the space-bar to =C= if held and return if pressed and released.
    - Map =M= to the keys to the left and right of the space-bar
    - Map =return= to the keys left and right of =M=.
    - Map =caps-lock= and =return= to =s= (super).
    - Leave =shift= alone.
    - =s= and =shift= will be critical to all custom operations in this system. Most
      key-bindings will go there. Exceptions need to be thoughtfully considered
      and frequently revisited.
    - Here was my original goal.
      #+BEGIN_EXAMPLE
+---------------------------------------+
| +-----+                       +-----+ |
| |RET  |                       |  RET| |
| +-----+                       +-----+ |
| +------+                     +------+ |
| |SHIFT |                     | SHIFT| |
| +------+                     +------+ |
|        +-+ +-+ +-----+ +-+ +-+        |
|        |s| |M| |C/spc| |M| |s|        |
|        +-+ +-+ +-----+ +-+ +-+        |
|                                       |
+---------------------------------------+
      #+END_EXAMPLE

- Understanding your congitive landscape.
  - Assumptions.
    - You operate within a cognitive landscape and at any given moment you are
      in a particular =place=.
    - While residing in each =place= you perform logically related =activities=.
      Activities facilitate logical actions like modification within that =place=.
    - While performing =activities= there is a logical sense of "flow" while
      performing them that should never be interrupted. Usually an interruption
      in flow occurs when you are going to go to a new =place=.
    - The =distance= between =places= is measures in the similarity between the
      =actions= that you find there.
    - As you develop these ides it will be obvious where things should go.

- Choosing =places=.
  - Assumptions
    - =s= namespace
      - =Actions= here are for the =place= inside of the buffer itself. They are for
        immediate acting upon the contents of the buffer. They are logically
        related, used frequently, and likely to be memorized.
      - When you come here, you are likely to stay for some time before getting
        out.
      - Only use single key bindings; anything more may be a new logical
        namespace and may use a Hydra.
      - Split the home sides of the keyboard in half.
      - The left side of the keyboard should be use for operations common to
        every mode. It has 15 bindings available; 20 if you use 1-5.
        - For example ~goto-line~ and ~ispell~.
      - The right side of the keyboard should be used operations specific to the
        current major mode. It has 19 bindings available; 26 if you use 6-=.
        - For example in Org-Mode navigating between source-blocks and
          evaluating them.
    - Single-key key-chord name-space.
      - You will use come here often, perform your single =action=, and be done
        and leave very frequently and quickly.
      - Only use the symbols, so 10 without shift and 20 with shift.
      - Using alphabetical characters always results in unpleasant surprises.
    - Double-key key-chord name-space.
      - Very attractive.
      - Nice if you don't like double-keys.
      - Easy to use all fingers.
      - Unexpected breakage very easy.
        - =cd= in ~eshell~.
      - Use sparingly.
      - Not worth analyzing ideal combinations; just use it and see if it
        doesn't break.
    - Hyra name-space.
      - Sometimes you want to do something in a =place= but you aren't sure what
        and you aren't sure where you will go next from there. For example you
        might want to perform an Org-Mode =action= that is important but you don't
        really use much. For example exporting to HTML might not be common for
        you but you value.
      - =Hydras= can be used for very relates actions too. The difference between
        the =s= name-space is the distance between them and where you are now.
        In the =s= namespace you go there very quickly. For =Hydras= sometimes you
        can get the fast and sometimes more slowly. They are complementary to
        every name-space.

** Take a Sip

Because Use-Package is used in this system, the binding definitions often live
in the call itself.

*** Left Side

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-a") #'vc-next-action)
#+END_SRC

- =s-b= ~magit-status~

*** Right Side

* Special Operating Procedure
   :PROPERTIES:
   :noweb-ref: Special-Operating-Procedure
   :END:

The following code and packages are special to this configuration. They provide
critical functionality for configuring the rest of the system. They provide
ideas that make the entire system usable, productive, expressive, and fast.

** Display

Make it easy to conditionally evaluate code when running with a graphical
display.

#+BEGIN_SRC emacs-lisp
(defmacro help/on-gui (statement &rest statements)
  "Evaluate the enclosed body only when run on GUI."
  `(when (display-graphic-p)
     ,statement
     ,@statements))
#+END_SRC

** Keyboard

Key-Chord mode is amazing. Piano-Lessons shows you how.

#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :ensure t
  :config
  (key-chord-mode t)
  (setq key-chord-two-keys-delay 0.1))
#+END_SRC

** Libraries

Dash is nice to use.

#+BEGIN_SRC emacs-lisp
(use-package dash
  :ensure t
  :config
  (dash-enable-font-lock))
#+END_SRC

F is nice to use.

#+BEGIN_SRC emacs-lisp
(use-package f
  :ensure t)
#+END_SRC

S is nice to use.

#+BEGIN_SRC emacs-lisp
(use-package s
  :ensure t)
#+END_SRC

** OSX

Make it easy to evaluate code only when running on OSX.

#+BEGIN_SRC emacs-lisp
(defmacro help/on-osx (statement &rest statements)
  "Evaluate the enclosed body only when run on OSX."
  `(when (eq system-type 'darwin)
     ,statement
     ,@statements))
#+END_SRC

Pull in the =ENVIRONMENT= variables because the GUI version of EMACS does not.

#+BEGIN_SRC emacs-lisp
(help/on-osx
 (use-package exec-path-from-shell
   :ensure t
   :config
   (exec-path-from-shell-initialize)))
#+END_SRC

Configure the meta keys.

Enable the =super= key-space:
#+BEGIN_SRC emacs-lisp
(help/on-osx
 (setq mac-control-modifier 'control)
 (setq mac-command-modifier 'meta)
 (setq mac-option-modifier 'super))
#+END_SRC

EMACS dialogues don't work OSX. They lock up EMACS.

This is a known issue. [[https://superuser.com/questions/125569/how-to-fix-emacs-popup-dialogs-on-mac-os-x][Here]] is the solution.

#+BEGIN_SRC emacs-lisp
(help/on-osx
 (defun help/yes-or-no-p (orig-fun &rest args)
   "Prevent yes-or-no-p from activating a dialog."
   (let ((use-dialog-box nil))
     (apply orig-fun args)))
 (advice-add 'yes-or-no-p :around #'help/yes-or-no-p)
 (advice-add 'y-or-n-p :around #'help/yes-or-no-p))
#+END_SRC

* Standard Operating Procedure
   :PROPERTIES:
   :noweb-ref: Standard-Operating-Procedure
   :END:

Configure EMACS to maximum utility.

** Buffer

Maintain buffers across sessions. Desktop-Save-Mode persists very part of the
buffer. If you upgrade a package that uses buffer-variables that have changed
you may get unexpected behavior. Close all buffers and open them again after
making such breaking changes.

#+BEGIN_SRC emacs-lisp
(desktop-save-mode t)
(setq desktop-restore-eager 10)
#+END_SRC

** Font

Use Unicode-Font to provide as many Unicode fonts as possible.

Here are the Unicode fonts that provide nearly everything.

| Name    | Version | URL | Comments                  |
|---------+---------+-----+---------------------------|
| [[http://sourceforge.net/projects/dejavu/files/dejavu/2.34/dejavu-fonts-ttf-2.34.tar.bz2][DejaVu]]  |    2.43 | [[http://sourceforge.net/projects/dejavu/files/dejavu/2.34/dejavu-fonts-ttf-2.34.tar.bz2][.]]   | Modern classic            |
| [[http://users.teilar.gr/~g1951d/][Symbola]] |    7.17 | [[http://users.teilar.gr/~g1951d/Symbola.zip][.]]   | Neat                      |
| [[http://www.quivira-font.com/][Quivira]] |     4.0 | [[http://www.quivira-font.com/files/Quivira.otf][.]]   | Amazing                   |
| [[https://code.google.com/p/noto/][Noto]]    |       ? | [[http://noto.googlecode.com/git/fonts/individual/hinted/NotoSans-Regular.ttc][1]] [[http://noto.googlecode.com/git/fonts/individual/unhinted/NotoSansSymbols-Regular.ttf][2]] | Has morese code, and more |

To test it run =view-hello-file= and =M-x list-charset-chars RET unicode-bmp RET=.

Perhaps educationally there is a character for bowel-movements: 💩.

#+BEGIN_SRC emacs-lisp
(use-package unicode-fonts
  :ensure t
  :config
  (unicode-fonts-setup))
#+END_SRC

** Save History of All Things

It is nice to have commands and their history saved so that every time you get
back to work, you can just re-run stuff as you need it.

#+BEGIN_SRC emacs-lisp
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
(savehist-mode t)
#+END_SRC

** Version Control

Use VC for committing the current file quickly and use Magit for everything
else.

#+BEGIN_SRC emacs-lisp
(use-package magit
             :ensure t
             :config
             (global-set-key (kbd "s-s") #'magit-status))
#+END_SRC

* Quiet and Pleasant Appearance
   :PROPERTIES:
   :noweb-ref: Quiet-and-Pleasant-Appearance
   :END:

Configure EMACS to personal-taste for "noise" and "form".

** Buffer

Line numbers make documents easier to read. Account for Literate documents.

#+BEGIN_SRC emacs-lisp
(add-hook #'text-mode-hook #'linum-mode)
(add-hook #'prog-mode-hook #'linum-mode)
#+END_SRC

Don't use audible bells, use visual bells.

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
(setq visible-bell t)
#+END_SRC

Highlight s-expressions.

#+BEGIN_SRC emacs-lisp
(setq blink-matching-paren nil)
(show-paren-mode +1)
(setq show-paren-delay 0)
(setq show-paren-style 'expression)
#+END_SRC

The cursor should not blink and distract you. On a graphic display make the
cursor a box and stretch it as wide as the character below it.

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
(help/on-gui
 (setq-default cursor-type 'box)
 (setq x-stretch-cursor 1))
#+END_SRC

** Color Theme

The Solarized theme is the perfect theme for everything. bozhidar's
release. It is soft and gentle yet easy to read in any situation.

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure t
  :config
  (setq solarized-distinct-fringe-background t)
  (setq solarized-high-contrast-mode-line t)
  (setq solarized-use-less-bold t)
  (setq solarized-use-more-italic nil)
  (setq solarized-emphasize-indicators nil)
  (load-theme 'solarized-dark))
#+END_SRC

** Font

The best programming font is Deja Vu Sans Mono because it sans-serif and
support a lot of Unicode characters. Set it to a good default for an 80
character wide buffer and make it easy to adjust it.

#+BEGIN_SRC emacs-lisp
(help/on-gui
 (defvar help/font-size 10 "The preferred font size.")
 (help/on-osx (setq help/font-size 17))
 (defconst help/font-base "DejaVu Sans Mono" "The preferred font name.")
 (defun help/font-ok-p ()
   "Is the configured font valid?"
   (interactive)
   (member help/font-base (font-family-list)))
 (defun help/font-name ()
   "Compute the font name and size string."
   (interactive)
   (let* ((size (number-to-string help/font-size))
          (name (concat help/font-base "-" size)))
     name))
 (defun help/update-font ()
   "Updates the current font given configuration values."
   (interactive)
   (if (help/font-ok-p)
       (progn
         (message "Setting font to: %s" (help/font-name))
         (set-default-font (help/font-name)))
     (message (concat "Your preferred font is not available: " help/font-base))))
 (defun help/text-scale-increase ()
   "Increase font size"
   (interactive)
   (setq help/font-size (+ help/font-size 1))
   (help/update-font))
 (defun help/text-scale-decrease ()
   "Reduce font size."
   (interactive)
   (when (> help/font-size 1)
     (setq help/font-size (- help/font-size 1))
     (help/update-font)))
 (help/update-font))
#+END_SRC

** Frame

The scroll-bars are helpful for new users.

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode 0)
#+END_SRC

The tool-bar is helpful for new users. Isn't the argument funny?

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

** Pointer

Hide the pointer when typing.

#+BEGIN_SRC emacs-lisp
(setq make-pointer-invisible t)
#+END_SRC

** Window

Menu bars make EMACS more accessible to non-EMACS users.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode t)
#+END_SRC

* Principle of Least Astonishment
  :PROPERTIES:
  :noweb-ref: Principle-of-Least-Astonishment
  :END:

EMACS can load 3 different representations of a Emacs-Lisp source file code
OOTB. The name of source code file is the value before the file extension. When
you pass ~load~ a name it searches for an acceptable representation. Representation
types are indicated by their extension name. =.el= is a human readable and
uncompiled. =.elc= is not human readable and compiled. =.gz= is Gzip compressed and
contains =.el= or =.elc= files.

The variable ~load-suffixes~ determines the order for which text and byte-code
representations are first searched by extension-name. The variable
~load-file-rep-suffixes~ determines the order for all other extension types.

OOTB, EMACS combines the productivity of REPL style of development with the
speed of compiled code by ~load~'ing byte-code first, text second, and compressed
third. This workflow gives you the fastest code at run-time and lets you
experiment with new features stored in text. When you are ready to use them
every time, you compile them. There is only one downside of this approach: when
you forget that it works this way it can be confusing.

When you forget about that style of system you end up with surprising behavior.
The surprise comes when you forget to compile code and then write new code that
depends on the now old version of that code. After the next build, your system
can break in surprising ways. This violates the Principle of Least Astonishment.

This system values predictability so it does the simplest thing possible: ~load~
searches for the newest representation of a file and uses that one. It assumes
that Sysop has total and complete control over the management of file
representations.

This is the *first* thing that /ought/ to happen in the initialization of *any*
tangled system.

#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC

* Watch What You Eat
  :PROPERTIES:
  :noweb-ref: Watch-What-You-Eat
  :END:

*Code requiring package-management can only follow this block.*

Before ELPA, I used SVN to manage software packages for EMACS. After ELPA,
I used ELPA-packages. Now this system uses MELPA and GNU. MELPA packages always
have their issues fixed very quickly. GNU packages rarely have issues.

Initialize Package.

#+BEGIN_SRC emacs-lisp
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("gnu" . "http://elpa.gnu.org/packages/") t)
#+END_SRC

Use-Package is the most configurable and performant way to manage ELPA packages.

Add the Use-Package distribution the load path.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/src/use-package")
#+END_SRC

Load Use-Package.

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

* Style Guide

- Code Block
  - Tell the story in speech, and then in code.
  - Consider it another paragraph and indent appropriately.
    - Never separate a paragraph and and a Code Block with a colon.
- Content
  - When importing update to conform with Style-Guide.
- Dictionary
  - Exemple Complet Minimal (ECM) :: The minimal complete example of expected
    versus actual behavior. Comes from the [[http://orgmode.org/worg/org-faq.html][Org-Mode]] community.
  - Key-Bind :: A verb. The act of creating a Key Binding.
  - Out of the Box (OOTB) :: The default configuration of EMACS.
  - Sysop :: A proper noun. The System-Operator. The human operating this EMACS
    based Org-Mode enabled literate programming system. Yourself.
  - Tangle :: A verb. Assemble a document for consumption by another program or
    machine.
  - Weave :: A verb. Prepare a document for consumption by a human.
- Entity
  - Code Snippet
    - Use ~code style~.
  - Non-Code Snippet
    - Program names, file types
    - Use =verbatim= style
  - Package
    - Same as Headline.
    - Dashes separate definition.
    - Acronyms are all upper case to distinguish from words for example "GNU"
      vs "Gnu".
- Headline
  - Capitalize nouns, verbs, and adjectives.
  - Don't capitalize conjunctions unless they are starting the definition.
  - Sell this "chapter" to the reader.
- Hyperlink
  - External
    - Exclude those easily found with a search-engine unless you are willing to
      verify their existence frequently.
    - Include when they make the task at hand immensely easier.
  - Internal
    - Heading artifacts can be referenced so the need here is minimal to
      non-existent.
- Literate Programming
  - Comments
    - Exclude from tangle-blocks and rely on source-block for traceability
  - Noweb-Ref
    - Same as Headline.
    - Replace spaces with dashes.
    - Probably the Heading name.
    - Keep depth shallow
- Maintenance
  - Frequently check spelling, grammar, and weasel-words.
- Plain List
  - End single sentences with a period.
- Programming Language
  - Emacs-Lisp
    - Use ~t~ for ~true~.
- Tangling
  - When ordering matters, rely on block-reuse to enforce correct generation.
- Voice
  - The audience is Sysop.
  - The audience is another EMACS user.
  - Pleasant conversation style.
  - Simple and detailed.
  - Provide answers; this document is an answer.
  - Do not pose questions; this document is not a question.
- Word Choice
  - Use Arabic numerals.
  - Instead of writing "tells EMACS", communicate the result.
  - "EMACS" refers to this software.
  - "This system" refers to this configuration of EMACS.
