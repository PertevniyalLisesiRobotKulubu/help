# -*- lexical-binding: t -*-

#  LocalWords:  YASnippet UTF defun PlantUML LanguageTool HELP's Eshell showeverything

#+STARTUP: showeverything

* README
  :PROPERTIES:
  :ID:       F651B86D-86C2-43A9-B0E6-CB94963BB502
  :END:

** HELP Enables Literate Programming
   :PROPERTIES:
   :ID:       39A2F05A-BC60-4879-9B66-85E43297FC97
   :END:

*Setup*

1) [[http://orgmode.org/][Clone Org-Mode]] to =~/src/=.
   1) Without =Make=: [[http://orgmode.org/worg/org-hacks.html][Generating autoloads and Compiling Org without make]]
2) [[https://github.com/jwiegley/use-package][Clone Use-Package]] to =~/src/=.
3) Create a folder for support libraries exporting it's location in a variable
   named =EELIB=.
   1) Install [[http://ditaa.sourceforge.net/][DITAA]] renaming the JAR to =ditaa.jar=.
   2) Install [[http://plantuml.com/][PlantUML]] renaming the JAR to =plantuml.jar=.
4) Install supporting software adding their exectuable location to the =PATH=.
   1) Install [[https://www.oracle.com/java/index.html][Oracle Java]].
   2) Install [[https://www.languagetool.org/][LanguageTool]] renaming it's folder to =LanguageTool=.
   3) Install [[https://tug.org/mactex/][MacTeX]].
5) Link:
   - The Eshell directory to HELP's.
     - =ln -s ~/src/help/eshell/ ~/.emacs.d/eshell=
   - The Initialization file to HELP's.
     - =ln -s ~/src/help/.emacs.el ~/.emacs.el=

* Style Guide
  :PROPERTIES:
  :ID:       03E0F0E3-DB81-4033-8F04-5D8BB5CBB2F0
  :END:

- Appearance.
  - Never override theme colors.
  - When the theme doesn't configure a face then submit a patch.
- Content
  - When importing update to conform with Style-Guide.
  - Keep tangled and weaved documents synchronized with their web.
  - Ask yourself:
    - Does it belong in this web?
    - Does it belong in this headline?
- Dictionary
  - Exemple Complet Minimal (ECM) :: The minimal complete example of expected
    versus actual behavior. [[http://orgmode.org/worg/org-faq.html][Source]].
  - Key-Bind :: A verb. The act of creating a Key Binding.
  - Literate Programming (LP) :: As Knuth intended.
  - Out of the Box (OOTB) :: The default configuration.
  - Sysop :: A proper noun. The System-Operator. The human operating this EMACS
    based Org-Mode enabled literate programming system. The reader.
  - Tangle :: A verb. Assemble a document for consumption by another program or
    machine.
  - Weave :: A verb. Prepare a document for consumption by a human.
  - Web :: A document contained Source-Block definitions that define a system.
- Encoding
  - Prefer Unicode characters over ASCII equivalents.
    - Note eventual switch form PDFLaTeX to LuaTeX.
  - Consider Org-Mode automatic handling of ASCII to UTF-8 symbols.
- File/Package Loading
  - Load every one with ~use-package~ whether it came with EMACS OOTB or ELPA.
    - ~ensure t~ tells the reader which one it came from.
  - Binding definitions often live in Piano Lessons.
  - Configurations aren't meant to be fully transplant-able because this system
    monolithic. In the interest of collaboration as much of the package
    configuration lives in the =use-package= block as possible.
- Formatting
  - Code Snippet.
    - Programming language expressions.
    - Use ~code style~.
  - Non-Code Snippet.
    - Program names, file types
    - Use =verbatim= style
  - Package.
    - Same as Headline.
    - Dashes separate definition.
    - Acronyms are all upper case to distinguish from words for example "GNU"
      vs "Gnu".
- Headline.
  - Be sure that every one has an =ID= property with a =UUID= value.
    - ~org-id-get-create~ does this. So does code in Hacking/Org Mode/Utility.
  - Capitalize: nouns, verbs, and adjectives.
  - Don't capitalize conjunctions unless they are starting the definition.
  - Sell this "chapter" to the reader.
  - Some headlines will be empty and significant; keep them.
    - Some modes don't require any configuration. The headline still needs to be
      present to remind the reader to keep it in her cognitive landscape.
      Configure other properties and modes taking it into account.
    - Every language under Hacking should show up in ~org-babel-load-languages~.
    - The =Prog*-Mode= system configuration can result in Headlines that don't
      need any configuration. The Headline still communicates the mode's
      value to the reader even if it doesn't configure EMACS.
  - It is important to include headlines that are empty and that you may not
    even end up keeping. You need them to help you explore the cognitive
    landscape with them present. In this one case, premature optimization is
    /not/ the root of all evil.
  - Sometimes headlines might better be:
    - List items.
    - Stand-alone bold text without punctuation.
- Hyperlink.
  - External.
    - Exclude those easily found with a search-engine unless you are willing to
      verify their existence frequently.
    - Include when they make the task at hand immensely easier.
  - Internal.
    - Minimize usage.
- Literate Programming.
  - Comments.
    - Exclude from tangle-blocks and rely on source-block for traceability.
  - Noweb-Ref.
    - Same as Headline.
    - Replace spaces with dashes.
    - Probably the Heading name.
    - Keep depth shallow
  - Weaver and mode configurations are tightly bound.
- Maintenance.
  - Frequently check spelling, grammar, and weasel-words.
  - Only keep working features in the system.
- Macros
  - Rendered as written-text.
  - Don't contain source code.
  - Create for ideas expressed more than 2 times.
  - Expanded during weaving, not during tangling.
- Plain List.
  - End single sentences with a period.
- Programming Language.
  - Emacs-Lisp.
    - Almost always use ~defun~ instead of ~advice-add~.
      - Functions are more normal and predictable.
      - Advice can subtly break without you noticing.
    - Parameter.
      - ~nil~ for =FALSE=.
      - ~t~ for =TRUE=.
      - ~n~ for numerical values.
    - Never ~custom-set-variables~.
    - Always use relative file paths.
    - Byte-compile frequently to minimize System warnings.
    - Prefer to byte-compile all references by using ~function~.
      - Fail-fast: it is better to know immediately if there are resolution
        issues.
    - Prefer to declare anonymous functions with ~function~.
    - [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html#Using-Lexical-Binding][Quoted via]].
    - If a non-special variable appears outside of a let form, the byte-compiler
      will warn about reference or assignment to a "free variable". An
      unused non-special variable binding within a let form provokes the
      byte-compiler will warn about an "unused lexical variable". The
      byte-compiler will also issue a warning if you use a special variable as a
      function argument.
- Source Block
  - Be sure that every one has a =NAME= property with a =UUID= value.
    - YASnippet =sc= does this. So does code in Hacking/Org Mode/Utility.
  - Tell the story in speech, and then in code.
  - Consider it another paragraph and indent appropriately.
  - When contained within a list:
    - Indent begin/end blocks with list content; this makes it clear to Org-Mode
      to export it as a code block.
  - Tangle =:file= should have the same =NAME=.
  - Virtually never edit the contents within buffer-of-origin.
    - Out of buffer edits:
      - Fast when spoken language.
      - Risky when LISP.
  - While similar to Org-Macro, the =RESULT= formatting indicates to the reader
    that the value is the result of an evaluation.
- Spelling
  - Place =LocalWords= at the beginning of the document. That way it won't get
    stomped on during development.
- Synonyms.
  - Document and System and Web.
    - A Web defines a system.
    - This document is a Web.
  - Weave and Export.
  - Sysop and Reader.
- Tangling.
  - When ordering matters, rely on block-reuse to enforce correct order.
- Voice.
  - Provide answers; do not pose questions or observations.
  - Simple and detailed.
  - Pleasant conversation style.
  - Audience is Sysop; the author included.
- Weaving.
  - Strive to keep the weaving in synchronization with the tangling.
- Word Choice.
  - Use Arabic numerals.
  - Instead of writing "tells EMACS", communicate the result.
  - "EMACS" refers to the EMACS software
  - "HELP" refers to the system configured by tangling this we.
  - Never describe something as "perfect" or "delightful". If it is part of this
    system then it is perfect and delightful.
  - Capture decisions that allow this system to move forward.

* Webs We Weave
  :PROPERTIES:
  :ID:       DB5CDB3F-DE18-48FB-B104-D3990304FA91
  :END:

** Org-Mode Exemple Complet Minimal
   :PROPERTIES:
   :noweb-ref: Org-Mode-ECM-Web
   :tangle:  "./.org-mode-ecm.emacs.el"
   :ID:       83868A6E-76C2-48AE-8A5A-6A3C97492321
   :END:

Configure EMACS to easily provide ECMs.

Sysop is likely to use this often.

Start EMACS with this command:

=open /Applications/Emacs.app --args --quick --load ~/src/help/.org-mode-ecm.emacs.el=

#+NAME: EE055B39-1C93-45AB-B9A6-2FCFD54D47A5
#+BEGIN_SRC emacs-lisp :results output silent :comments no :noweb-ref ignore-ecm
;; -*- lexical-binding: t -*-
#+END_SRC

#+NAME: 9969960B-FFEE-48B4-BD9C-F29E750FD8A3
#+BEGIN_SRC emacs-lisp :results output silent
<<Principle-of-Least-Astonishment>>
<<Org-Mode-ECM>>
#+END_SRC

** Org-Mode Fundamentals
   :PROPERTIES:
   :noweb-ref: Org-Mode-Fundamentals-Web
   :tangle:  "./.org-mode-fundamentals.emacs.el"
   :ID:       7E71A009-4DD3-4296-9851-293BC71D2DFF
   :END:

Configure Org-Mode core functionality to compile this system.

Sysop is likely to use this periodically.

Start EMACS with this command:

=open /Applications/Emacs.app --args --quick --load ~/src/help/.org-mode-fundamentals.emacs.el=

#+NAME: BFE6C470-861B-4367-9735-DAA8E7C33C0A
#+BEGIN_SRC emacs-lisp :results output silent  :comments no :noweb-ref ignore-fundamentals
;; -*- lexical-binding: t -*-
#+END_SRC

#+NAME: 78D777D3-FA69-4361-874C-7262DE96F753
#+BEGIN_SRC emacs-lisp :results output silent
<<Org-Mode-ECM-Web>>
<<Org-Mode-Helper-Functions>>
<<Org-Mode-Tangle>>
<<Org-Mode-Execute>>
<<Org-Mode-Weave>>
#+END_SRC

** The Whole Enchilada
   :PROPERTIES:
   :tangle:  "./.emacs.el"
   :ID:       016FA25F-E70E-4BED-BA01-AEB808428791
   :END:

Configure EMACS to for everything defined within this monolithic system.

Sysop is likely to use this constantly.

Start EMACS with this command:

=open /Applications/Emacs.app=

#+NAME: 3EB2F596-DAE1-4083-B2B9-DB61A15AFDEF
#+BEGIN_SRC emacs-lisp :results output silent  :comments no :noweb-ref ignore-whole
;; -*- lexical-binding: t -*-
#+END_SRC

#+NAME: AD12BE48-B87B-4AB6-814D-4FA5E47597A0
#+BEGIN_SRC emacs-lisp :results output silent
<<Org-Mode-Fundamentals-Web>>
<<Watch-What-You-Eat>>
<<Special-Operating-Procedure>>
<<Standard-Operating-Procedure>>
<<Hacking-Common-Configurations>>
<<Hacking-Literate-Programming-Emacs-Lisp>>
<<Hacking-Literate-Programming-Org-Mode>>
<<Hacking-Applied-Mathematics-ESS>>
<<Hacking-Applied-Mathematics-ESS-SAS>>
<<Hacking-Applied-Mathematics-ESS-R>>
<<Hacking-Applied-Mathematics-YASnippet>>
<<Hacking-Publishing-TeX>>
<<Hacking-Publishing-KOMA>>
<<Hacking-Publishing-Markdown>>
<<Hacking-Publishing-Wordpress>>
<<Hacking-Publishing-Beamer>>
<<Hacking-Publishing-HTML>>
<<Hacking-Diagram-Artist>>
<<Hacking-Diagram-DITAA>>
<<Hacking-Diagram-Graphviz>>
<<Hacking-Diagram-PlantUML>>
<<Quiet-and-Pleasant-Appearance>>
<<Piano-Lessons>>
#+END_SRC

** Eshell
   :PROPERTIES:
   :ID:       FAB2B8BA-ACE0-4F99-9583-C9A287CFB610
   :END:

#+NAME: 2C64B62C-606B-43B8-979C-355F92169D73
#+BEGIN_SRC sh :tangle "./eshell/alias" :comments no :eval no
alias clear recenter 0
alias d 'dired $1'
alias ff find-file $1
alias gb git branch $*
alias gpom git push origin master
alias gst git status
alias la ls -lha $*
alias ll ls -lh $*
#+END_SRC

* Literate Programming
  :PROPERTIES:
  :ID:       8510C876-F644-4804-9F87-54A0B44DBA6A
  :END:

#+MACRO: lp-configure-each-sb Configuration likely per Source-Block or System

This system enables you to perform 3 Literate Document activities
- Tangling
- Evaluating
- Weaving

Combined they provide a rich Literate Programming environment.

These activities are not performed interactively by the user. They are automatic
operations that occur as a result of the configuration by the document itself.

The following is the guide for the default configuration of this system and how
it behaves.

Key:

- Columns
  - S :: Source document modified?
  - T :: Destination tangled-document modified?
  - W :: Destination weaved-document modified?
  - C :: Source-Block Evaluation occurred?
  - O :: Org-Macro Expansion occurred?

| Activity   | S | T | W | C | O |
|------------+---+---+---+---+---|
| Tangling   | F | T | F | F | F |
| Evaluating | T | F | F | T | F |
| Weaving    | F | F | T | F | T |

They are separate and distinct operations.

"Programming" is logically an activity that is the combination of these 3
activites. It is interactively performed by Sysop. It is not a distinct
or isolated operation. Results of one activity exist here and serve as inputs to
another activity.

** Org-Mode Exemple Complet Minimal
   :PROPERTIES:
   :noweb-ref: Org-Mode-ECM
   :ID:       57C69AB7-A317-4823-ABBF-7DE8A5E2151C
   :END:

Every new EMACS releases comes with the latest stable Org-Mode release. To get
hot-fixes, cutting edge features, and easy patch creation though, you need to
use the version from Git.

These detailed and clear [[http://orgmode.org/manual/Installation.html][directions]] explain how ot run Org-Mode from Git. The only
thing worth mentioning again is that in order to use *any* version of Org-Mode
other than the one that comes OOTB you *must* load Org-Mode *before* anything else
in your initialization file. It is easy to do! When you get
unexpected Org-Mode behavior be sure to stop and investigate ~org-version~ and
decide whether or not it is what you expect and prepare an ECM if necessary.

Add the Org-Mode core distribution the load path.

#+NAME: D5D4EECF-00C5-4B2F-B9F9-988591C70852
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'load-path "~/src/org-mode/lisp")
#+END_SRC

Add the Org-Mode-Contributions distribution to the load path. The contributions
are essential.

#+NAME: 4D4E921E-7B99-43B2-AD1F-30D2593F05D7
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'load-path "~/src/org-mode/contrib/lisp")
#+END_SRC

Allow single-character alphabetical bullet lists. Set ~org-list-allow-alphabetical~
before loading Org-Mode. This configuration must occur here. *Never* remove this
from a submitted
ECM.

#+NAME: 28776245-A6BB-4294-AC72-30F03F902DF7
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-list-allow-alphabetical t)
#+END_SRC

Load Org-Mode.

#+NAME: 86CAEC4F-CFC4-4CAD-9993-E1DCEF3BFCD1
#+BEGIN_SRC emacs-lisp :results output silent
(require 'org)
#+END_SRC

** Helper Functions
   :PROPERTIES:
   :noweb-ref: Org-Mode-Helper-Functions
   :ID:       B14776FD-6835-4D1D-BCD3-50D56555423C
   :END:

Help configure Org-Mode.

#+NAME: BB2E97AF-6364-401F-8063-8B5A0BE481E6
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

(defun help/set-org-babel-default-inline-header-args (property value)
  "See `help/set-org-babel-default-header-args'; same but for inline header args."
  (setq org-babel-default-inline-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-inline-header-args))))

(defun help/set-org-babel-default-header-args:R (property value)
  "See `help/set-org-babel-default-header-args'; same but for R.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:R
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:R))))

(defun help/org-toggle-macro-markers ()
  (interactive)
  (setq org-hide-macro-markers (not org-hide-macro-markers)))

(defun help/org-prp-hdln ()
  "Visit every Headline. If it doesn't have an ID property then add one and
  assign it a UUID. Attribution: URL `http://article.gmane.org/gmane.emacs.orgmode/99738'"
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (dolist (p (nreverse
                (org-element-map (org-element-parse-buffer 'headline) 'headline
                  (lambda (headline) (org-element-property :begin headline)))))
      (goto-char p)
      (org-id-get-create))
    (save-buffer)))

(defun help/org-prp-src-blk ()
  "If it doesn't have a NAME property then add one and
   assign it a UUID. Attribution: URL `http://article.gmane.org/gmane.emacs.orgmode/99740'"
  (interactive)
  (help/org-2every-src-block
   #'(lambda (element)
       (if (not (org-element-property :name element))
           (let ((i (org-get-indentation)))
             (beginning-of-line)
             (save-excursion (insert "#+NAME: " (org-id-new) "\n"))
             (indent-to i)
             (forward-line 2))))))

(defconst help/org-special-pre "^\s*#[+]")

(defun help/org-2every-src-block (fn)
  "Visit every Source-Block and evaluate `FN'."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search t))
      (while (re-search-forward (concat help/org-special-pre "BEGIN_SRC") nil t)
        (let ((element (org-element-at-point)))
          (when (eq (org-element-type element) 'src-block)
            (funcall fn element)))))
    (save-buffer)))

(defun help/org-babel-demarcate-block ()
  "Add a NAME property then assign it a UUID."
  (interactive)
  (org-babel-demarcate-block)
  (insert "\n#+NAME: " (org-id-new)))
#+END_SRC

** Tangling
   :PROPERTIES:
   :noweb-ref: Org-Mode-Tangle
   :ID:       267EEDED-1367-405F-807C-B3C489045704
   :END:

=ID= and =NAME= are essential for successful =LP= using ~org-babel-tangle-jump-to-org~.

#+NAME: 859E61A4-D910-4731-8328-A63F6B6ACD3F
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook 'org-babel-pre-tangle-hook #'help/org-prp-hdln)
(add-hook 'org-babel-pre-tangle-hook #'help/org-prp-src-blk)
#+END_SRC

There is a way to disable property inheritance that speeds up tangling a lot.
This is only for user-defined properties; *not* Org-Mode properties.

The problem is that you lose property inheritance which is unacceptable. Never,
never allow that. Its inconsistent with how Org-Mode works.

#+NAME: F19C629B-E784-48CA-BC53-CCFB849CE9EC
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-babel-use-quick-and-dirty-noweb-expansion nil)
#+END_SRC

*** comments
    :PROPERTIES:
    :ID:       49787FC5-CAA7-466B-B742-0F38973E070B
    :END:

#+BEGIN_QUOTE
Toggle insertion of comments in tangled code files
#+END_QUOTE

Provide as much information as possible in the tangled artifact about the
origin artifact.

#+NAME: AD42B561-29FA-4652-AD28-692CAD631E62
#+BEGIN_SRC emacs-lisp :results output silent
(help/set-org-babel-default-header-args :comments "noweb")
#+END_SRC

*** mkdirp
    :PROPERTIES:
    :ID:       B0F9A321-3B69-46BB-B512-0AF3C663A4C0
    :END:

#+BEGIN_QUOTE
Toggle creation of parent directories of target files during tangling
#+END_QUOTE

#+NAME: F501D202-9F0B-4343-B257-E0DEB4483A0B
#+BEGIN_SRC emacs-lisp :results output silent
(help/set-org-babel-default-header-args :mkdirp "yes")
#+END_SRC

*** no-expand
    :PROPERTIES:
    :ID:       90170E6A-AA1A-44EA-9BF8-1A6AA38FD224
    :END:

#+BEGIN_QUOTE
Turn off variable assignment and noweb expansion during tangling
#+END_QUOTE

{{{lp-configure-each-sb}}}.

*** noweb
    :PROPERTIES:
    :ID:       E12B48AB-68E8-4515-89E3-30A16FB6FD22
    :END:

#+BEGIN_QUOTE
Toggle expansion of noweb references
#+END_QUOTE

Expand noweb references in source-blocks before:

| Activity   | Expand |
|------------+--------|
| Tangling   | T      |
| Evaluating | T      |
| Weaving    | F      |

This embraces the notion that you are telling the right thing to the
computer and the right thing to the human. By the time you get to exporting, you
ought to refer to the generated document.

#+NAME: 20BE9B4B-ED66-4935-A351-99D17B3A32D4
#+BEGIN_SRC emacs-lisp :results output silent
(help/set-org-babel-default-header-args :noweb "no-export")
#+END_SRC

*** noweb-ref
    :PROPERTIES:
    :ID:       2836D0AA-5DBA-48AC-A338-B47002DE8D7F
    :END:

#+BEGIN_QUOTE
Specify block's noweb reference resolution target
#+END_QUOTE

{{{lp-configure-each-sb}}}.

*** noweb-sep
    :PROPERTIES:
    :ID:       B1A57D15-6BBF-4E78-A0D9-0B02C283C6B0
    :END:

#+BEGIN_QUOTE
String used to separate noweb references
#+END_QUOTE

{{{lp-configure-each-sb}}}.

*** padline
    :PROPERTIES:
    :ID:       DDE727A6-DDF7-4B61-9063-549614B135F0
    :END:

#+BEGIN_QUOTE
Control insertion of padding lines in tangled code files
#+END_QUOTE

~org-babel-tangle-jump-to-org~ requires padded lines. This configuration could
arguably appear in the "Programming" heading because it impacts operation. It
lives here because it *must* occur as part of the Tangling activity so that it
can be used in the Programming activity.

#+NAME: 0F3E7114-A63C-44F4-A9FD-577BAEE536ED
#+BEGIN_SRC emacs-lisp :results output silent
(help/set-org-babel-default-header-args :padline "yes")
#+END_SRC

*** session
    :PROPERTIES:
    :ID:       8219A42A-E90F-418A-8EF0-EB150CF6D730
    :END:

#+BEGIN_QUOTE
Preserve the state of code evaluation
#+END_QUOTE

{{{lp-configure-each-sb}}}.

For some situations, this may be the same for every source block for a
particular language. R is a good example.

*** shebang
    :PROPERTIES:
    :ID:       542185DD-4FD6-459A-B422-DA7B546FB292
    :END:

#+BEGIN_QUOTE
Make tangled files executable
#+END_QUOTE

{{{lp-configure-each-sb}}}.

*** tangle
    :PROPERTIES:
    :ID:       EA716FC9-4A90-4F3E-ABD0-31FEA575C969
    :END:

#+BEGIN_QUOTE
Toggle tangling and specify file name
#+END_QUOTE

#+NAME: 5E69E152-9921-4527-A2B2-24467EEF1BE9
#+BEGIN_SRC emacs-lisp :results output silent
(help/set-org-babel-default-header-args :tangle "no")
#+END_SRC

*** tangle-mode
    :PROPERTIES:
    :ID:       5F0B7157-2DC8-4AFD-8F26-4B21025A5ECE
    :END:

#+BEGIN_QUOTE
Set permission of tangled files
#+END_QUOTE

{{{lp-configure-each-sb}}}.

** Evaluating
   :PROPERTIES:
   :noweb-ref: Org-Mode-Execute
   :ID:       ED23FF0B-1F90-435C-9B56-ACA06C1ACAE0
   :END:

Org-Mode may evaluate all of the listed languages.

#+NAME: 6309AF39-FCE4-43DE-BD46-BC7D0BA0971D
#+BEGIN_SRC emacs-lisp :results output silent
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (org . t)
   ;;
   (sass . t)
   (R . t)
   (sql . t)
   ;;
   (latex . t)
   ;;
   (sh . t)
   (makefile . t)
   ;;
   (ditaa . t)
   (dot . t)
   (plantuml . t)))
#+END_SRC

*** cache
    :PROPERTIES:
    :ID:       49B8BFE9-643B-450F-A8A1-20CE3079E215
    :END:

#+BEGIN_QUOTE
Avoid re-evaluating unchanged code blocks
#+END_QUOTE

{{{lp-configure-each-sb}}}

Default =no= is correct for nearly every scenario.

*** colnames
    :PROPERTIES:
    :ID:       4D683007-14AE-4A7D-A506-E2301FD32E82
    :END:

#+BEGIN_QUOTE
Handle column names in tables
#+END_QUOTE

{{{lp-configure-each-sb}}}

*** dir
    :PROPERTIES:
    :ID:       CD1494F1-0A2A-44D0-9955-0D0501AF1539
    :END:

#+BEGIN_QUOTE
Specify the default (possibly remote) directory for code block execution
#+END_QUOTE

{{{lp-configure-each-sb}}}

*** epilogue
    :PROPERTIES:
    :ID:       CA7F5086-9D4B-4847-9449-3231CE027804
    :END:

#+BEGIN_QUOTE
Text to append to code block body
#+END_QUOTE

See Prologue.

*** eval
    :PROPERTIES:
    :ID:       0329BACE-2C99-4BB3-A7A5-7C800EF53FAD
    :END:

#+BEGIN_QUOTE
Limit evaluation of specific code blocks
#+END_QUOTE

Never evaluate source-blocks or in-line-source-blocks *on export*.

#+NAME: 58541CA5-C633-4146-8E5D-15C7A3A2D1D7
#+BEGIN_SRC emacs-lisp :results output silent
(help/set-org-babel-default-header-args :eval "never-export")
(help/set-org-babel-default-inline-header-args :eval "never-export")
#+END_SRC

Never evaluate in-line-source-blocks *on export*.

#+NAME: D9F32A22-B415-48EA-A189-D8EAF7C202D8
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-export-babel-evaluate nil)
#+END_SRC

*** file
    :PROPERTIES:
    :ID:       80824708-62AF-4337-A517-828DA22D1FCA
    :END:

#+BEGIN_QUOTE
Specify a path for file output
#+END_QUOTE

{{{lp-configure-each-sb}}}

*** file-desc
    :PROPERTIES:
    :ID:       6F9A2745-7118-469E-9FDB-4B327C02E5FA
    :END:

#+BEGIN_QUOTE
Specify a description for file results
#+END_QUOTE

{{{lp-configure-each-sb}}}

*** file-ext
    :PROPERTIES:
    :ID:       0716A48E-9227-44FD-B1FA-185DF6545E91
    :END:

#+BEGIN_QUOTE
Specify an extension for file output
#+END_QUOTE

{{{lp-configure-each-sb}}}

*** hlines
    :PROPERTIES:
    :ID:       721F4E5E-A343-4D7C-A3A3-12A544B3A273
    :END:

#+BEGIN_QUOTE
Handle horizontal lines in tables
#+END_QUOTE

{{{lp-configure-each-sb}}}

*** output-dir
    :PROPERTIES:
    :ID:       D0DDFE88-1B41-4A67-A5F4-88B1B35A7513
    :END:

#+BEGIN_QUOTE
Specify a directory to write file output to
#+END_QUOTE

{{{lp-configure-each-sb}}}

One example is a System where *all* intermediate results are stored to individual
files.

*** post
    :PROPERTIES:
    :ID:       1A4DEC98-C735-4D88-8261-6AD13C495EF2
    :END:

#+BEGIN_QUOTE
Post processing of code block results
#+END_QUOTE

{{{lp-configure-each-sb}}}.

*** prologue
    :PROPERTIES:
    :ID:       3D1780E0-2E6D-428C-916D-BFB10E79C76F
    :END:

#+BEGIN_QUOTE
Text to prepend to code block body
#+END_QUOTE

{{{lp-configure-each-sb}}}.

For some situations, this may be the same for every source block for a
particular language. The user manual described ~gnuplot~, which often shows up on
the list and the solution is to ~reset~ the session.

Another example, say that you've got a bunch of R Source-Blocks and you want to
be able to rearrange them as you please. You want to be sure that there are no
dependencies between them on bindings created in the workspace. Set ~prologue~
to ~rm(list = ls())~.

Epilgue works hand-in-hand with this.

*** results
    :PROPERTIES:
    :ID:       2755571E-113B-436E-9EEC-26618A55A27E
    :END:

#+BEGIN_QUOTE
Specify the type of results and how they will be collected and handled
#+END_QUOTE

Ways to configure =:results:= src_emacs-lisp[results value replace]{(apply '* (-keep 'cdr '((Collection . 2) (Type . 4) (Format . 7) (Handling . 4))))} {{{results(=224=)}}}.

This system stores the results of evaluation in the source document. It believes
that the results are critical to the research.

Keep the document as close to being executable as possible; make it very visible
when it is not.

Always display results like you would seem them in a REPL. For source-blocks
this means an =output= display and for in-line-source-blocks it means a =value=
display. The former cares most the data in the context of a REPL. The latter
cares most about the data in the context of the written content referencing that
data.

Replace theme each time you evaluate the block.

#+NAME: BC84119C-6085-4B36-A2D9-0918A68D15C5
#+BEGIN_SRC emacs-lisp :results output silent
(help/set-org-babel-default-header-args :results "output replace")
(help/set-org-babel-default-inline-header-args :results "value replace")
#+END_SRC

*** rownames
    :PROPERTIES:
    :ID:       B184A507-1B03-4096-A4D8-E50A1DA047DB
    :END:

#+BEGIN_QUOTE
Handle row names in tables
#+END_QUOTE

{{{lp-configure-each-sb}}}..

*** sep
    :PROPERTIES:
    :ID:       F1336AAA-68EF-4E87-B253-458103B6FF2F
    :END:

#+BEGIN_QUOTE
Delimiter for writing tabular results outside Org
#+END_QUOTE

{{{lp-configure-each-sb}}}

*** var
    :PROPERTIES:
    :ID:       3B4D638C-82EE-47F3-835C-52B2F03620A0
    :END:

#+BEGIN_QUOTE
Pass arguments to code blocks
#+END_QUOTE

- *The* most revealing of the power of Org-Mode's LP offering
- Values-by-reference
  - Table
  - List
  - Source-Block without and with parameters
  - Literal-Block
- Idexable variable values
- Emacs Lisp evaluation of variables

*** wrap
    :PROPERTIES:
    :ID:       94D6B3BE-5DA1-499A-B5C7-A6B71710A1EA
    :END:

#+BEGIN_QUOTE
Mark source block evaluation results
#+END_QUOTE

{{{lp-configure-each-sb}}}.

** Weaving
   :PROPERTIES:
   :noweb-ref: Org-Mode-Weave
   :ID:       F71DD8BA-B853-4903-A348-400E13C0E6F8
   :END:

Help the reader make sense of the document by displaying it's internal
properties.

#+NAME: 71BFB4A2-DABD-4621-A6E0-C3CAECD34BC4
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-export-with-properties t)
#+END_SRC

Stop your flow to monitor the export for errors.

#+NAME: 49FDDABE-7999-4F51-BD93-969187A220D7
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-export-in-background nil)
#+END_SRC

Make sure that exported files are Unicode UTF-8.

#+NAME: 07E50259-E68C-465E-9387-9984220CEB69
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-export-coding-system 'utf-8)
#+END_SRC

Do not preserve line-breaks when exporting instead let the destination
format handle it as it sees fit. This doesn't work like I had expected and makes
me wonder what I am confused about here. When I export to HTML text containing
linebreaks no longer has linebreaks. This is what I expect. When I export that
same text to a buffer though, the line breaks are included. Currently I use
=sacha/unfill-paragraph= on that code.

#+NAME: 18CD863D-F01D-44F8-9B4D-A9FC016EDC79
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-export-preserve-breaks nil)
#+END_SRC

When exporting anything, do not insert the exported content into the kill ring.

#+NAME: F0703ECD-DB1D-47BF-BF1A-52336FE0C5D8
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-export-copy-to-kill-ring nil)
#+END_SRC

By default I never want a table of contents generated. It is so easy to enable
it with a property, it will be fine to turn it off.

#+NAME: 5BCA100F-6AC1-454B-9F48-31B5A67CB587
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-export-with-toc nil)
#+END_SRC

On export, maintain the literal spacing as found in the source block. Obviously
this is important for make-files. It is really important everywhere because
anything else would violate the law of least surprise.

#+NAME: 5ACDD0B0-2B6F-4F71-BFDF-2D2D1D91B573
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-src-preserve-indentation t)
#+END_SRC

Maximize flexibility for weaving operations during export.

#+NAME: A2FF8367-4A6A-444C-BB2E-F5AA494E33B5
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-export-allow-bind-keywords t)
#+END_SRC

*** exports
    :PROPERTIES:
    :ID:       57B3786B-017F-4F6E-89F9-05642304F3B6
    :END:

#+BEGIN_QUOTE
Export code and/or results
#+END_QUOTE

Always share source blocks and their results. Whether or not to generate a
result for a particular source block is configured per-block. If you don't want
to share a result for a source block then disable storage of results on that
block.

#+NAME: 72A5FF8F-6597-4523-A604-B499B439A103
#+BEGIN_SRC emacs-lisp :results output silent
(help/set-org-babel-default-header-args :exports "both")
#+END_SRC

* Piano Lessons
   :PROPERTIES:
   :noweb-ref: Piano-Lessons
   :ID:       31274432-4BA2-4B03-8DDB-E590C245244D
   :END:

** A Fine Cup of EMACS
   :PROPERTIES:
   :ID:       01EEEC32-91D4-4DDC-A100-52CE571558DC
   :END:

Every EMACS user ought to have a [[http://shop.fsf.org/product/gnu-emacs-reference-mugs/][Emacs Reference Mug]] at their desk. The mug
invites other users to ask questions. Give the mug as a gift to every user you
know who would benefit from learning EMACS. The mug reminds us all that EMACS is
the perfect configuration of EMACS. It is available on every machine. When you
break your system, you can always fall back to the good and reliable default
EMACS configuration to get your system up and running again. The OOTB
configuration of EMACS is one of the most important system configurations that
you will every find. That is why it is important never to ruin it.

This system wants to maximize accessibility for new users. It wants anyone to be
able to download and use it without surprises. It wants the mug to serve as a
fine reference for anyone to use. It wants to keep things simple and familiar so
that anyone who has learned EMACS OOTB can use it pleasantly and productively.
These goals are essential to configuring the keyboard for this system. This
system will always respect the POLA.

** A Keyboard on Every Desk
   :PROPERTIES:
   :ID:       A50A19BB-1DE7-48C1-AEE4-03D1E88E887C
   :END:

The configuration of the keyboard on an EMACS system can completely change the
experience. No keyboard makes it impossible. A Kinesis Ergo makes it feel
really good. Soft keys make it feel soft; hard keys make it feel faster. The
[[http://xahlee.info/kbd/dvorak_and_all_keyboard_layouts.html][layout of letters]] is claimed to make you "more productive" using statistics.
You may even study the statistics of your own writing and choose a layout
optimized for you. The ways to configure your keyboard are limitless because
everyone is unique. How to get the best configuration tips for your system? Do
what works for everyone.

Choose a keyboard that will satisfy 80% of EMACS users using 80% of the
keyboards out there. Make this system easy to use on any one of those keyboards.
Make this system easy to use in English. Make this system easy to use with
average hand strength using two hands. These goals are essential to configuring
the keyboard for this system.

** A Display with Every Keyboard
   :PROPERTIES:
   :ID:       7E76A660-7828-4747-90DE-84BD293CD4E7
   :END:

Every system requires an output. You have two options. The first is a terminal
that only displays characters. The second is a display that provides detailed
graphics. "Display" is the EMACS term for a GUI.

Some users prefer the former. Some users prefer the latter. Some users prefer to
use a $4000USD machine to emulate the latter. Both are good options.

This system is configured to work pleasantly for either type of output.

** A Full Pot of EMACS on Every Desk
   :PROPERTIES:
   :ID:       D8ADD840-9E9E-4A2E-B085-245C7BFA5F48
   :END:

*** Keyboard Layout & Operation
    :PROPERTIES:
    :ID:       D8420B75-E4B9-4DB1-885E-D5290FE9A3EA
    :END:

- Use QWERTY layout.
  - Everyone knows it.
  - Easy to learn.
  - Available on every keyboard.
  - Inexpensive.
  - When graduation time comes, plenty of great alternatives available like
    DVORAK and Colemak.
- Keep hands in home position as much as possible.
  - Every finger is strong in the home position so RSI reduced.
  - Single key presses are easy there.
- Table-bang the shift, caps-lock and enter keys.
  - Table-bang is a position of your hand. Make it by:
    - Starting with your hands in the home position.
    - Make a "high-five" with both of them parallel to the keyboard.
    - Turn your left hand counter-clockwise and right hand clockwise to make
      them perpendicular to the keyboard.
    - Squeeze all of your fingers together.
    - Push the keys using the side of your Pinky.
    - In this position you are using the strength of all of your fingers.
  - Never use those key using your Pinky alone.
  - Practice depends 100% on user-discipline.
- Try to achieve balance with meta keys.
  - Provide same key of each side of the keyboard.
- Be conscious of key operations [[http://ergoemacs.org/emacs/emacs_key_notation_return_vs_RET.html][on different outputs]].
  - Always provide both.
  - Note what is getting stomped on.
  - For return bind to:
    - =RET= in the terminal.
    - =<return>= in the GUI.
  - Also for tab =TAB= vs =C-i=.
  - Also for escape =ESC= vs =C-[=

*** Understanding Your Cognitive Landscape.
    :PROPERTIES:
    :ID:       60A17CE8-C905-4443-90A2-10D2C12F23AF
    :END:

You operate within a cognitive landscape. Every moment you are in a single
=place=. While residing in each =place= you perform logically related =activities=.
Activities facilitate logical actions like modification within that =place=.
Modifications are performed objects. Objects include things like the contents of
a buffer, contents of memory, or the file that backs a buffer. While performing
those =activities= there is a logical sense of "flow". That should never be
interrupted. Usually an interruption occurs when you are going to go to a new
=place=. The =distance= between =places= is measured in the similarity between the
=actions= that you find there. As you develop these ides it will be obvious where
key-bindings should go

*** Key-Bindings Take You to Places to Perform Activities
    :PROPERTIES:
    :ID:       E765C8BB-ECC3-4791-A287-83B6DED2F6C3
    :END:

OOTB you wil be visiting many =places= and performing many =activities=. EMACS comes
with a good configuration that minimizes =distance=. This isn't worth changing.
You can use EMACS for a lifetime without ever having to customize any of the
key-bindings. This is what lets anyone use your system. This is what lets you
use the system with =-Q= when you break it. You need to decide if you every want
to alter the default configuration. This system does not want to. It wants to
keep EMACS true to EMACS and your hands happy. To satisfy those goals the
following practices were defined.

- 99.999% of the time never bind to the =C= or =M= name-space.
  - They are for system key-bindings. You can break them. Don't.
  - In theory =C-c= is the "user name-space" but packages stomp on this all of the
    time anyway so don't use it.
  - Some bindings are just too valuable to pass up:
    - =C-;=
      - Your hands are in the home position already.
    - Every modifier key with return.
- Never bind to =F= keys.
  - They are a painful stretch on most keyboards.
  - Some require a lone Pinky with is worse.
  - Most operating systems bind actions to them OOTB anyway.
  - EMACS comes with key-bindings OOTB.
- Don't try to set up a Hyper-key.
- Use shift as a name-space expansion vehicle.
  - Shift doubles every name-space in which you use it.
  - Use cautiously, not every name-space vehicle supports it.
- About the =s= (super) name-space.
  - In theory it is the best place for user-defined key-bindings because
    EMACS OOTB uses =C= and =M= completely leaving =s= mostly open.
  - In practice =C= and =M= are running out of space because there are a lot of
    new packages being added to EMACS. Most new packages are binding key
    in the =s= name-space.
  - This system reserves =s= completely for Sysop.

These practices say nothing about the =places= or =activities= that you choose to
peform. The practices only look at the key-binding configuration. There are a
limited number of keys on a keyboard and there are physical limitations on your
hands. Along with the previous assuptions it may look like there are less.
Fortunately it just looks that way and it isn't true. There are a lot of
powerful ways to "go places" with EMACS. The next heading contains my attempt.

*** How to Get There Pleasantly and Quickly
    :PROPERTIES:
    :ID:       38026C1B-44D4-47EF-90D2-239876F7F31C
    :END:

You need to learn how to use EMACS. You need to develop a personal preference.
You need to develop an idea of =places= and =activities= and =distance=. The following
headings are delineated by breaks in flow.

The examples try to talk about doing those things and do it by exploring:

- "going places to do things".
- "how quickly I will get there and how long I will be there"
- "how quickly I want to go somewhere else".

They were initially described by the properties:

- Actions :: The number of related actions in that place.
- Expertise :: The level of skill and speed with which you are performing the
  activity.
- Relationship :: How closely those activities are related in the current place.
- Frequency :: How many times you perform these actions when you here.

The relationship between "doing those things" and those 4 properties is still
unclear and being explored.

**** =s=
      :PROPERTIES:
      :Actions:          High
      :Expertise:        High
      :Relationship:     High
      :Frequency:        High
      :ID:       0A491DA9-212E-4F01-8C08-EA09E9B6D82C
      :END:

- =Actions= here are for the =place= inside of the buffer itself. They are for
  immediate acting upon the contents of the buffer. They are logically
  related, used frequently, and likely to be memorized.
- When you come here, you are likely to stay for some time before getting
  out.
- Only use single key bindings; anything more may be a new logical
  name-space and may use a Hydra.
- Split the home sides of the keyboard in half.
- The left side of the keyboard should be use for operations common to
  every mode.
  - For example ~goto-line~ and ~ispell~.
  - It has 15 bindings available; 20 if you use 1-5. 40 if you shift them.
- The right side of the keyboard should be used operations specific to the
  current major mode.
  - For example in Org-Mode navigating between source-blocks and
    evaluating them.
  - It has 19 bindings available; 26 if you use 6-=. 52 if you shift them.

For example, in Org-Mode:

- I traverse the entire document very quickly with
  ~org-babel-previous-src-block~ and and ~org-babel-next-src-block.~
- I execute source-blocks.
- I edit source-blocks.

Every activity is related to reading, modifying, executing, and tangling code.

**** =Key-Chord=
     :PROPERTIES:
     :ID:       76C81A53-52BA-47C4-A8FF-651E10A4620F
     :END:

Key-Chord is intriguing because it works on every keyboard. It is powerful
because it can you bring you to any =place= easily. It is good for taking you
places in two differnt kinds of scenarios.

One example is grammar-checking. There are a few ways to do that. I don't
remember them all. In a given mode I want to see a list of all the ways.
I really just want to see all of the stuff that I value for a given mode and
don't use frequently.

Another example are things that I value for a mode and use a lot but are not
logically related to other activities in that place. For example moving the
mark around and going to lines are performed a lot so they need to be done
quickly and left. This is a place where key-chords and the shift modifier are
a fast and intuitive way to go places.

***** Single-Key Key-Chord Name-Space.
      :PROPERTIES:
      :ID:       B198918B-F8C8-4036-A41B-237BDA793EC0
      :END:
      :Actions:          High
      :Expertise:        Low
      :Frequency:        High
      :Relationship:     Low

- Nice if you don't mind hitting the same key twice.
- You will use come here often, perform your single =action=, and be done
  and leave very frequently and quickly.
- Using alphabetical characters always results in unpleasant surprises.
- Harder for breakage but it still occurs.
  - =#FF= color code.
  - =cc= carbon copy.
  - =JJ= nick-name.
  - =dd= add
- Symbols are more likely to be safer bets.
  - Only use the symbols.
    - 8 if you use rows 3-4; 16 if you shift.
    - Fifth row has 13; 26 with shift.
- Good vehicle to reach a Hydra.

***** Two-Key Key-Chord Name-Space.
      :PROPERTIES:
      :ID:       9CF95F30-5872-40F4-AF00-BDB82E3D7399
      :END:
      :Actions:          Low
      :Expertise:        High
      :Frequency:        High
      :Relationship:     Low

- Very attractive.
- Nice if you don't like hitting the same key twice.
- Easy to use all fingers.
  - Finger strength is not an issue here; use any of them.
- Unexpected breakage very easy.
  - =cd= in ~=eshell=~.
- Use sparingly.
- Not worth analyzing ideal combinations; just use it and see if it
  doesn't break.
- Bringing over existing bindings. They are all for every mode so I will
  keep it that way.

**** =Hydra=
      :PROPERTIES:
      :Actions:          High
      :Expertise:        Low
      :Frequency:        Low
      :Relationship:     High
      :ID:       0410F66C-40F4-46A1-9E69-56658EA815A9
      :END:

- Sometimes you want to do something in a =place= but you aren't sure what
  and you aren't sure where you will go next from there. For example you
  might want to perform an Org-Mode =action= that is important but you don't
  really use much. For example exporting to HTML might not be common for
  you but you value.
- =Hydras= can be used for very related actions too. The difference between
  the =s= name-space is the distance between them and where you are now.
  In the =s= namespace you go there very quickly. For =Hydras= sometimes you
  can get the fast and sometimes more slowly. They are complementary to
  every name-space.
- =SHIFT= doubles your key-space.
- Use =C-g= to exit the Hydra.

For example, in Org-Mode I am still learning about functions and haven't used
them much and forget their names. It is faster to put them in a Hydra. If they
get used a lot, I will add them to =s=.

*** Building Your Own Keyboard
    :PROPERTIES:
    :ID:       A4257881-BD92-4826-8B0F-74B9557442F9
    :END:

As your mastery of EMACS grows so too will your desire to build your own
keyboard. It is natural. As you explore various dimensions of expression you
will have a lot of fun. You will act more quickly and skillfully. Even with the
goals of this system in place the desire grows.

3D printing is one area worth exploring. A lot of EMACS users design and print
their own custom keyboards. That looks very fun. [[http://scripts.sil.org/cms/scripts/page.php?site_id%3Dnrsi&id%3Dukelele][Ukulele]] is softer way to
explore your keyboard. Reading its user manual is important. It contains ideas
about stack-able-environments for bindings. You may use Ukulele or Hydras to do
the same thing. [[https://pqrs.org/osx/karabiner/][Karabiner]] is a nice way to re-map your keys. It's easiest
adjustment is to make return act as return when pressed alone and as control
when pressed with another key. That introduces a symmetry to your keyboard which
can be helpful. All of those dimensions are worth exploring.

When I explored them I felt that they led me further away from the majority of
users. Every time explored a different key-mapping (not key-binding) it reduced
accessibility for new users. Each time I tried to work around that hiccup. The
last pursuit was =;= and space.

It would be great to set up your keyboard with the meta keys on the bottom
like this:

#+BEGIN_EXAMPLE
+---------------------------------------+
| +-----+                       +-----+ |
| |RET  |                       |  RET| |
| +-----+                       +-----+ |
| +------+                     +------+ |
| |SHIFT |                     | SHIFT| |
| +------+                     +------+ |
|        +-+ +-+ +-----+ +-+ +-+        |
|        |s| |M| |C/spc| |M| |s|        |
|        +-+ +-+ +-----+ +-+ +-+        |
|                                       |
+---------------------------------------+
#+END_EXAMPLE

Karabiner was too slow for my typing speed though. It [[https://www.reddit.com/r/emacs/comments/38qllb/karabiner_space_as_control/][happens]]. It seemed like a
minimal change to use Ukelele to:

- Make space send =C=
- Make =;= send space
- Make ='= a dead key
  - In it's dead key state make
    - =;= \rarr =;=
    - =:= \rarr =:=
    - ='= \rarr ='=
    - ="= \rarr ="=

The trouble is that it violates the POLA. Therefore, I left it alone and stuck
with a simple "Get C on both sides".

That has worked out very well. It is very easy to do on every operating system.
It holds true to the values of this system. When you develop an idea of =places= and
how often you go there the key-mapping becomes more obvious. Make it easy to get
to key-bindings that take you to familiar places. For this system it is the home
keys, =s=, and =key-chord=. Make those keys more easily accessible. =C= and =M= often
have symmetric-definitions. =s= and =SHIFT= also often have symmetric definitions in
this system (mostly through Key-Chords). Therefore those key-mappings are kept
close together

#+BEGIN_EXAMPLE
+---------------------------------------+
| +-----+                       +-----+ |
| |s    |                       |s/ret| |
| +-----+                       +-----+ |
| +------+                     +------+ |
| |SHIFT |                     | SHIFT| |
| +------+                     +------+ |
|        +-+ +-+ +-----+ +-+ +-+        |
|        |M| |C| |spc  | |C| |M|        |
|        +-+ +-+ +-----+ +-+ +-+        |
|                                       |
+---------------------------------------+
#+END_EXAMPLE

** Take a Sip
   :PROPERTIES:
   :ID:       F42A8A6B-C690-4715-90CB-2207C47C6808
   :END:

*** Left Side
    :PROPERTIES:
    :ID:       22246934-BE44-4D99-942C-A6DAB4506D65
    :END:

**** 5
     :PROPERTIES:
     :ID:       C00A4E41-0801-4696-86E6-5A1CE1EBB189
     :END:

#+NAME: E4B98196-FDFB-42B4-A52A-8CA7DC066E8E
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "s-4") #'mc/mark-next-like-this)
(global-set-key (kbd "s-3") #'mc/mark-previous-like-this)
(global-set-key (kbd "s-2") #'mc/mark-all-like-this)
(global-set-key (kbd "s-1") #'mc/edit-lines)
#+END_SRC

**** 4
     :PROPERTIES:
     :ID:       8F467832-8FC3-42B5-8978-8CF2C1454D5B
     :END:

#+NAME: 239A85C3-2CEB-4E40-975F-8B3584F7F450
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "s-w") #'imenu)
#+END_SRC

**** 3
     :PROPERTIES:
     :ID:       6DCD321F-6FDA-4983-9C7C-265D23D1AC4F
     :END:

#+NAME: E60EA15F-28A0-4E98-B62E-1F8BDE444BD8
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "s-d") #'er/expand-region)
(key-chord-define-global "df" #'avy-goto-word-1)
(key-chord-define-global "DF" #'avy-pop-mark)
#+END_SRC

#+NAME: F6C7AAB7-DF69-4EBA-8116-15DC32022D49
#+BEGIN_SRC emacs-lisp :results output silent
(defhydra help/hydra/left-side/global (:color blue
                                              :hint nil)
  "
_1_ -font  _2_ +font _3_ ellipsis _4_ UUID _5_ bfr-cdng-systm _6_ grade-level _7_ reading-ease
_q_ apropos _w_ widen _r_ rgrep _t_ obtj2o     _i_ scrollUp _I_ prevLogLine _o_ dbgOnErr _p_ query-replace _[_ ↑page _]_ ↓page
                 _j_ back-char _k_ scrollDown _K_ nextLogLine _l_ forw-char
_x_ delete-indentation"
  ("1" help/text-scale-decrease :exit nil)
  ("2" help/text-scale-increase :exit nil)
  ("3" help/insert-ellipsis)
  ("4" help/uuid)
  ("5" set-buffer-file-coding-system)
  ("6" writegood-grade-level)
  ("7" writegood-reading-ease)
  ("x" delete-indentation)
  ("q" hydra-apropos/body)
  ("w" widen)
  ("r" rgrep)
  ("t" org-babel-tangle-jump-to-org)
  ("i" scroll-down-command :exit nil)
  ("k" scroll-up-command :exit nil)
  ("I" previous-logical-line :exit nil)
  ("K" next-logical-line :exit nil)
  ("j" backward-char :exit nil)
  ("l" forward-char :exit nil)
  ("o" toggle-debug-on-error)
  ("p" anzu-query-replace)
  ("[" backward-page :exit nil)
  ("]" forward-page :exit nil))
#+END_SRC

#+NAME: EFFA5A5F-58A8-476D-A8D4-16F232231EC7
#+BEGIN_SRC emacs-lisp :results output silent
(key-chord-define-global "vv" #'help/hydra/left-side/global/body)
#+END_SRC

[[https://github.com/abo-abo/hydra/blob/master/hydra-examples.el][Attribution.]]

#+NAME: 362686F6-B397-44D5-812F-BE24670F4204
#+BEGIN_SRC emacs-lisp :results output silent
(defhydra hydra-apropos (:color blue
                                :hint nil)
  "
_a_propos        _c_ommand
_d_ocumentation  _l_ibrary
_v_ariable       _u_ser-option
^ ^          valu_e_"
  ("a" apropos)
  ("d" apropos-documentation)
  ("v" apropos-variable)
  ("c" apropos-command)
  ("l" apropos-library)
  ("u" apropos-user-option)
  ("e" apropos-value))
#+END_SRC

**** 2
     :PROPERTIES:
     :ID:       9E95D130-D1EC-445B-9028-24DFA5CCB28A
     :END:

#+NAME: 9224105B-2CDB-46F4-AF3F-312B3467C2B8
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "s-v") #'smex)
(global-set-key (kbd "C-x C-c") #'help/safb-save-buffers-kill-terminal)
(global-set-key (kbd "s-x") #'ido-find-file)
(global-set-key (kbd "s-c") #'ido-switch-buffer)
#+END_SRC

**** 1
     :PROPERTIES:
     :ID:       4CDDC2CE-646A-4D8B-B5D3-2588FBEFF650
     :END:

**** Unsorted
     :PROPERTIES:
     :ID:       AD2164B2-CB66-48AD-B367-4E0CC406B022
     :END:

VC activities.

#+NAME: A45F49E2-E330-463B-82C6-907F138E8F2A
#+BEGIN_SRC emacs-lisp :results output silent
(define-prefix-command 'help/vc-map)
(global-set-key (kbd "s-r") #'help/vc-map)
(define-key help/vc-map "e" #'help/safb-vc-ediff)
(define-key help/vc-map "d" #'help/safb-vc-diff)
(define-key help/vc-map "u" #'help/safb-vc-revert)
(global-set-key (kbd "s-f") #'help/safb-help/vc-next-action)
#+END_SRC

Go to a line.

#+NAME: B05E89FC-9FCE-48D6-8112-9BF990A8A15D
#+BEGIN_SRC emacs-lisp :results output silent
(key-chord-define-global "fg" #'help/safb-help/goto-line)
#+END_SRC

Pop the mark back.

#+NAME: F3708409-D807-4541-95AB-C6298540FD59
#+BEGIN_SRC emacs-lisp :results output silent
(key-chord-define-global "FG" #'pop-to-mark-command)
#+END_SRC

Do the /right thing/ for getting to the start of the line.

#+NAME: C9521BF3-23E7-4952-846F-322D107E3EE3
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "C-a") #'beginning-of-line-dwim)
#+END_SRC

Occur has 3 cases. I like to use it to explore the unknown.

#+NAME: 2608E62D-62B4-4B82-BFE0-E1E04C0D6914
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "M-s p") #'help/occur-dwim)
#+END_SRC

Simpler buffer movement.

#+NAME: FD9CED46-8D84-495F-A413-90DA9EA52B8A
#+BEGIN_SRC emacs-lisp :results output silent
(key-chord-define-global "fv" #'help/safb-other-window)
#+END_SRC

Toggle utility buffers ("logical F" key, so left side; "logical J" key on
right).

#+NAME: 4E784CF7-8CB1-42D0-A8EB-6FF54E7B60E9
#+BEGIN_SRC emacs-lisp :results output silent
(key-chord-define-global "f9" #'help/util-cycle)
#+END_SRC

Hide and show code blocks.

#+NAME: 374B4284-8823-4E85-A469-F3985D48EC61
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "s-b") #'hs-toggle-hiding)
#+END_SRC

***  Left & Right Side
    :PROPERTIES:
    :ID:       FA2BFDC9-5242-4547-A8A5-6DECC8ED1C1B
    :END:

Exploratory programming in EMACS.

Don't use "dn" for "describe-function" because of "and"-words.

#+NAME: 779A4232-960E-4CE1-B6EC-018FC997F0DD
#+BEGIN_SRC emacs-lisp :results output silent
(key-chord-define-global "d." #'describe-function)
(key-chord-define-global "d," #'describe-variable)
#+END_SRC

Don't use "qi"; "unique".

#+NAME: 55D2A3E6-07B1-47B0-9ADD-54C966FA252B
#+BEGIN_SRC emacs-lisp :results output silent
(key-chord-define-global "f-" #'help/comment-or-uncomment) ;
#+END_SRC

Make =ispell= accessible.

#+NAME: E167321A-E8E5-4C54-B570-241B465B2D4B
#+BEGIN_SRC emacs-lisp :results output silent
(key-chord-define-global "qp" #'ispell)
(key-chord-define-global "qo" #'ispell-word)
#+END_SRC

Use the default Langtool bindings.

#+NAME: 52E762F8-9A31-4FEC-859D-049BD658C6D9
#+BEGIN_SRC emacs-lisp :results output silent
(define-prefix-command 'help/langtool-map)
(key-chord-define-global "qk" #'help/langtool-map)
(define-key help/langtool-map "c" #'langtool-check-buffer)
(define-key help/langtool-map "C" #'langtool-correct-buffer)
(define-key help/langtool-map "j" #'langtool-goto-previous-error)
(define-key help/langtool-map "k" #'langtool-show-message-at-point)
(define-key help/langtool-map "l" #'langtool-goto-next-error)
(define-key help/langtool-map "q" #'langtool-check-done)
#+END_SRC

*** Right Side
    :PROPERTIES:
    :ID:       16040443-9099-42C1-A7FB-90C0DDC9F8EE
    :END:

Try to reserve the right side for mode-specific activities.

*** Exceptions
    :PROPERTIES:
    :ID:       EBBB727C-6110-4F7B-A2DC-45E9833EBEFE
    :END:

Return.

Do smart new line inside, indenting given the mode.

#+NAME: 0410911F-2D84-4799-8F68-1F3173E318B6
#+BEGIN_SRC emacs-lisp :results output silent
(help/not-on-gui (global-set-key (kbd "s-RET") #'help/smart-open-line))
(help/on-gui (global-set-key (kbd "s-<return>") #'help/smart-open-line))
#+END_SRC

Scroll the whole buffer by one line keeping the cursor with it.

#+NAME: 7B79E6A3-90F2-4F3F-AA40-1231D0DDA684
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
#+END_SRC

Use a nicer =eval-expression= approach.

#+NAME: FA4DDBA3-494B-4062-B43F-5D17DB239AF5
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "s-:") #'my-eval-expression)
#+END_SRC

#+NAME: 65D190DA-D23D-427D-B070-1C74053EDC4E
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "s-C-n") #'next-line)
(global-set-key (kbd "C-n") #'next-logical-line)
(global-set-key (kbd "s-C-p") #'previous-line)
(global-set-key (kbd "C-p") #'previous-logical-line)
#+END_SRC

Ansu.

#+NAME: C8A58EDC-466A-493E-8709-2A241ED10808
#+BEGIN_SRC emacs-lisp :results output silent
(global-set-key (kbd "M-%") #'anzu-query-replace)
(global-set-key (kbd "C-M-%") #'anzu-query-replace-regexp)
#+END_SRC

* Special Operating Procedure
   :PROPERTIES:
   :noweb-ref: Special-Operating-Procedure
   :ID:       97A95862-3213-4035-9FF6-E041796DAB5C
   :END:

The following code and packages are special to this configuration. They provide
critical functionality for configuring the rest of the system. They provide
ideas that make the entire system usable, productive, expressive, and fast.

** Display
   :PROPERTIES:
   :ID:       1290DB2D-D05E-4DDD-B42F-6B11AE91F480
   :END:

Make it easy to conditionally evaluate code when running with a graphical
display.

#+NAME: 20CC11BB-D72C-4A86-8558-44D9AE44FEAF
#+BEGIN_SRC emacs-lisp :results output silent
(defmacro help/on-gui (statement &rest statements)
  "Evaluate the enclosed body only when run on GUI."
  `(when (display-graphic-p)
     ,statement
     ,@statements))

(defmacro help/not-on-gui (statement &rest statements)
  "Evaluate the enclosed body only when run on GUI."
  `(when (not (display-graphic-p))
     ,statement
     ,@statements))

#+END_SRC

** Hydra
   :PROPERTIES:
   :ID:       9B78FBB7-6C6A-4BD6-A9CC-FB192D37F6C2
   :END:

#+NAME: 2652BC97-28FA-41DC-9E0F-4B107292D78D
#+BEGIN_SRC emacs-lisp :results output silent
(use-package hydra
  :ensure t)
#+END_SRC

** Keyboard
   :PROPERTIES:
   :ID:       8A0E58DF-7C90-4781-AC12-94D2D76F47C7
   :END:

Key-Chord mode is amazing. Piano-Lessons shows you how.

#+NAME: 06C30DE0-5B5D-4021-B82E-C30CF1DBE923
#+BEGIN_SRC emacs-lisp :results output silent
(use-package key-chord
  :ensure t
  :config
  (key-chord-mode t))
#+END_SRC

Echo keystrokes immediately.

#+NAME: 3EF213A9-048C-4A3D-B242-3A4D699D087C
#+BEGIN_SRC emacs-lisp :results output silent
(setq echo-keystrokes 0.02)
#+END_SRC

** Libraries
   :PROPERTIES:
   :ID:       21919848-B720-4D30-880E-485C41250279
   :END:

Dash is nice to use.

#+NAME: 6205B309-A576-4272-9D2B-C65966ECA286
#+BEGIN_SRC emacs-lisp :results output silent
(use-package dash
  :ensure t
  :config
  (dash-enable-font-lock))
(use-package dash-functional
  :ensure t)
#+END_SRC

F is nice to use.

#+NAME: D483F480-4716-4F79-BD0A-C99691618DC5
#+BEGIN_SRC emacs-lisp :results output silent
(use-package f
  :ensure t)
#+END_SRC

S is nice to use.

#+NAME: FA4C219D-DCAB-4416-954D-231D3F89FB36
#+BEGIN_SRC emacs-lisp :results output silent
(use-package s
  :ensure t)
#+END_SRC

** Modeline
   :PROPERTIES:
   :ID:       798F14D1-EDC6-4306-8E82-0854980AEFBA
   :END:

Reduce information about modes in the Modeline.

#+NAME: 1F5BD72D-2E4B-4298-B4BF-DD52BD26FC3E
#+BEGIN_SRC emacs-lisp :results output silent
(use-package diminish)
#+END_SRC

Show the file size.

#+NAME: 4E0CC8F8-620E-41F4-AB7E-B68A82430FE0
#+BEGIN_SRC emacs-lisp :results output silent
(size-indication-mode)
#+END_SRC

Show the column number.

#+NAME: 551CCCA8-8B54-4B5C-9118-22F411C687E0
#+BEGIN_SRC emacs-lisp :results output silent
(column-number-mode t)
#+END_SRC

** OSX
   :PROPERTIES:
   :ID:       6556EACF-2F83-4B84-8456-5BEB981D290E
   :END:

Make it easy to evaluate code only when running on OSX.

#+NAME: 84EB04EB-9149-495E-AF38-942C3732D62D
#+BEGIN_SRC emacs-lisp :results output silent
(defmacro help/on-osx (statement &rest statements)
  "Evaluate the enclosed body only when run on OSX."
  `(when (eq system-type 'darwin)
     ,statement
     ,@statements))
#+END_SRC

Pull in the =ENVIRONMENT= variables because the GUI version of EMACS does not.

#+NAME: EA03614E-3B8C-4D07-A8E5-B03FFB120AE4
#+BEGIN_SRC emacs-lisp :results output silent
(help/on-osx
 (use-package exec-path-from-shell
   :ensure t
   :config
   (exec-path-from-shell-initialize)))
#+END_SRC

Configure the meta keys.

Enable the =super= key-space.

#+NAME: 98237FE5-5D02-4DCF-BCCB-082F90AE38D8
#+BEGIN_SRC emacs-lisp :results output silent
(help/on-osx
 (setq mac-control-modifier 'control)
 (setq mac-command-modifier 'meta)
 (setq mac-option-modifier 'super))
#+END_SRC

EMACS dialogues don't work OSX. They lock up EMACS.

This is a known issue. [[https://superuser.com/questions/125569/how-to-fix-emacs-popup-dialogs-on-mac-os-x][Here]] is the solution.

#+NAME: 8764885C-9AFD-49DD-9E4B-F21AA0ED0D2F
#+BEGIN_SRC emacs-lisp :results output silent
(help/on-osx
 (defun help/yes-or-no-p (orig-fun &rest args)
   "Prevent yes-or-no-p from activating a dialog."
   (let ((use-dialog-box nil))
     (apply orig-fun args)))
 (advice-add #'yes-or-no-p :around #'help/yes-or-no-p)
 (advice-add #'y-or-n-p :around #'help/yes-or-no-p))
#+END_SRC

** Windows
   :PROPERTIES:
   :ID:       B21664CF-62AF-4ACC-A239-FE20672FF9E4
   :END:

Make it easy to evaluate code only when running on Windows.

#+NAME: DB9672CE-E027-408F-B072-6E73FDD47349
#+BEGIN_SRC emacs-lisp :results output silent
(defmacro help/on-windows (statement &rest statements)
  "Evaluate the enclosed body only when run on Microsoft Windows."
  `(when (eq system-type 'windows-nt)
     ,statement
     ,@statements))
#+END_SRC

Provide the proper shell.

#+NAME: A69B960E-400A-4BC7-961C-AECF3522C7AF
#+BEGIN_SRC emacs-lisp :results output silent
(help/on-windows
 (setq shell-file-name "cmdproxy.exe"))
#+END_SRC

Enable the =super= key-space.

#+NAME: B66E53C2-D90F-422E-BD67-250EB644C6BB
#+BEGIN_SRC emacs-lisp :results output silent
(help/on-windows
 (defvar w32-lwindow-modifier 'super)
 (defvar w32-rwindow-modifier 'super))
#+END_SRC

* Standard Operating Procedure
   :PROPERTIES:
   :noweb-ref: Standard-Operating-Procedure
   :ID:       8302B38B-67EC-4C37-9B42-69E278FF1277
   :END:

Configure EMACS to maximum utility.

** Helper Functions
   :PROPERTIES:
   :ID:       B2257535-9891-48F1-B7CD-1B385F527C59
   :END:

#+NAME: D523CBF8-67C4-4C96-9298-A4A49FE54E61
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/comment-or-uncomment ()
  "Comment or uncomment the current line or selection."
  (interactive)
  (cond ((not mark-active) (comment-or-uncomment-region (line-beginning-position)
                                                      (line-end-position)))
        ((< (point) (mark)) (comment-or-uncomment-region (point) (mark)))
        (t (comment-or-uncomment-region (mark) (point)))))

(defun help/save-all-file-buffers ()
  "Saves every buffer associated with a file."
  (interactive)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (and (buffer-file-name) (buffer-modified-p))
        (save-buffer)))))

(defun describe-thing-in-popup ()
  "Attribution: URL `http://blog.jenkster.com/2013/12/popup-help-in-emacs-lisp.html'."
  (interactive)
  (let* ((thing (symbol-at-point))
         (help-xref-following t)
         (description (with-temp-buffer
                        (help-mode)
                        (help-xref-interned thing)
                        (buffer-string))))
    (popup-tip description
               :point (point)
               :around t
               :height 30
               :scroll-bar t
               :margin t)))

(defun help/kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc #'kill-buffer (delq (current-buffer) (buffer-list))))

(defvar help/delete-trailing-whitespace-p t
  "Should trailing whitespace be removed?")

(defun help/delete-trailing-whitespace ()
  "Delete trailing whitespace for everything but the current line.

If `help/delete-trailing-whitespace-p' is non-nil, then delete the whitespace.
This is useful for fringe cases where trailing whitespace is important."
  (interactive)
  (when help/delete-trailing-whitespace-p
    (let ((first-part-start (point-min))
          (first-part-end (point-at-bol))
          (second-part-start (point-at-eol))
          (second-part-end (point-max)))
      (delete-trailing-whitespace first-part-start first-part-end)
      (delete-trailing-whitespace second-part-start second-part-end))))

(defun help/insert-timestamp ()
  "Produces and inserts a full ISO 8601 format timestamp."
  (interactive)
  (insert (format-time-string "%Y-%m-%dT%T%z")))

(defun help/insert-timestamp* ()
  "Produces and inserts a near-full ISO 8601 format timestamp."
  (interactive)
  (insert (format-time-string "%Y-%m-%dT%T")))

(defun help/insert-datestamp ()
  "Produces and inserts a partial ISO 8601 format timestamp."
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

(defun help/indent-curly-block (&rest _ignored)
  "Open a new brace or bracket expression, with relevant newlines and indent. URL: `https://github.com/Fuco1/smartparens/issues/80'"
  (interactive)
  (newline)
  (indent-according-to-mode)
  (forward-line -1)
  (indent-according-to-mode))

(defun beginning-of-line-dwim ()
  "Toggles between moving point to the first non-whitespace character, and
    the start of the line. Src: http://www.wilfred.me.uk/"
  (interactive)
  (let ((start-position (point)))
    ;; see if going to the beginning of the line changes our position
    (move-beginning-of-line nil)

    (when (= (point) start-position)
      ;; we're already at the beginning of the line, so go to the
      ;; first non-whitespace character
      (back-to-indentation))))

(defun help/lazy-new-open-line ()
  "Insert a new line without breaking the current line."
  (interactive)
  (beginning-of-line)
  (forward-line 1)
  (newline)
  (forward-line -1))

(defun help/smart-open-line ()
  "Insert a new line, indent it, and move the cursor there.

This behavior is different then the typical function bound to return
which may be `open-line' or `newline-and-indent'. When you call with
the cursor between ^ and $, the contents of the line to the right of
it will be moved to the newly inserted line. This function will not
do that. The current line is left alone, a new line is inserted, indented,
and the cursor is moved there.

Attribution: URL `http://emacsredux.com/blog/2013/03/26/smarter-open-line/'"
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun help/insert-ellipsis ()
  "Insert an ellipsis into the current buffer."
  (interactive)
  (insert "…"))

(defun help/insert-noticeable-snip-comment-line ()
  "Insert a noticeable snip comment line (NSCL)."
  (interactive)
  (if (not (bolp))
      (message "I may only insert a NSCL at the beginning of a line.")
    (let ((ncl (make-string 70 ?✂)))
      (newline)
      (forward-line -1)
      (insert ncl)
      (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))

(progn

  (defvar my-read-expression-map
    (let ((map (make-sparse-keymap)))
      (set-keymap-parent map read-expression-map)
      (define-key map [(control ?g)] #'minibuffer-keyboard-quit)
      (define-key map [up]   nil)
      (define-key map [down] nil)
      map))

  (defun my-read--expression (prompt &optional initial-contents)
    (let ((minibuffer-completing-symbol t))
      (minibuffer-with-setup-hook
          (lambda ()
            (emacs-lisp-mode)
            (use-local-map my-read-expression-map)
            (setq font-lock-mode t)
            (funcall font-lock-function 1))
        (read-from-minibuffer prompt initial-contents
                              my-read-expression-map nil
                              'read-expression-history))))

  (defun my-eval-expression (expression &optional arg)
    "Attribution: URL `https://lists.gnu.org/archive/html/help-gnu-emacs/2014-07/msg00135.html'."
    (interactive (list (read (my-read--expression ""))
                       current-prefix-arg))
    (if arg
        (insert (pp-to-string (eval expression lexical-binding)))
      (pp-display-expression (eval expression lexical-binding)
                             "*Pp Eval Output*"))))

(defun help/util-ielm ()
  "HELP buffer setup for ielm.

Creates enough space for one other permanent buffer beneath it."
  (interactive)
  (split-window-below -20)
  (help/safb-other-window)
  (ielm)
  (set-window-dedicated-p (selected-window) t))

(defun help/util-eshell ()
  "HELP buffer setup for eshell.

Depends upon `help/util-ielm' being run first."
  (interactive)
  (split-window-below -10)
  (help/safb-other-window)
  (eshell)
  (set-window-dedicated-p (selected-window) t))

(defvar help/util-state nil "Track whether the util buffers are displayed or not.")

(defun help/util-state-toggle ()
  "Toggle the util state."
  (interactive)
  (setq help/util-state (not help/util-state)))

(defun help/util-start ()
  "Perhaps utility buffers."
  (interactive)
  (help/util-ielm)
  (help/util-eshell)
  (help/util-state-toggle))

(defun help/util-stop ()
  "Remove personal utility buffers."
  (interactive)
  (if (get-buffer "*ielm*") (kill-buffer "*ielm*"))
  (if (get-buffer "*eshell*") (kill-buffer "*eshell*"))
  (help/util-state-toggle))

(defun help/ielm-auto-complete ()
  "Enables `auto-complete' support in \\[ielm].

Attribution: URL `http://www.masteringemacs.org/articles/2010/11/29/evaluating-elisp-emacs/'"
  (setq ac-sources '(ac-source-functions
                     ac-source-variables
                     ac-source-features
                     ac-source-symbols
                     ac-source-words-in-same-mode-buffers))
  (add-to-list 'ac-modes #'inferior-emacs-lisp-mode)
  (auto-complete-mode 1))

(defun help/uuid ()
  "Insert a UUID."
  (interactive)
  (insert (org-id-new)))

(defun endless/sharp ()
  "Insert #' unless in a string or comment.

SRC: URL `http://endlessparentheses.com/get-in-the-habit-of-using-sharp-quote.html?source=rss'"
  (interactive)
  (call-interactively #'self-insert-command)
  (let ((ppss (syntax-ppss)))
    (unless (or (elt ppss 3)
                (elt ppss 4))
      (insert "'"))))

(defun help/chs ()
  "Insert opening \"cut here start\" snippet."
  (interactive)
  (insert "--8<---------------cut here---------------start------------->8---"))

(defun help/che ()
  "Insert closing \"cut here end\" snippet."
  (interactive)
  (insert "--8<---------------cut here---------------end--------------->8---"))

(defmacro help/measure-time (&rest body)
  "Measure the time it takes to evaluate BODY.

Attribution Nikolaj Schumacher: URL `https://lists.gnu.org/archive/html/help-gnu-emacs/2008-06/msg00087.html'"
  `(let ((time (current-time)))
     ,@body
     (message "%.06f" (float-time (time-since time)))))

(defun help/create-non-existent-directory ()
  "Attribution URL: `https://iqbalansari.github.io/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/'"
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Directory `%s' does not exist. Create it?" parent-directory)))
      (make-directory parent-directory t))))

(defun help/occur-dwim ()
  "Call `occur' with a mostly sane default.

Attribution Oleh Krehel (abo-abo): URL `http://oremacs.com/2015/01/26/occur-dwim/'"
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (let ((sym (thing-at-point 'symbol)))
            (when (stringp sym)
              (regexp-quote sym))))
        regexp-history)
  (call-interactively 'occur))

(defun help/util-cycle ()
  "Display or hide the utility buffers."
  (interactive)
  (if help/util-state
      (help/util-stop)
    (help/util-start)))

(defun sacha/unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text.

ATTRIBUTION: SRC https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org#unfill-paragraph"
  (interactive (progn
                 (barf-if-buffer-read-only)
                 (list t)))
  (let ((fill-column (point-max)))
    (fill-paragraph nil region)))
(defun help/text-scale-increase ()
  "Increase font size"
  (interactive)
  (help/on-gui
   (setq help/font-size (+ help/font-size 1))
   (help/update-font))
  (help/not-on-gui
   (message "Please resize the terminal emulator font.")))
(defun help/text-scale-decrease ()
  "Reduce font size."
  (interactive)
  (help/on-gui
   (when (> help/font-size 1)
     (setq help/font-size (- help/font-size 1))
     (help/update-font)))
  (help/not-on-gui
   (message "Please resize the terminal emulator font.")))

(defun help/org-export-subtree-gfm (id file)
  "Export the subtree with ID to FILE in gfm."
  (interactive)
  (help/save-all-file-buffers)
  (save-excursion
    (let ((hidx (org-find-property "ID" id)))
      (when hidx
        (goto-char hidx)
        (org-export-to-file 'gfm file nil t nil)))))

(defun help/org-export-readme ()
  (interactive)
  (help/org-export-subtree-gfm
   "39A2F05A-BC60-4879-9B66-85E43297FC97"
   "README.md"))

(defun help/org-export-style-guide ()
  (interactive)
  (help/org-export-subtree-gfm
   "03E0F0E3-DB81-4033-8F04-5D8BB5CBB2F0"
   "STYLEGUIDE.md"))

(defun help/xprt-all ()
  "Export this entire document in configured weavers."
  (interactive)
  (org-ascii-export-to-ascii)
  (org-html-export-to-html)
  (org-gfm-export-to-markdown)
  (org-latex-export-to-pdf)
  (help/org-export-readme)
  (help/org-export-style-guide))
#+END_SRC

** Buffer
   :PROPERTIES:
   :ID:       F3C9BDE1-C0E0-4BDF-B121-3CE2F0D16464
   :END:

Maintain buffers across sessions. Desktop-Save-Mode persists very part of the
buffer. If you upgrade a package that uses buffer-variables that have changed
you may get unexpected behavior. Close all buffers and open them again after
making such breaking changes.

#+NAME: 0E6156C3-4259-4539-BDAC-899B0AF4E80F
#+BEGIN_SRC emacs-lisp :results output silent
(desktop-save-mode t)
(setq desktop-restore-eager 10)
#+END_SRC

Provide expected "Undo" functionality.

#+NAME: 170E0633-2AA6-47AD-9234-4C1F0978C058
#+BEGIN_SRC emacs-lisp :results output silent
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode 1)
  :diminish undo-tree-mode)
#+END_SRC

Ensure that buffers do not end with a new line. This is the decision of Sysop.
This is important to YASnippets and Source-Blocks. Doing so would violate POLA.

#+NAME: 7CA01CFF-D9B6-4F1D-B120-88AFC30F281E
#+BEGIN_SRC emacs-lisp :results output silent
(setq require-final-newline nil)
#+END_SRC

If you are on the end of a line, and go up or down, then go to the end of
line on that new line. Do not account for anything special about the character
there.

#+NAME: C2215D90-ADDA-47C9-9F1E-21FD79BDDBC0
#+BEGIN_SRC emacs-lisp :results output silent
(setq track-eol t)
(setq line-move-visual nil)
#+END_SRC

Take the cursor with scroll activities.

#+NAME: CDBC5A4D-F67C-412C-A1DE-69EB52287E2C
#+BEGIN_SRC emacs-lisp :results output silent
(setq scroll-preserve-screen-position t)
#+END_SRC

More easily visualize tabular data. Considered to non-subjective.

#+NAME: 4B565992-E3BA-4355-AD8F-061E6A1736D9
#+BEGIN_SRC emacs-lisp :results output silent
(use-package stripe-buffer
  :ensure t)
#+END_SRC

End sentences with a single space.

#+NAME: C82EDEC4-3E13-4B4A-A947-B8ACDB5C8160
#+BEGIN_SRC emacs-lisp :results output silent
(setq sentence-end-double-space nil)
#+END_SRC

Ban white-space at end of lines, globally.

#+NAME: B80399BE-3E19-441E-93CF-C613A1309C35
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook 'before-save-hook #'help/delete-trailing-whitespace)
#+END_SRC

Intelligently select the current char, then word, then object, then block,
then document.

#+NAME: DA9A04CF-ABF9-4BF4-A9FF-85E89DA740E1
#+BEGIN_SRC emacs-lisp :results output silent
(use-package expand-region
  :ensure t)
#+END_SRC

80 characters is wide enough for most documents.

#+NAME: 9DB523BC-E21B-42B7-AEE2-31ED24C14D92
#+BEGIN_SRC emacs-lisp :results output silent
(setq help/column-width 80)
#+END_SRC

Visualize the formfeed character.

#+NAME: A1A8FE84-0A12-4C5F-9565-F4EACE3DB694
#+BEGIN_SRC emacs-lisp :results output silent
(use-package page-break-lines
  :ensure t)
#+END_SRC

** Code Folding
   :PROPERTIES:
   :ID:       3F70676D-C141-4093-9E40-F42B6C7B7232
   :END:

#+NAME: 2D731158-FCE7-4BDA-AE78-383EAAD1FE4B
#+BEGIN_SRC emacs-lisp :results output silent
(use-package hideshow
  :config
  (setq hs-hide-comments-when-hiding-all t)
  (setq hs-isearch-open t)
  (defun display-code-line-counts (ov)
    "Displaying overlay content in echo area or tooltip"
    (when (eq 'code (overlay-get ov 'hs))
      (overlay-put ov 'help-echo
                   (buffer-substring (overlay-start ov)
                                     (overlay-end ov)))))
  (setq hs-set-up-overlay #'display-code-line-counts)
  (defun help/goto-line ()
    "How do I get it to expand upon a goto-line? hideshow-expand affected block
    when using goto-line in a collapsed buffer."
    (call-interactively #'goto-line)
    (save-excursion
      (hs-show-block)))
  :diminish hs-minor-mode)
#+END_SRC

** Colors
   :PROPERTIES:
   :ID:       7FA1B7C2-3C4B-4119-B9B7-4C0CC0EAA180
   :END:

Colorize color names.

Rainbow-Mode handles most major modes color definitions as expected.

#+NAME: 5CDF03F0-974F-4AFC-9F63-EA9B5D7C6923
#+BEGIN_SRC emacs-lisp :results output silent
(use-package rainbow-mode
  :ensure t
  :config
  :diminish rainbow-mode)
#+END_SRC

** Evaluation
   :PROPERTIES:
   :ID:       5E067457-9B99-459F-A660-323774C14BF5
   :END:

#+NAME: 96387299-8865-4DF8-8B98-8EF290A319B8
#+BEGIN_SRC emacs-lisp :results output silent
(setq-default eval-expression-print-level nil)
#+END_SRC

Allow most commands.

#+NAME: F082B76A-8371-43DE-8FF5-2D95F3FD687A
#+BEGIN_SRC emacs-lisp :results output silent
(put #'upcase-region 'disabled nil)
(put #'downcase-region 'disabled nil)
(put #'narrow-to-region 'disabled nil)
#+END_SRC

** Encryption
   :PROPERTIES:
   :ID:       9A41F9EE-36D5-452A-986B-70B567255D36
   :END:

Easy to use file-based AES encryption.

#+NAME: A7C4590E-53C4-4159-B627-178E367B0A12
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'load-path (getenv "CCRYPT"))
(use-package ps-ccrypt)
#+END_SRC

** Eshell
   :PROPERTIES:
   :ID:       B371A592-1251-4D88-A055-43CA3E33BC6D
   :END:

Provide a cross-platform command line shell that is a first-class EMACS citizen.

Commands input in eshell are delegated in order to an alias, a built in command,
an Elisp function with the same name, and finally to a system call. Semicolons
separate commands. =which= tells you what implementation will satisfy the call
that you are going to make. The flag =eshell-prefer-lisp-functions= does what it
says. =$$= is the result of the last command. Aliases live in
=eshell-aliases-file=. History is maintained and expandable. =eshell-source-file=
will run scripts. Since Eshell is not a terminal emulator, you need to configure
it for any commands that need to run using a terminal emulator by adding it to
to =eshell-visual-commands=.

#+NAME: A9A01E59-A084-4849-93F3-957753D65D24
#+BEGIN_SRC emacs-lisp :results output silent
(setq eshell-prefer-lisp-functions nil
      eshell-cmpl-cycle-completions nil
      eshell-save-history-on-exit t
      eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")

(eval-after-load "esh-opt"
  '(progn
     (use-package em-cmpl)
     (use-package em-prompt)
     (use-package em-term)
     (setenv "PAGER" "cat")
     (add-hook 'eshell-mode-hook
               (lambda ()
                 (message "Welcome to Eshell.")
                 (setq pcomplete-cycle-completions nil)))
     (add-to-list 'eshell-visual-commands "ssh")
     (add-to-list 'eshell-visual-commands "tail")
     (add-to-list 'eshell-command-completions-alist
                  '("tar" "\\(\\.tar|\\.tgz\\|\\.tar\\.gz\\)\\'"))))
#+END_SRC

Configure a =PS1= like prompt.

#+NAME: 6D58C096-C7DE-44D2-AA33-0602237F46C5
#+BEGIN_SRC emacs-lisp :results output silent
(setq eshell-prompt-regexp "^.+@.+:.+> ")
(setq eshell-prompt-function
      (lambda ()
        (concat
         (user-login-name)
         "@"
         (system-name)
         ":"
         (eshell/pwd)
         "> ")))
#+END_SRC

** File Based System
   :PROPERTIES:
   :ID:       E6F121F0-AC8E-45C7-9F11-0E7AB93E4B71
   :END:

This system uses artifacts stored in files. It tries to persist file-stores
every chance it gets without interrupting the user's flow. Flow is important.

Don't create backup files. Instead Git for versioning

Automatically back file-stores if no activity has occurred.

#+NAME: 423B343F-CA48-4C7C-A0A5-45D533FFD8D6
#+BEGIN_SRC emacs-lisp :results output silent
(setq auto-save-default t)
(setq make-backup-files nil)
(setq auto-save-visited-file-name t)
(setq auto-save-interval 0)
(setq auto-save-timeout (* 60 5))
#+END_SRC

Backup file-stores when the frame loses focus.

#+NAME: 84B0605F-AA20-4CBB-8D14-5B55CF8D097D
#+BEGIN_SRC emacs-lisp :results output silent
(add-hook 'focus-out-hook #'help/save-all-file-buffers)
#+END_SRC

Always keep buffers in-sync with changes in-file.

#+NAME: B04C1388-6C2A-45D9-BFA6-7E21861FB9E3
#+BEGIN_SRC emacs-lisp :results output silent
(global-auto-revert-mode 1)
#+END_SRC

Save all file befores before common activities. Functions are easier to
use than advice.

#+NAME: 5A0C3F05-0C41-4E50-944E-0ACC4C2F4A15
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/safb-help/vc-next-action ()
  (interactive)
  (help/save-all-file-buffers)
  (help/vc-next-action))

(defun help/safb-vc-ediff ()
  (interactive)
  (help/save-all-file-buffers)
  (vc-ediff nil))

(defun help/safb-vc-diff ()
  (interactive)
  (help/save-all-file-buffers)
  (vc-diff nil))

(defun help/safb-vc-revert ()
  (interactive)
  (help/save-all-file-buffers)
  (vc-revert))

(defun help/safb-help/magit-status ()
  (interactive)
  (help/save-all-file-buffers)
  (help/magit-status))

(defun help/safb-org-babel-tangle ()
  (interactive)
  (help/save-all-file-buffers)
  (let ((start (current-time)))
    (message (concat "org-babel-tangle BEFORE: <"
                     (format-time-string "%Y-%m-%dT%T%z")
                     ">"))
    (org-babel-tangle)
    (let* ((dur (float-time (time-since start)))
           (msg (format "Tangling complete after: %.06f seconds" dur)))
      (message (concat "org-babel-tangle AFTER: <"
                       (format-time-string "%Y-%m-%dT%T%z")
                       ">"))
      (message msg)
      (help/on-gui (alert msg :title "org-mode")))))

(defun help/safb-other-window ()
  (interactive)
  (help/save-all-file-buffers)
  (other-window 1))

(defun help/safb-org-edit-src-code ()
  (interactive)
  (help/save-all-file-buffers)
  (org-edit-src-code))

(defun help/safb-org-export-dispatch ()
  (interactive)
  (help/save-all-file-buffers)
  (org-export-dispatch))

(defun help/safb-TeX-command-master (&optional arg)
  (interactive)
  (help/save-all-file-buffers)
  (TeX-command-master arg))

(defun help/safb-org-babel-execute-buffer ()
  "Immediately save results."
  (interactive)
  (help/save-all-file-buffers)
  (org-babel-execute-buffer)
  (help/save-all-file-buffers))

(defun help/safb-org-babel-execute-subtree ()
  "Immediately save results."
  (interactive)
  (help/save-all-file-buffers)
  (org-babel-execute-subtree)
  (help/save-all-file-buffers))

(defun help/safb-help/org-babel-demarcate-block ()
  (interactive)
  (help/org-babel-demarcate-block)
  (help/save-all-file-buffers))

(defun help/safb-save-buffers-kill-terminal ()
  "Partially redundant; kept for consistency among `SAFB' functions."
  (interactive)
  (help/save-all-file-buffers)
  (save-buffers-kill-terminal))

(defun help/safb-help/goto-line ()
  (interactive)
  (help/save-all-file-buffers)
  (help/goto-line))
#+END_SRC

Selection:

- Don't perform on frequent keys like enter and line navigation.

Future candidates:

- avy jump
- dired
- eshell
- ess-rdired
- eval-defun
- eval-region
- help/newline
- goto-line
- ido-switch-buffer
- ielm
- ispell
- ispell-word
- langtool-check-buffer
- newline-and-indent
- next-line
- org-edit-src-exit
- org-return
- pop-to-mark-command
- previous-line
- sp-newline
- with-current-buffer
- writegood-mode

Try to visit a non-existent file and get prompted to create its parent
directories.

#+NAME: DA537B02-6E64-42FC-BE9D-E5A3408B6599
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'find-file-not-found-functions #'help/create-non-existent-directory)
#+END_SRC

Be aware of files larger than 2MiB. Turn off Aggressive-Indent and other
expensive features in those buffers. NXML also seems to have a difficult time
with large files.

#+NAME: E99CAE8F-970F-4584-9B28-9C77D5B79356
#+BEGIN_SRC emacs-lisp :results output silent
(setq large-file-warning-threshold (* 1024 1024 2))
#+END_SRC

** File-system/directory management (Console)
   :PROPERTIES:
   :ID:       067D598E-7FE6-4BC5-AEF7-872966390970
   :END:

You can use the usual machinery to work with the files. Highlight a region
and operation selections occur for all files in that region. Commands are
scheduled, and then executed, upon your command. Files can be viewed in modify
or read-only mode, too. There is an idea of =mark= in files, which is to select
them and perform operations on the marked files. There are helper methods for
most things you can think if like directories or modified-files or whatever,
meaning you can use regexen to mark whatever you like however you like. If that
suits you, then don't be afraid of using the regular expression builder
that is built into EMACS. Bulk marked file operations include additionally
copying, deleting, creating hard links to, renaming, modifying the mode,
owner, and group information, changing the time-stamp, listing the marked
files, compressing them, decrypting, verifying and signing, loading or byte
compiling them (Lisp files).

=g= updates the current buffer; =s= orders the listing by alpha or date-time.

=find-name-dired= beings the results back into Dired, which is nifty.

Wdired lets you modify files directly via the UI, which is interesting. Image-Dired
lets you do just that.

=+= creates a new directory. =dired-copy-filename-as-kill= stores the list of
files you have selected in the kill ring. =dired-compare-directories= lets you
perform all sorts of directory comparisons, a handy tool that you need once in
a while but definitely do need.
#+NAME: 26EA1235-E9EC-4DC0-9F7D-B3D14E1A27B7
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/dired-copy-filename ()
  "Push the path and filename of the file under the point to the kill ring.
  Attribution: URL `https://lists.gnu.org/archive/html/help-gnu-emacs/2002-10/msg00556.html'"
  (interactive)
  (message "Added %s to kill ring" (kill-new (dired-get-filename))))
(defun help/dired-copy-path ()
  "Push the path of the directory under the point to the kill ring."
  (interactive)
  (message "Added %s to kill ring" (kill-new default-directory)))
(setq dired-listing-switches "-alh")
(setq dired-recursive-deletes 'top)
(use-package dired-details+
  :ensure t)
(setq-default dired-details-hidden-string "")
(defun help/dired-mode-hook-fn ()
  "HELP dired customizations."
  (local-set-key "c" #'help/dired-copy-filename)
  (local-set-key "]" #'help/dired-copy-path)
  (diff-hl-dired-mode)
  (load "dired-x")
  (turn-on-stripe-buffer-mode)
  (stripe-listify-buffer))
(add-hook 'dired-mode-hook #'help/dired-mode-hook-fn)
#+END_SRC

Try to guess the target directory for operations.
#+NAME: 720D3D44-21F6-4AA0-82B7-C23EE86783C9
#+BEGIN_SRC emacs-lisp :results output silent
(setq dired-dwim-target t)
#+END_SRC

Use EMACS =ls=.
#+NAME: 8E592C34-93F5-47DC-A072-ACB8C96D3753
#+BEGIN_SRC emacs-lisp :results output silent
(help/on-osx
 (setq ls-lisp-use-insert-directory-program nil)
 (use-package ls-lisp))
#+END_SRC

After dabbling, something happened that really changed my mind. These three
articles changed everything: [[http://www.masteringemacs.org/articles/2014/04/10/dired-shell-commands-find-xargs-replacement/][Dired Shell Command]], [[https://www.masteringemacs.org/article/working-multiple-files-dired][
Working with multiple files in dired]], and [[https://www.masteringemacs.org/article/wdired-editable-dired-buffers][WDired: Editable Dired Buffers]]..
They just made the power of Dired so obvious, and so easy to use, that it
instantly because delightful to use. That was very, very cool. Even though I
was really, really happy with Finder and Explorer... suddenly it just became so
obvious and pleasant to use Dired. That is so wild.

Key notes when executing shell commands on file selection...

Substitution:
- =<cmd> ?= :: 1* calls to cmd, each file a single argument
- =<cmd> *= :: 1 call to =cmd=, selected list as argument
- =<cmd> *""= :: have the shell expand the * as a globbing wild-card
  - Not sure what this means

Synchronicity:
- =<cmd> ...= :: by default commands are called synchronously
- =<cmd> &= :: execute in parallel
- =<cmd> ;= :: execute sequentially, asynchronously
- =<cmd> ;&= :: execute in parallel, asynchronously

Key notes on working with files in multiple directories... use the following:

Use =find= just like you would at the command line and all of the results show
up in a single Dired buffer that you may work with just like you would any other
file appearing in a Dired buffer. The abstraction here becomes so obvious, you
may ask yourself why you never considered such a thing /before/ now (as I did):
#+NAME: 8FE141D1-224D-415F-8D68-D1A30196EA33
#+BEGIN_SRC emacs-lisp :results output silent
(use-package find-dired
  :ensure t
  :config
  (setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld")))
#+END_SRC

Noting that:
- =find-dired= :: is the general use case
- =find-name-dired= :: is for simple, single string cases

And if you want to use the faster Elisp version, that uses lisp regex, use:
- =find-lisp-find-dired= :: for anything
- =find-lisp-find-dired-subdirectories= :: for only directories

Key notes on working with editable buffers...

As the author notes, you probably already instinctually knew what is possible.
After reading his brief and concise exposition, it would be hard /not/ to
intuit what is possible! The options are big if you make a writable file buffer.
Think about using multiple cursors. Done? Well, that is a no-brainer. Once you
grok multiple cursors just =find-dired= what you need and then do what you need
to do to it. Very cool.

- =dired-toggle-read-only, C-x C-q= :: cycle between dired-mode and wdired-mode
- =wdired-finish-edit, C-c C-c= :: commit your changes
- =wdired-abort-changes, C-c ESC= :: revert your changes

#+NAME: 66FFA0AC-973A-412E-9056-F9B4BE9D3641
#+BEGIN_SRC emacs-lisp :results output silent
(use-package wdired
  :ensure t
  :config
  (setq wdired-allow-to-change-permissions t)
  (setq wdired-allow-to-redirect-links t)
  (setq wdired-use-interactive-rename t)
  (setq wdired-confirm-overwrite t)
  (setq wdired-use-dired-vertical-movement 'sometimes))
#+END_SRC

When you selected a bunch of files or directories, you /may/ want to communicate
somewhere your selection somehow. The simplest way to do this is to utilize
=dired-copy-filename-as-kill=. What a nice idea, and its default binding is =w=.

Since I started using a menu bar again, and wanting to get Imenu really
exercised, Dired in Imenu seems like an obvious choice.

#+NAME: 41A96AA5-4736-40CF-BECD-5AE7C43DCEFF
#+BEGIN_SRC emacs-lisp :results output silent
(use-package dired-imenu
  :ensure t)
#+END_SRC

** IMenu
   :PROPERTIES:
   :ID:       F748CAFD-0235-4E34-8546-A9EC515759BB
   :END:

Major productivity hack

#+NAME: D722C567-86BA-45AD-91AB-2536696312C8
#+BEGIN_SRC emacs-lisp :results output silent
(use-package imenu
  :config
  (setq imenu-sort-function #'imenu--sort-by-name))
(defun help/try-to-add-imenu ()
  "Add Imenu to modes that have `font-lock-mode' activated.

Attribution: SRC http://www.emacswiki.org/emacs/ImenuMode"
  (condition-case nil (imenu-add-to-menubar "Imenu") (error nil)))
(add-hook 'font-lock-mode-hook #'help/try-to-add-imenu)
#+END_SRC

** Interactively DO Things
   :PROPERTIES:
   :ID:       2DB9FDA1-9950-4FEA-A33C-E8DDFDA9420E
   :END:

IDO is used everywhere possible.

Access nearly every object available in this system from one place.

These configurations are performed in the correct order. Any attempt to refactor
this Source-Block will break Ido in this system.

#+NAME: CCCA7B51-6A71-41EF-906C-C1C3A6B0C927
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ido)
(use-package flx-ido
  :ensure t
  :config
  (ido-mode t))
(use-package ido-hacks
  :ensure t)
(use-package ido-ubiquitous
  :ensure t
  :config
  (ido-ubiquitous-mode t)
  (setq ido-create-new-buffer 'always)
  (flx-ido-mode t)
  (setq ido-use-faces nil))
(use-package ido-vertical-mode
  :ensure t
  :config
  (ido-vertical-mode t)
  (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right))
#+END_SRC

Make functions search-able.

#+NAME: 4C4179A9-2415-4309-A127-FA143D3331DD
#+BEGIN_SRC emacs-lisp :results output silent
(use-package smex
  :ensure t
  :config
  (smex-initialize))
#+END_SRC

Make URLs a first-class object.

#+NAME: 667AED70-8685-4BEA-A32F-7B304483C05F
#+BEGIN_SRC emacs-lisp :results output silent
(setq ido-use-url-at-point t)
(setq ido-use-filename-at-point 'guess)
#+END_SRC

** Font
   :PROPERTIES:
   :ID:       8F7A007E-5CBA-4651-84D8-5874FF393EA6
   :END:

Use Unicode-Font to provide as many Unicode fonts as possible.

Here are the Unicode fonts that provide nearly everything.

| Name    | Version | URL | Comments                 |
|---------+---------+-----+--------------------------|
| [[http://sourceforge.net/projects/dejavu/files/dejavu/2.34/dejavu-fonts-ttf-2.34.tar.bz2][DejaVu]]  |    2.43 | [[http://sourceforge.net/projects/dejavu/files/dejavu/2.34/dejavu-fonts-ttf-2.34.tar.bz2][.]]   | Modern classic           |
| [[http://users.teilar.gr/~g1951d/][Symbola]] |    7.17 | [[http://users.teilar.gr/~g1951d/Symbola.zip][.]]   | Neat                     |
| [[http://www.quivira-font.com/][Quivira]] |     4.0 | [[http://www.quivira-font.com/files/Quivira.otf][.]]   | Amazing                  |
| [[https://code.google.com/p/noto/][Noto]]    |       ? | [[http://noto.googlecode.com/git/fonts/individual/hinted/NotoSans-Regular.ttc][1]] [[http://noto.googlecode.com/git/fonts/individual/unhinted/NotoSansSymbols-Regular.ttf][2]] | Has morse code, and more |

To test it run =view-hello-file= and =M-x list-charset-chars RET unicode-bmp RET=.

Perhaps educationally there is a character for bowel-movements: 💩.

#+NAME: 6CE3010A-0F52-4050-89FF-C3DB72794822
#+BEGIN_SRC emacs-lisp :results output silent
(use-package unicode-fonts
  :ensure t
  :config
  (unicode-fonts-setup))
#+END_SRC

Activate font locking everywhere possible.

#+NAME: 54E78DF3-0C8E-4ABE-8CD8-36C0AF24DD26
#+BEGIN_SRC emacs-lisp :results output silent
(global-font-lock-mode t)
#+END_SRC

Visualize ASCII values as their most likely Unicode representation.

#+NAME: 391224F7-3242-4B91-BC34-6E8083947884
#+BEGIN_SRC emacs-lisp :results output silent
(use-package pretty-mode
  :ensure t
  :config
  (global-pretty-mode))
#+END_SRC

** Going to Objects
   :PROPERTIES:
   :ID:       835D3E9D-3044-4385-9AB1-F0DF17045565
   :END:

Go to any object in the frame quickly.

#+NAME: C95AD351-D087-473F-88EB-B0930C86FBDF
#+BEGIN_SRC emacs-lisp :results output silent
(use-package avy
  :ensure t
  :config)
#+END_SRC

** Grammar
   :PROPERTIES:
   :ID:       95A4EF33-F83D-49ED-AC74-A29DA19524BC
   :END:

Warn of poor grammar immediately interrupting flow with a visual indicator.

#+NAME: 42DD3C85-F2C4-4A82-8B76-5BFBCF692E86
#+BEGIN_SRC emacs-lisp :results output silent
(use-package writegood-mode
  :ensure t
  :config
  (eval-after-load "writegood-mode"
    '(diminish 'writegood-mode)))
#+END_SRC

#+NAME: 4FF40D35-DDA0-4E02-80C0-52962DCD449A
#+BEGIN_SRC emacs-lisp :results output silent
(use-package langtool
  :ensure t
  :init
  (setq langtool-language-tool-jar (concat (getenv "EELIB") "/LanguageTool-2.8/languagetool-commandline.jar"))
  (setq langtool-mother-tongue "en")
  (setq langtool-java-bin (concat (getenv "JAVA_HOME") "/bin/java")))
#+END_SRC

** Intellisense (Auto Completion)
   :PROPERTIES:
   :ID:       A7225C28-B8AE-4960-9E2A-64E6E8B58400
   :END:

#+NAME: 487B46D5-C025-4114-A1B4-BAAF5FAFE430
#+BEGIN_SRC emacs-lisp :results output silent
(use-package fuzzy
  :ensure t)
(use-package auto-complete
  :ensure t
  :config
  (use-package auto-complete-config)
  (setq ac-quick-help-prefer-pos-tip nil)
  (ac-config-default)
  (setq ac-auto-start nil)
  (help/not-on-gui (ac-set-trigger-key "TAB"))
  (help/on-gui (ac-set-trigger-key "<tab>"))
  :diminish auto-complete-mode)
(use-package auto-complete-chunk
  :ensure t)
#+END_SRC

Auto-completion for =.=-separated words.

#+NAME: 36899F5A-7606-461A-A17C-622B0B807E8E
#+BEGIN_SRC emacs-lisp :results output silent
(use-package auto-complete-chunk
  :ensure t)
#+END_SRC

** Macros
   :PROPERTIES:
   :ID:       E32B41C2-C761-42F0-A9AE-F89A2A18439F
   :END:

The macro recorder and Multiple-Cursors provide two ways to do the right thing
in different situations. Be very thoughtful and allow every function.

#+NAME: 989C4727-473A-4DAB-8446-5077F3042587
#+BEGIN_SRC emacs-lisp :results output silent
(use-package multiple-cursors
  :ensure t)
#+END_SRC

** Mark and Region
   :PROPERTIES:
   :ID:       A3C2AF94-B834-4FD2-9B23-F64F618B31C3
   :END:

When you start typing and text is selected, replace it with what you are typing,
or pasting

#+NAME: 0B6E0831-FE6F-442F-918F-48488A6FCD2D
#+BEGIN_SRC emacs-lisp :results output silent
(delete-selection-mode t)
#+END_SRC

** Minibuffer
   :PROPERTIES:
   :ID:       7A3C5EF1-BEF7-4007-86B1-78590CB62EB2
   :END:

Make it easier to answer questions.
#+NAME: 2D2A8781-9A67-4D3A-B0E4-B09EEBBC65D8
#+BEGIN_SRC emacs-lisp :results output silent
(fset #'yes-or-no-p #'y-or-n-p)
#+END_SRC

Comfortably display information.
#+NAME: F40D1069-58B9-42CA-A64E-789B56C914EC
#+BEGIN_SRC emacs-lisp :results output silent
(setq resize-mini-windows t)
(setq max-mini-window-height 0.33)
#+END_SRC

Allow recursive commands-in-commands and highlight the levels of recursion.
#+NAME: A6E43252-3A7E-4647-BC3E-EB93CF178233
#+BEGIN_SRC emacs-lisp :results output silent
(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode t)
#+END_SRC

** Mouse
   :PROPERTIES:
   :ID:       F3E75BDE-F853-488C-AF46-03B54C0A0919
   :END:

Scroll pleasantly with the mouse wheel. A slow turn moves the buffer up and down
one line at a time. So does a fast turn. Anything further than 5-10 lines deserves
a fast navigation vehicle.

#+NAME: 9B580380-CA8C-4134-80CC-FE3B0376BE73
#+BEGIN_SRC emacs-lisp :results output silent
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse t)
#+END_SRC

** Occur
   :PROPERTIES:
   :ID:       FA8195C5-30B7-44CF-8D0F-8FE2CE1CB3DA
   :END:

#+NAME: 00A4417A-8BE6-4417-B054-2F9D8287FAFD
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/occur-mode-hook-fn ()
  "HELP customizations."
  (interactive)
  (turn-on-stripe-buffer-mode)
  (stripe-listify-buffer))
(add-hook 'occur-mode-hook #'help/occur-mode-hook-fn)
(define-key occur-mode-map (kbd "n") #'next-logical-line)
(define-key occur-mode-map (kbd "p") #'previous-logical-line)
#+END_SRC

** Popups
   :PROPERTIES:
   :ID:       E1E4E20E-F789-422B-B0B3-706BD8A842DF
   :END:

Provide popup notifications.

#+NAME: 2DE86EF6-3E4B-42FD-AA11-1914A83029BE
#+BEGIN_SRC emacs-lisp :results output silent
(use-package alert
  :ensure t
  :config
  (setq alert-fade-time 10)
  (help/on-gui
   (help/on-osx
    (setq alert-default-style 'growl)))
  (setq alert-reveal-idle-time 120))
#+END_SRC

** Projects
   :PROPERTIES:
   :ID:       B35103E2-0FE9-466C-9AB9-39EA28FADEDB
   :END:

Directories that have Git working copies are logically projects. Manage them
with Projectile.

#+NAME: 037534FF-945E-477A-9813-D9E4C7E54359
#+BEGIN_SRC emacs-lisp :results output silent
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode t)
  (global-set-key (kbd "s-z") #'projectile-find-file)
  (help/on-windows
   (setq projectile-indexing-method 'alien))
  :diminish projectile-mode)
#+END_SRC

Notify Magit about every working copy that Projectile knows about.

#+NAME: 8431ABE6-1C81-4AD3-AB47-C0B793C98FE3
#+BEGIN_SRC emacs-lisp :results output silent
(eval-after-load "projectile"
  '(progn (setq magit-repository-directories (mapcar (lambda (dir)
                                                       (substring dir 0 -1))
                                                     (remove-if-not (lambda (project)
                                                                      (file-directory-p (concat project "/.git/")))
                                                                    (projectile-relevant-known-projects)))

                magit-repository-directories-depth 1)))
#+END_SRC

** Printing
   :PROPERTIES:
   :ID:       C6230D9E-8331-4092-8846-DB244455C922
   :END:

#+NAME: BD085F97-3BDA-43A5-A5BC-A17DD446E36B
#+BEGIN_SRC emacs-lisp :results output silent
(use-package pp
  :commands (pp-display-expression))
#+END_SRC

** Replacing
   :PROPERTIES:
   :ID:       B10A2279-4F34-4DA2-BB1A-491B82F2F6EA
   :END:

Display information about search-and-or-replace operation.

#+NAME: D9A8B6E9-E328-47C1-9B75-863B640BEAB7
#+BEGIN_SRC emacs-lisp :results output silent
(use-package anzu
  :ensure t
  :config
  (global-anzu-mode t)
  (setq anzu-mode-lighter "")
  (setq anzu-deactivate-region t)
  (setq anzu-search-threshold 1000)
  (setq anzu-replace-to-string-separator " ⇒ "))
#+END_SRC

** Save History of All Things
   :PROPERTIES:
   :ID:       31961F28-1913-4247-986A-273391C4A85D
   :END:

It is nice to have commands and their history saved so that every time you get
back to work, you can just re-run stuff as you need it.

#+NAME: FDA728C0-CBE2-4B1B-A30F-CC8EA3E810DB
#+BEGIN_SRC emacs-lisp :results output silent
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
(savehist-mode t)
#+END_SRC

** Searching
   :PROPERTIES:
   :ID:       960E2DE0-3F5A-40AB-A9BF-FF08A410EAB7
   :END:

When searching allow a space to many any number.

#+NAME: B5DDBCA8-42F2-49DF-9E7F-71E776A99946
#+BEGIN_SRC emacs-lisp :results output silent
(setq isearch-lax-whitespace t)
(setq isearch-regexp-lax-whitespace t)
#+END_SRC

Make searches case-insensitive.

#+NAME: 4B9FE2A1-6A5F-42EF-AEEA-222B72170B64
#+BEGIN_SRC emacs-lisp :results output silent
(setq-default case-fold-search t)
#+END_SRC

** Spell Checking
   :PROPERTIES:
   :ID:       902EAA81-4FC0-40A0-AE6D-D31C474B87E0
   :END:

Ispell is simple and powerful.

*** Org-Mode
    :PROPERTIES:
    :ID:       72540881-8F99-4ED6-9FE4-7292A66B3089
    :END:

Never ispell the following objects.

Block regex helper.

#+NAME: 62360083-1CE2-4EEF-BF61-AEA8F3FA9944
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/block-regex (special)
  "Make an ispell skip-region alist for a SPECIAL block."
  (interactive)
  `(,(concat help/org-special-pre "BEGIN_" special)
    .
    ,(concat help/org-special-pre "END_" special)))
#+END_SRC

Source-Blocks.

#+NAME: 23D5548B-1081-48A8-BBCD-5C69AC2C57B8
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'ispell-skip-region-alist (help/block-regex "SRC"))
#+END_SRC

Example-Blocks. This system often uses Source-Blocks to edit content and
Example-Blocks to make it easily renderable when it is not for running.

#+NAME: CE78FEAC-B28A-4F76-95F2-4FE246FCDCAD
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'ispell-skip-region-alist (help/block-regex "EXAMPLE"))
#+END_SRC

Properties.

#+NAME: 01BEC0C6-64F7-440F-A217-EA73CDA75DDA
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'ispell-skip-region-alist '("^\s*:PROPERTIES\:$" . "^\s*:END\:$"))
#+END_SRC

Footnotes.

#+NAME: F5DC40F2-20EC-45C0-BDB3-7C788514CD23
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'ispell-skip-region-alist '("\\[fn:.+:" . "\\]"))
#+END_SRC

Footnotes with URLs that contain line-breaks.

#+NAME: F5636C6E-61AC-491F-936E-FAE5974ED541
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'ispell-skip-region-alist '("^http" . "\\]"))
#+END_SRC

Bold text list items.

#+NAME: D1A2D129-9299-4349-AFF3-8F65F7D0CF95
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'ispell-skip-region-alist '("- \\*.+" . ".*\\*: "))
#+END_SRC

Check =SPECIAL LINE= definitions, ignoring their type.

#+NAME: 3745D1E1-33D3-4D2F-B527-BBBCA619D455
#+BEGIN_SRC emacs-lisp :results output silent
(let ()
  (--each
      '(("ATTR_LATEX" nil)
        ("AUTHOR" nil)
        ("BLOG" nil)
        ("CREATOR" nil)
        ("DATE" nil)
        ("DESCRIPTION" nil)
        ("EMAIL" nil)
        ("EXCLUDE_TAGS" nil)
        ("HTML_CONTAINER" nil)
        ("HTML_DOCTYPE" nil)
        ("HTML_HEAD" nil)
        ("HTML_HEAD_EXTRA" nil)
        ("HTML_LINK_HOME" nil)
        ("HTML_LINK_UP" nil)
        ("HTML_MATHJAX" nil)
        ("INFOJS_OPT" nil)
        ("KEYWORDS" nil)
        ("LANGUAGE" nil)
        ("LATEX_CLASS" nil)
        ("LATEX_CLASS_OPTIONS" nil)
        ("LATEX_HEADER" nil)
        ("LATEX_HEADER_EXTRA" nil)
        ("NAME" nil)
        ("OPTIONS" t)
        ("POSTID" nil)
        ("SELECT_TAGS" nil)
        ("STARTUP" nil)
        ("TITLE" nil))
    (add-to-list
     'ispell-skip-region-alist
     (let ((special (concat "#[+]" (car it) ":")))
       (if (cadr it)
           (cons special "$")
         (list special))))))
#+END_SRC

** Sudo
   :PROPERTIES:
   :ID:       562F54F8-6E35-4DE1-9E9C-436B55CE83CE
   :END:

Configure Sudo with Ido.

#+NAME: E2D66077-10AC-46D1-AAAA-D0C81BED451B
#+BEGIN_SRC emacs-lisp :results output silent
(help/on-osx
 (defun help/ido-find-file ()
   "Find file as root if necessary.

Attribution: SRC `http://emacsredux.com/blog/2013/04/21/edit-files-as-root/'"
   (unless (and buffer-file-name
              (file-writable-p buffer-file-name))
     (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

 (advice-add #'ido-find-file :after #'help/ido-find-file))
#+END_SRC

** Syntax Checking
   :PROPERTIES:
   :ID:       B4A8362E-B218-4353-AC4B-7059A686EA89
   :END:

Perform syntactic analysis all the time.

#+NAME: 33473D12-CA77-453B-8115-FE060E033ED4
#+BEGIN_SRC emacs-lisp :results output silent
(use-package flycheck
  :ensure t
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode)
  :diminish flycheck-mode)
#+END_SRC

** TAB
   :PROPERTIES:
   :ID:       78E2BA2B-8289-422F-99DC-5E40DE928E68
   :END:

Most modes in this system will never use TAB.

#+NAME: 6A9C209F-8228-4D10-B23D-6A8376FD7FB3
#+BEGIN_SRC emacs-lisp :results output silent
(setq-default indent-tabs-mode nil)
#+END_SRC

Remove TAB from all buffers before persisting to the backing file unless it is
configured to retain TAB. The use case is a Makefile.

#+NAME: FD5B749C-AC7A-40A7-AB88-851F2190E906
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/untabify-if-not-indent-tabs-mode ()
  "Untabify if `indent-tabs-mode' is false.

Attribution: URL `http://www.emacswiki.org/emacs/UntabifyUponSave'"
  (interactive)
  (when (not indent-tabs-mode)
    (untabify (point-min) (point-max))))

(add-hook 'before-save-hook #'help/untabify-if-not-indent-tabs-mode)
#+END_SRC

Most programing modes indent to 2 spaces. TABs should be the same width.

#+NAME: 1AB838F7-4C9B-4C35-97B5-35390871A22D
#+BEGIN_SRC emacs-lisp :results output silent
(setq-default tab-width 2)
#+END_SRC

** Version Control
   :PROPERTIES:
   :ID:       F5E2718B-F54F-41C5-9CED-6E470CAC238D
   :END:

Use Magit for Git. The commit log editor uses With-Editor and Server modes.
They are not not diminshed because they are infrequently used.

#+NAME: 14B95634-E6E8-46A0-9698-2C9B847DD404
#+BEGIN_SRC emacs-lisp :results output silent
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "s-e") #'help/safb-help/magit-status))
#+END_SRC

Leave the VC message template empty.

#+NAME: 27D5DC40-DD13-4E08-9EF9-D962DD08A7D5
#+BEGIN_SRC emacs-lisp :results output silent
(eval-after-load "log-edit"
  '(remove-hook 'log-edit-hook 'log-edit-insert-message-template))
#+END_SRC

Git ignore files are text files.

#+NAME: 6FD11818-DB10-4AF4-A714-C32C04291AF2
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'auto-mode-alist '(".gitignore$" . text-mode))
#+END_SRC

** Whitespace Management
   :PROPERTIES:
   :ID:       5BBD948F-7239-457E-8BD9-710558C0E241
   :END:

Make control characters easily visible.

#+NAME: 3327B4FF-82CF-42E7-AEF8-DCC968B97BDC
#+BEGIN_SRC emacs-lisp :results output silent
(use-package whitespace
  :ensure t
  :config
  (setq whitespace-style '(trailing lines tab-mark))
  (setq whitespace-line-column help/column-width)
  (global-whitespace-mode t)
  :diminish whitespace-mode global-whitespace-mode)
#+END_SRC

** Word Wrap
   :PROPERTIES:
   :ID:       2156A7CE-297E-478F-AFF2-13CE64B3C5C3
   :END:

#+NAME: EDD8ABBB-B76A-4B95-9367-211A765348CD
#+BEGIN_SRC emacs-lisp :results output silent
(use-package visual-line-mode
  :config
  (eval-after-load "visual-line-mode"
    '(diminish 'visual-line-mode)))
#+END_SRC

* Quiet and Pleasant Appearance
   :PROPERTIES:
   :noweb-ref: Quiet-and-Pleasant-Appearance
   :ID:       197B7B84-5090-47AE-9180-F8F606D0012F
   :END:

Configure EMACS to personal-taste for "noise" and "form".

** Line Number
   :PROPERTIES:
   :ID:       4D367462-1C7B-4110-B7D1-E973D386B4E1
   :END:

The linum gutter should not "shift" as it transitions between line numbers of
different magnitudes. For example going from line 99 to 100 will shift the
buffer contents by one character. That is distracting and interrupts the flow.

Most files will be less than 100,000 lines.

#+NAME: DC131133-BEC7-45D2-BA35-42E77FC3BB22
#+BEGIN_SRC emacs-lisp :results output silent
(defvar linum-format "%05d")
#+END_SRC

** Buffer
   :PROPERTIES:
   :ID:       61586A23-B774-4436-B916-348453EEA3DD
   :END:

Never automatically convert the end of the line character. For most of us this
is between UNIX and DOS.

#+NAME: 61F1703A-48AA-4C2E-AE78-4C9766B6C8BC
#+BEGIN_SRC emacs-lisp :results output silent
(setq inhibit-eol-conversion t)
#+END_SRC

Give buffers backed by identically named files distinguishable names.

#+NAME: A5438CB6-5228-4753-B2A7-BFEFC573F6B6
#+BEGIN_SRC emacs-lisp :results output silent
(use-package uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

Don't use audible bells, use visual bells.

#+NAME: 295C91F5-6CD4-41C8-A62C-600B11838B2B
#+BEGIN_SRC emacs-lisp :results output silent
(setq ring-bell-function 'ignore)
(setq visible-bell t)
#+END_SRC

Highlight s-expressions.

#+NAME: 59F87147-F8C3-49D0-BEC6-A8D19989001E
#+BEGIN_SRC emacs-lisp :results output silent
(setq blink-matching-paren nil)
(show-paren-mode)
(setq show-paren-delay 0)
(setq show-paren-style 'expression)
#+END_SRC

The cursor should not blink and distract you. On a graphic display make the
cursor a box and stretch it as wide as the character below it.

#+NAME: CC0CDAEB-8460-43CE-BA7E-3A9D986A02BB
#+BEGIN_SRC emacs-lisp :results output silent
(blink-cursor-mode 0)
(help/on-gui
 (setq-default cursor-type 'box)
 (setq x-stretch-cursor 1))
#+END_SRC

EMACS used UTF-8 by default. Make copying and pasting easier.

#+NAME: BC706CBF-2B98-4FD7-9A5A-61F5483D0899
#+BEGIN_SRC emacs-lisp :results output silent
(prefer-coding-system 'utf-8)
(help/on-gui
 (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
 (help/on-windows
  (set-clipboard-coding-system 'utf-16le-dos)))
#+END_SRC

Make it very easy to see the line with the cursor.

#+NAME: 6FD9F092-7062-4E7A-BB58-4B5F45AF0AD0
#+BEGIN_SRC emacs-lisp :results output silent
(global-hl-line-mode t)
#+END_SRC

Make it very easy to input special-characters using TeX coding.

#+NAME: D0F5616F-1609-4E12-A4D7-7A1F46D34A2C
#+BEGIN_SRC emacs-lisp :results output silent
(setq default-input-method 'TeX)
#+END_SRC

** Color Theme
   :PROPERTIES:
   :ID:       057BBA77-4662-4F7B-B47A-CB1E79A1618B
   :END:

[[https://github.com/bbatsov/solarized-emacs][Solarized Theme]]

- src_emacs-lisp{(- 1284 25)} {{{results(=1259=)}}} Faces Defined
- 47,869 Downloads

- A distinct fringe provides a definition of space.
- The modeline is always at the bottom and doesn't need differentiation.
- Minimize bold and italic faces.
- Minimize fringe indicators.

#+NAME: 021B7D3A-E696-43B9-BC08-C8BDABB33999
#+BEGIN_SRC emacs-lisp :results output silent
(use-package solarized-theme
  :ensure t
  :config
  (setq solarized-distinct-fringe-background t)
  (setq solarized-high-contrast-mode-line nil)
  (setq solarized-use-less-bold t)
  (setq solarized-use-more-italic nil)
  (setq solarized-emphasize-indicators nil)
  (load-theme 'solarized-dark t))
#+END_SRC

** Comint
   :PROPERTIES:
   :ID:       B4E17CF5-5542-4526-ADEE-D5EC3DB9131F
   :END:

=comint-mode= is only maybe the second most important thing for making Emacs
really, really special.

#+NAME: CDD7F353-867A-4E9C-A060-5C0F6A26866B
#+begin_src emacs-lisp :results output silent
(setq comint-scroll-to-bottom-on-input 'this)
(setq comint-scroll-to-bottom-on-output 'others)
(setq comint-move-point-for-output 'others)
(setq comint-show-maximum-output t)
(setq comint-scroll-show-maximum-output t)
(setq comint-move-point-for-output t)
#+end_src

This configuration had been working fine for a long time. The intent was for it
to be crystal clear that the prompt line in comint buffers would be read only.
This turned out to be a mistake; though I am not sure why, when, or how it
became a mistake. Nonetheless, this should be left alone. The way the issue here
manifested was that all R buffers opened by =ess= were 100% read only which
obviously is a *big issue* if you actually want to use! ROFL

#+NAME: 346012D4-6861-458B-8352-3874D1F934E6
#+BEGIN_SRC emacs-lisp :results output silent
(setq comint-prompt-read-only nil)
#+END_SRC

** Font
   :PROPERTIES:
   :ID:       EC675F88-89C0-4A5A-B910-843F28C0F90F
   :END:

The best programming font is Deja Vu Sans Mono because it sans-serif and
support a lot of Unicode characters. Set it to a good default for an 80
character wide buffer and make it easy to adjust it.

#+NAME: 21687556-D79E-4734-86E6-52FF9EE107B5
#+BEGIN_SRC emacs-lisp :results output silent
(help/on-gui
 (defvar help/font-size 10 "The preferred font size.")
 (help/on-osx (setq help/font-size 17))
 (help/on-windows (setq help/font-size 13))
 (defconst help/font-base "DejaVu Sans Mono" "The preferred font name.")
 (defun help/font-ok-p ()
   "Is the configured font valid?"
   (interactive)
   (member help/font-base (font-family-list)))
 (defun help/font-name ()
   "Compute the font name and size string."
   (interactive)
   (let* ((size (number-to-string help/font-size))
          (name (concat help/font-base "-" size)))
     name))
 (defun help/update-font ()
   "Updates the current font given configuration values."
   (interactive)
   (if (help/font-ok-p)
       (progn
         (message "Setting font to: %s" (help/font-name))
         (set-frame-font (help/font-name)))
     (message (concat "Your preferred font is not available: " help/font-base))))
 (help/update-font))
#+END_SRC

** Frame
   :PROPERTIES:
   :ID:       B3F90439-D007-42EE-95FC-E93BBA827325
   :END:

The scroll-bars are helpful for new users.

#+NAME: 96EB14DD-CB63-46F3-B2E3-6F433D70DFAE
#+BEGIN_SRC emacs-lisp :results output silent
(scroll-bar-mode 0)
#+END_SRC

The tool-bar is helpful for new users. Isn't the argument funny?

#+NAME: 2063ECD7-C23B-4CDC-96E0-786361DFAA9C
#+BEGIN_SRC emacs-lisp :results output silent
(tool-bar-mode -1)
#+END_SRC

** Pointer
   :PROPERTIES:
   :ID:       2A437D32-2944-41B3-AD8F-438ABBD4E0CF
   :END:

Hide the pointer when typing.

#+NAME: 9E122111-1074-42D5-A57D-855E3A888C8E
#+BEGIN_SRC emacs-lisp :results output silent
(setq make-pointer-invisible t)
#+END_SRC

** Version Control
   :PROPERTIES:
   :ID:       99337D9E-DBC9-4673-B814-EBC94C044E3E
   :END:

Provide VC file status indicators.

#+NAME: 668C63F3-C52E-4BDF-929D-E2BF2E985304
#+BEGIN_SRC emacs-lisp :results output silent
(use-package diff-hl
  :ensure t)
#+END_SRC

** Window
   :PROPERTIES:
   :ID:       9A848D65-DE56-4F95-A84D-CAE74781CD25
   :END:

Menu bars make EMACS more accessible to non-EMACS users.

#+NAME: 00BC7BEE-F9FC-4B9D-AC1A-4B1A3FFA64A7
#+BEGIN_SRC emacs-lisp :results output silent
(menu-bar-mode t)
#+END_SRC

Easily return to previous configurations. 2-4 windows are easily managed by
hand.

#+NAME: 3FB7FA94-1A6B-4E3B-8EDE-7A4D1D86E50E
#+BEGIN_SRC emacs-lisp :results output silent
(winner-mode t)
#+END_SRC

* Principle of Least Astonishment (POLA)
  :PROPERTIES:
  :noweb-ref: Principle-of-Least-Astonishment
  :ID:       43D9AB52-2157-4A1D-AD9C-D35996E91269
  :END:

** Scoping Behavior
   :PROPERTIES:
   :ID:       C0F8DDC4-C2B7-4578-B9B4-FA13E3BF0EBD
   :END:

EMACS values dynamic-scoping for now and in the future.

EMACS values lexical-scoping in the future.

There are pecuilar interactions between [[https://yoo2080.wordpress.com/2011/12/31/lexical-scoping-and-dynamic-scoping-in-emacs-lisp/][lexically and dynamically scope closures]]
and [[https://yoo2080.wordpress.com/2013/08/14/invasion-of-special-variables-in-emacs-lisp/][special variables]].

With the future in mind, make the switch now.

It is enabled with a non-nil buffer-local variable ~lexical-binding~. The variable
is inserted into each of the Web definitions that this system provides. Those
definitions can't use Org-Mode comments so they are defined individually in each
Web.

** Load Behavior
   :PROPERTIES:
   :ID:       B1A48CB2-9295-466E-947F-EE24D57DB548
   :END:

EMACS can load 3 different representations of a Emacs-Lisp source file code
OOTB. The name of source code file is the value before the file extension. When
you pass ~load~ a name it searches for an acceptable representation. Representation
types are indicated by their extension name. =.el= is a human readable and
uncompiled. =.elc= is not human readable and compiled. =.gz= is Gzip compressed and
contains =.el= or =.elc= files.

The variable ~load-suffixes~ determines the order for which text and byte-code
representations are first searched by extension-name. The variable
~load-file-rep-suffixes~ determines the order for all other extension types.

OOTB, EMACS combines the productivity of REPL style of development with the
speed of compiled code by ~load~'ing byte-code first, text second, and compressed
third. This workflow gives you the fastest code at run-time and lets you
experiment with new features stored in text. When you are ready to use them
every time, you compile them. There is only one downside of this approach: when
you forget that it works this way it can be confusing.

When you forget about that style of system you end up with surprising behavior.
The surprise comes when you forget to compile code and then write new code that
depends on the now old version of that code. After the next build, your system
can break in surprising ways. This violates the Principle of Least Astonishment.

This system values predictability so it does the simplest thing possible: ~load~
searches for the newest representation of a file and uses that one. It assumes
that Sysop has total and complete control over the management of file
representations.

This is the *first* thing that /ought/ to happen in the initialization of *any*
tangled system.

#+NAME: 87B0CAB9-E6E5-4C68-B389-9289E65FCA7F
#+BEGIN_SRC emacs-lisp :results output silent
(setq load-prefer-newer t)
#+END_SRC

* Watch What You Eat
  :PROPERTIES:
  :noweb-ref: Watch-What-You-Eat
  :ID:       59073E74-83D9-4218-917C-789A27D57E5A
  :END:

*Code requiring package-management can only follow this block.*

Before ELPA, I used SVN to manage software packages for EMACS. After ELPA,
I used ELPA-packages. Now this system uses MELPA and GNU. MELPA packages always
have their issues fixed very quickly. GNU packages rarely have issues.

Initialize Package.

#+NAME: 804FD197-8B2A-49F5-A4CB-48F6036FBCEC
#+BEGIN_SRC emacs-lisp :results output silent
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("gnu" . "http://elpa.gnu.org/packages/") t)
#+END_SRC

Use-Package is the most configurable and performant way to manage ELPA packages.

Add the Use-Package distribution the load path.

#+NAME: FAB22F99-AB0C-4A75-AFEF-9E680A5EE95D
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'load-path"~/src/use-package")
#+END_SRC

Load Use-Package and it's partner Diminish. Every package loaded before this
point uses ~require~. Every package loaded after this point uses ~use-package~.

#+NAME: 54841CA9-6491-46E8-8F40-4DCF7182CCD7
#+BEGIN_SRC emacs-lisp :results output silent
(eval-when-compile
  (require 'use-package))
(use-package diminish)
#+END_SRC

* Hacking
  :PROPERTIES:
  :ID:       B7CE60F5-5510-4358-8DD5-D42D9A2F4D9B
  :END:
** Common Configurations
  :PROPERTIES:
  :noweb-ref: Hacking-Common-Configurations
  :ID:       BE02A401-AFF6-4B64-B7F3-589C69CA7099
  :END:

This system configures ~text-mode~ and ~prog-mode~ very similarly:

- EMACS *exists* to help you work with text.
- EMACS' entire configuration helps you work with text whether it is in a
  specific mode or not.
- Org-Mode's motto is "*Organize Your Life In Plain Text!*".
- From an EMACS and a LP perspective ~text-mode~ *is a* programming mode.
- In this system: *Text is the User-Interface*.

This system does not rely on ~prog-mode~ inheritance to configure it's hacking
modes:

- The EMACS literature advises that modes extend ~text-mode~ or ~prog-mode~
- That /would/ make it easier to configure nearly everything using ~prog-mode-hook~.
- In practice ~prog-mode~ is too new.
- Not all programming modes inherit from it. Not even =IELM= is ready.

With that in mind this system:

- Defines common configuration here for reuse in every desired mode starting
  with =text-mode= and then all logical programming modes.
- Explicitly utilizes it directly instead of using inheritance.
- This system refers to this configuration of programming modes as =prog*-mode=.
- The line between "configuring EMACS", "configuring ~text-mode~", and
  "configuring ~prog*-mode~" is often blurred and sometimes confusing. The lines
  become wavy and intertwined with mastery of EMACS and LP.

*** Text-Mode
    :PROPERTIES:
    :ID:       7CFD11FB-F3D4-4272-9DBC-2A420884097C
    :END:

- Line numbers make documents easier to read.
- Indicate that Text-Mode buffers ought to be 80 characters wide.
  #+NAME: 9288AC00-4B73-4E10-ABAE-F2E886981F97
  #+BEGIN_SRC emacs-lisp :results output silent
(use-package fill-column-indicator
  :ensure t
  :config
  (setq-default fill-column help/column-width))
  #+END_SRC

#+NAME: 42D5F313-65F0-49E1-8759-9259D4020FA9
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/text-prog*-setup ()
  "HELP's standard configuration for buffer's working with text, often for
   programming."
  (interactive)
  (visual-line-mode)
  (linum-mode)
  (fci-mode)
  (rainbow-mode)
  (help/try-to-add-imenu)
  (writegood-mode)
  (turn-on-page-break-lines-mode))

(add-hook 'text-mode-hook #'help/text-prog*-setup)
#+END_SRC

*** Prog*-Mode Modes
    :PROPERTIES:
    :ID:       6F71F8AF-4227-46D3-9BD8-2F86B5815B72
    :END:

- Mode inheritance is represented by list definition & indentation.
- Some modes are so simple that inheritance isn't defined.

- Hacking mode hooks.
  - Configurations common to every hacking vehicle.
    #+NAME: B56D8E08-DF7C-4EBB-922E-EA215BD66C0D
    #+BEGIN_SRC emacs-lisp :results output silent
(setq help/hack-modes '(makefile-mode-hook ruby-mode-hook sh-mode-hook plantuml-mode-hook tex-mode-hook ess-mode-hook graphviz-dot-mode-hook))
    #+END_SRC
  - LISP mode hooks.
    - Are hacking modes.
      #+NAME: 963C787F-BC23-4A6C-9637-3922541B26E2
      #+BEGIN_SRC emacs-lisp :results output silent
(setq help/hack-lisp-modes
      '(emacs-lisp-mode-hook
        ielm-mode-hook
        lisp-interaction-mode-hook
        scheme-mode-hook))
(setq help/hack-modes (append help/hack-modes help/hack-lisp-modes))
      #+END_SRC
    - IELM mode hook.
      - Does one or two more things.

*** Prog*-Mode Hook
    :PROPERTIES:
    :ID:       FF132B34-B61B-4DAE-A0B9-E37E39B9BFCE
    :END:

**** Goal
     :PROPERTIES:
     :ID:       E2C7121E-2E56-4A77-8347-2E7DFB73E9B3
     :END:

- Indent at every opportunity and automatically. Verify that it makes sense
  for the mode. Explicitly define instead of relying on ~prog-mode~ inheritance;
  use this documents logical ~prog*-mode~ approach instead.
  #+NAME: 9585BEED-D8EE-4B47-94FA-7E0C604B5804
  #+BEGIN_SRC emacs-lisp :results output silent
(use-package aggressive-indent
  :ensure t
  :config)
  #+END_SRC
- Always maintain balanced brackets. Easily wrap the selected region. Auto-escape
  strings pasted into other strings. Smartparens provides built-in correct
  behavior for most modes.
  #+NAME: 2B027700-7A37-4C26-BA3C-AAD0E6549F9F
  #+BEGIN_SRC emacs-lisp :results output silent
(use-package smartparens-config
  :ensure smartparens
  :config
  (setq sp-show-pair-from-inside nil)
  :diminish smartparens-mode)
  #+END_SRC

**** Implementation.
     :PROPERTIES:
     :ID:       61A981CB-1311-4F51-A264-D748FA34F1D3
     :END:

#+NAME: A0515707-4727-4A01-82E3-01A41CAA841F
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/hack-prog*-mode-hook-fn ()
  (interactive)
  (help/text-prog*-setup)
  (smartparens-strict-mode)
  (aggressive-indent-mode)
  (hs-minor-mode)
  (help/not-on-gui (local-set-key (kbd "RET") #'newline-and-indent))
  (help/on-gui (local-set-key (kbd "<return>") #'newline-and-indent)))
#+END_SRC

*** Wiring
    :PROPERTIES:
    :ID:       50304E30-682C-4C9A-9615-D6E61DAE533B
    :END:

 #+NAME: EBACFD45-C2FF-47B3-B991-28591C112F28
 #+BEGIN_SRC emacs-lisp :results output silent
(let ()
  (--each help/hack-modes
    (add-hook it #'help/hack-prog*-mode-hook-fn)))

(let ()
  (--each help/hack-lisp-modes
    (add-hook it #'help/emacs-lisp-mode-hook-fn)))

(add-hook 'ielm-mode-hook #'help/ielm-mode-hook-fn)
 #+END_SRC

** (Literate Programming)
   :PROPERTIES:
   :ID:       6B83373B-8898-4AC0-B7F6-C42418CCE5E4
   :END:
** Emacs Lisp
  :PROPERTIES:
  :noweb-ref: Hacking-Literate-Programming-Emacs-Lisp
  :ID:       3AD91697-42DE-4555-9F49-B7D9F5E502D3
  :END:

#+NAME: BDF6F6E5-D219-4C49-BB3F-D414A9741B11
#+BEGIN_SRC emacs-lisp :results output silent
(setq initial-scratch-message nil)
(use-package lexbind-mode)

(defun help/elisp-eval-buffer ()
  "Intelligently evaluate an Elisp buffer."
  (interactive)
  (help/save-all-file-buffers)
  (eval-buffer))

(defun help/elisp-mode-local-bindings ()
  "Helpful behavior for Elisp buffers."
  (local-set-key (kbd "s-l eb") #'help/elisp-eval-buffer)
  (local-set-key (kbd "s-l ep") #'eval-print-last-sexp)
  (local-set-key (kbd "s-l td") #'toggle-debug-on-error)
  (local-set-key (kbd "s-l mef") #'macroexpand)
  (local-set-key (kbd "s-l mea") #'macroexpand-all)
  (local-set-key (kbd "s-:") #'my-eval-expression)
  (local-set-key (kbd "#") #'endless/sharp))

(defun help/emacs-lisp-mode-hook-fn ()
  (interactive)
  (help/elisp-mode-local-bindings)
  (lexbind-mode)
  (eldoc-mode)
  (diminish 'eldoc-mode))

(setq ielm-noisy nil)

(setq ielm-prompt "𝔼LISP> ")

(setq ielm-dynamic-return nil)

(setq ielm-dynamic-multiline-inputs nil)

(defun help/ielm-mode-hook-fn ()
  "HELP customizations."
  (interactive)
  (help/ielm-auto-complete))
#+END_SRC

*** Keybinding
    :PROPERTIES:
    :ID:       3A6B16EC-870A-4EFE-935A-C03F8DFB67BF
    :END:

#+NAME: 7CEA216B-6A18-47F6-B1DE-327CFA8A591A
#+BEGIN_SRC emacs-lisp :results output silent
(define-key emacs-lisp-mode-map (kbd "s-p") #'describe-thing-in-popup)
#+END_SRC

** Org-Mode
  :PROPERTIES:
  :noweb-ref: Hacking-Literate-Programming-Org-Mode
  :ID:       EBDA3D1C-536F-4252-AE26-32A3FDF5326C
  :END:

When source blocks are evaluated, their results get stored in a result area,
typically for display. If the results are small, they are displayed with colons
instead of an =example= block. Instead, *always* place them in an
example block. This makes exports more consistent and other Org-Mode features seem
to behave more predictably.

#+NAME: AB26182E-A169-4FB9-BA68-E9F7231069C1
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-babel-min-lines-for-block-output 0)
#+END_SRC

Configure Org-Mode to manage it's Source-Block backed buffers the same as the
rest of this system.

#+NAME: 8F3861FD-B2F6-4618-8E70-026316855E67
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-edit-src-auto-save-idle-delay 0)
(setq org-edit-src-turn-on-auto-save nil)
#+END_SRC

Update in-buffer images after Source-Block execution. This is a programming task.
That is why it is under this heading and Evaluation. This is a setting configuring
how the results of evaluation are refreshed in EMACS.

#+NAME: 11B7C941-8AA4-471A-B4A4-BCEBFE850206
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/org-babel-after-execute-hook ()
  "HELP settings for the `org-babel-after-execute-hook'.

This does not interfere with exports.

Attribution: URL `https://lists.gnu.org/archive/html/emacs-orgmode/2015-01/msg00534.html'"
  (interactive)
  (org-redisplay-inline-images))

(add-hook 'org-babel-after-execute-hook #'help/org-babel-after-execute-hook)
#+END_SRC

Never "automatically" evaluate a source block.

#+NAME: 9947D738-D140-4CBF-BB6D-21E2FF58BD24
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Make it unpleasant for Sysop to modify source-block outside of a source-block
backed buffer. The next step is to write some code to prevent modifying
source-blocks outside of that place.

#+NAME: 6CE707AD-A340-4B63-B747-8692E0DFF41C
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-src-tab-acts-natively nil)
#+END_SRC

My personal TODO workflow.

#+NAME: BB8A752F-713B-4450-98DC-CE04957577EF
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "BLOCKED" "REVIEW" "DONE")))
#+END_SRC

When running in a GUI, I would like linked images to be displayed inside of
Emacs.

#+NAME: 548D2D49-98E0-456B-91BC-37D0C0BC3557
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-startup-with-inline-images (display-graphic-p))
#+END_SRC

Use Ido completion in Org-Mode.

#+NAME: CE97A1D8-07E2-4445-80B9-3C91ACFE7FB8
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-completion-use-ido t)
(setq org-outline-path-complete-in-steps nil)
(setq org-completion-use-iswitchb nil)
#+END_SRC

Org-Mode lets you use single letter commands to do stuff on headers. I like to
use =c= for cycling the header expansion.

#+NAME: 232DFCF9-BFC7-4022-8B93-09F323CB1BA8
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-use-speed-commands t)
#+END_SRC

Ask before execution of shell links. This might seem like an Evaluation
activity. It is. It is interactive.

#+NAME: F5ABA576-FB0D-4FCE-A000-AA5E38B7EB3D
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-confirm-shell-link-function 'y-or-n-p)
#+END_SRC

Ask before execution of Emacs-Lisp.

#+NAME: 13BBCE85-2D3B-4903-8098-EB565B5CB708
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-confirm-elisp-link-function 'y-or-n-p)
#+END_SRC

Make sure that incomplete TODO entries prevent the enclosing parent from every
turning to DONE.

#+NAME: 4AE6A326-034C-475A-BC95-877D528A94D6
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-enforce-todo-dependencies t)
#+END_SRC

Allow the mouse to do Org-Mode things like expand and collapse headings.

#+NAME: BA1565BE-2BF1-4121-96BD-A3F7462676CC
#+BEGIN_SRC emacs-lisp :results output silent
(when (display-graphic-p)
  (use-package org-mouse))
#+END_SRC

Use a real ellipsis to render an ellipsis for Org-Mode stuff like showing that a
header is collapsed.

#+NAME: 42F9CE2D-591D-4BDD-998E-C85E0B7B5DF5
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-ellipsis "…")
#+END_SRC

It is easy to see indentation of headlines without having to count asterisks, so
don't show them, only show the significant and last one.

#+NAME: A0FB5129-6EF9-4D5F-A35A-CB5505C8FD6F
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-hide-leading-stars t)
#+END_SRC

Display emphasized text as you would in a WYSIWYG editor.

#+NAME: 4FDB1A19-4906-48EE-B7CB-26B3E9301964
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-fontify-emphasized-text t)
#+END_SRC

Use Unicode characters to visualize things like right arrow eg \rarr . Most of those
symbols are correctly exported to the destination format. The most obvious is
this example in LaTeX versus Text.

#+NAME: D2453829-D976-4FE0-B517-7CCD8C3C1A2C
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-pretty-entities t)
#+END_SRC

Highlight LaTeX and related markup.

Normally, I don't do any syntax highlighting, as I believe that should be
delegated to source buffers, thinking that to do otherwise is distracting.
However, I already do configure subscripts and Greek letters to be displayed
with syntax highlighting, because I want to indicate to the human reader that
they are special, and specifically /not/-Unicode. Do the same thing for LaTeX
and related markup.

#+NAME: B5A535CA-E024-4592-A787-734032E48860
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-highlight-latex-and-related '(latex script entities))
#+END_SRC

Allow "refactoring" of Footnotes between documents.

#+NAME: 834535C5-DCEA-47D3-B251-76DADE4CE897
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-footnote-define-inline t)
(setq org-footnote-auto-label 'random)
(setq org-footnote-auto-adjust nil)
(setq org-footnote-section nil)
#+END_SRC

This is an amazingly easy way to screw up your document. The more you edit
org docs, the more you realize how you must truly protect it.

#+NAME: 939BFF91-F7AC-446A-B797-6B294D364082
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-catch-invisible-edits 'error)
#+END_SRC

Though I am not delving deep, it is hard not to want to customize some stuff
and perhaps this is the start. Even though I enabled this, I don't think that I
ever used it.

#+NAME: D8426EE3-702E-4008-B2F5-0A839E0B9C27
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-loop-over-headlines-in-active-region t)
#+END_SRC

It is /almost always/ faster to work with org documents when they are fully
expanded. Anyway, the structure cycling makes it really, really easy to get an
/outline view/ again.

#+NAME: EB229153-0540-4EFE-BB44-D44EE0D0E9B8
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-startup-folded "nofold")
#+END_SRC

When images are displayed in the buffer, display them in their actual size. As
the operator, I want to know their true form. Any modifications required for
export will be stated explicitly.

#+NAME: 862CCD19-46D8-47E9-85CF-43F0EE9E8404
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-image-actual-width t)
#+END_SRC

Hide the delimeter for emphasized text. Unicode characters break table
alignment.

#+NAME: 4F8C7477-3CE5-4C83-9C00-FCBAAECEB5E8
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-hide-emphasis-markers t)
#+END_SRC

Realign tables automatically.

#+NAME: 78196A51-0117-4C66-8616-1508D81568A7
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-startup-align-all-tables t)
#+END_SRC

Always use Unicode checkboxes.

#+NAME: 0102E34E-3098-48E9-AAB9-F5433AE37D66
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-html-checkbox-type 'unicode)
#+END_SRC

You may display syntax highlighting for code in source blocks. I don't.

#+NAME: A1636BE6-8477-4085-BB14-E0870A19A440
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-src-fontify-natively nil)
#+END_SRC

Never indent the contents of a source-block automatically.

#+NAME: EA9E78DF-18FA-477B-8CFF-CF921479CD40
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-edit-src-content-indentation 0)
#+END_SRC

When edit mode is exited, the option exists to automatically remove empty
opening and closed lines for the source block. Never do this. The thing is that
I forgot why. When I was working on a recent analysis with R there was a
space appearing in the opening and closing line of the source block that didn't
appear in the source editing buffer. That surprised me. I am sure that I've
forgotten why this is the case. I don't like it because you add a bunch of
empty lines in the source buffer for every source block. With that in mind I
will enable this feature and try it out again.

#+NAME: 59E79DBC-FDA4-4F1A-9306-DB9204233A7C
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-src-strip-leading-and-trailing-blank-lines t)
#+END_SRC

The source block buffer may be configured to appear in a few different places.
For a while I really liked =reorganize-frame= because sometimes you want to be
able to see the code you are editing in edition to the rest of the document. At
least that is what I am telling myself. Once I learned you could change it I
realized that 1 I should have asked if it could be changed and 2 I should have
changed it. The flow that I've got configured here is that you are either in the
source document where code blocks are not highlighted or you are in the source
block so you are editing in a buffer that is full-fledged HELP. That is the best
way so you can focus completely on each task at hand in the ideal mode for that
task. Anything else results in distractions and errors.

#+NAME: 767547FC-FCB3-433C-AC2E-4240D040F5F8
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-src-window-setup 'current-window)
#+END_SRC

Org-Mode has a really nice feature that hitting =C-c C-c= will generally just do
the /right thing/. It is really nice. That feature extends to source blocks of
course. Ironically I had a typo here, typing /of curse/ instead of /of course/.
The thing is that you really, really need to develop a personal workflow, and
then configure the tool to enable it. The more I learn about Org-Mode, the more
leery I am about making it really easy to evaluate code. I want it to be a
really, really specific and decided action to evaluate a code block, so don't
make it so easy as =C-c C-c=.

#+NAME: C0FFD815-3AB7-4101-B1E8-D73A10026CB4
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
#+END_SRC

Configure the system to successfully use ~vc-next-action~ while editing a
Source-Block. Before perfoming the edit, check if it is Org-Mode and
exit the Source-Block Buffer (SBB). If this system stays in the SBB
when calling ~vc-next-action~ the entire contents of the buffer are escaped
as Org-Mode source code upon returning to the source buffer (this). Do the same
thing before any version control modes that would result in the same condition.

#+NAME: C1F1C610-AC69-40E8-AD2F-EB6C849B40CB
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/vc-next-action ()
  "If in org source block, exit it before `vc-next-action'."
  (interactive)
  (when (condition-case nil
            (org-src-edit-buffer-p)
          (error nil))
    (org-edit-src-exit))
  (vc-next-action nil))
(defun help/magit-status ()
  "If in org source block, exit it before `magit-status'."
  (interactive)
  (when (condition-case nil
            (org-src-edit-buffer-p)
          (error nil))
    (org-edit-src-exit))
  (call-interactively 'magit-status))
#+END_SRC

Never use the original version.

#+NAME: 727834EF-DF94-4190-98AC-B791FCCDE7E3
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-edit-src-code nil)
#+END_SRC

Easily wrap text in Org-Mode. This is not used by the rest of HELP because
Smartparens provides that functionality for programming modes.

#+NAME: 593A037F-9615-47CA-9C13-5BC88074F24D
#+BEGIN_SRC emacs-lisp :results output silent
(use-package wrap-region
  :ensure t
  :config
  :diminish wrap-region-mode)
#+END_SRC

*Bold*.

#+NAME: 8055DBFC-C839-4EED-BA59-E56D2E05F027
#+BEGIN_SRC emacs-lisp :results output silent
(wrap-region-add-wrapper "*" "*" nil 'org-mode)
#+END_SRC

/Italic/.

#+NAME: 15774582-183E-4625-9BDB-E36D3A7B2AFE
#+BEGIN_SRC emacs-lisp :results output silent
(wrap-region-add-wrapper "/" "/" nil 'org-mode)
#+END_SRC

=Verbatim=.
#+NAME: F3B847CA-C89F-4566-98C3-240514B37447
#+BEGIN_SRC emacs-lisp :results output silent
(wrap-region-add-wrapper "=" "=" nil 'org-mode)
#+END_SRC

~Code~.

#+NAME: 0E2ECE84-87AB-4B18-9929-6E752C88118C
#+BEGIN_SRC emacs-lisp :results output silent
(wrap-region-add-wrapper "~" "~" nil 'org-mode)
#+END_SRC

+Strike-Through+.
#+NAME: 0EBE9F71-59AC-4D54-B792-AFC3F78985D8
#+BEGIN_SRC emacs-lisp :results output silent
(wrap-region-add-wrapper "+" "+" nil 'org-mode)
#+END_SRC

Minimize Macro text.

#+NAME: 6C80DBCA-AE28-4FE3-91E3-825E642735BA
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-hide-macro-markers t)
#+END_SRC

*** Keybindings
    :PROPERTIES:
    :ID:       0AA3F69B-F5F1-48DA-B8F7-B7C92CD30DB1
    :END:

Started questioning why after hitting RETURN while in lists I have to hit TAB to
get indented properly. Kind of a dead giveaway that I should be
return-and-indenting! Looked at =org-return= to find that it has an argument
about indenting and then saw that =org-return-indent= passes it for you. With that
in mind, RETURN is bound to that now. Now HELP has four different kinds of
"returns" in Org in order of likelihood of usage:

- org-return-indent :: Make it really easy to work in existing list items,
  headings, and tables
  - This is listed first because I often go back to modify entries
  - <return> because it is used the most
- org-meta-return :: Make it really easy to add new list items, headings, and
  table contents
  - M-<return> because the binding comes with Org
- electric-indent-just-newline :: For when I want to break out of the default
  Org indentation to start working at the beginning of the line for example when
  I'm done working in a list or have just created a new heading
  - C-M-<return> because it is next step "lower" in the binding
- help/smart-open-line :: When I want to insert a new line between the current
  and next line then position the cursor correctly indented at the start of it.
  - s-<return> because it is that is the last place in the modifier key chain

#+NAME: 8C7E90AC-C7EB-4A43-9377-C3C85CE51849
#+BEGIN_SRC emacs-lisp :results output silent
(help/not-on-gui
 (define-key org-mode-map (kbd "RET") #'org-return-indent)
 (define-key org-mode-map (kbd "C-M-RET") #'electric-indent-just-newline))
(help/on-gui
 (define-key org-mode-map (kbd "<return>") #'org-return-indent)
 (define-key org-mode-map (kbd "C-M-<return>") #'electric-indent-just-newline))
#+END_SRC

#+NAME: E65CF1F6-F56C-4A1A-BB45-5E530FA93C04
#+BEGIN_SRC emacs-lisp :results output silent
(define-key org-mode-map (kbd "s-7") #'org-babel-load-in-session)
(define-key org-mode-map (kbd "s-8") #'org-babel-switch-to-session)
(define-key org-mode-map (kbd "s-9") #'org-babel-switch-to-session-with-code)
(define-key org-mode-map (kbd "s-j") #'org-babel-next-src-block)
(define-key org-mode-map (kbd "s-y") #'help/safb-org-babel-execute-subtree)
(define-key org-mode-map (kbd "s-u") #'help/safb-org-babel-execute-buffer)
(define-key org-mode-map (kbd "s-U") #'org-mark-ring-goto)
(define-key org-mode-map (kbd "s-k") #'org-babel-previous-src-block)
(define-key org-mode-map (kbd "s-i") #'help/safb-org-babel-tangle)
(define-key org-mode-map (kbd "s-l") #'help/safb-org-edit-src-code)
(define-key org-mode-map (kbd "s-o") #'org-babel-execute-src-block-maybe)
(define-key org-mode-map (kbd "s-;") #'org-babel-view-src-block-info)
(define-key org-mode-map (kbd "s-'") #'org-babel-open-src-block-result)
(define-key org-mode-map (kbd "s-p") #'help/safb-help/org-babel-demarcate-block)
#+END_SRC

#+NAME: 5186DD50-F693-4297-A164-192BEA685C6D
#+BEGIN_SRC emacs-lisp :results output silent
(defhydra help/hydra/right-side/org-mode (:color blue
                                                 :hint nil)
  "
_1_ SHA-1 _2_ export-all _4_ +imgs _5_ -imgs                   _8_ detangle _9_ igc  _0_ tglmcro
_q_ ←/w-code _w_ tbletfld _e_ g2nmrst _r_ g2nms-b _t_ g2s-b/hd      _u_ goto
_a_ inshdrgs _s_ oblobigst            _h_ dksieb
_c_ cksrcblk _b_ swtch2sessn _n_ n2sbtre _m_ xpndsrcblk"
  ("1" org-babel-sha1-hash)
  ("2" help/xprt-all)
  ("4" org-display-inline-images)
  ("5" org-remove-inline-images)
  ("8" org-babel-detangle)
  ("9" org-id-get-create)
  ("0" help/org-toggle-macro-markers)
  ("s" org-babel-lob-ingest)
  ("e" org-babel-goto-named-result)
  ("r" org-babel-goto-named-src-block)
  ("t" org-babel-goto-src-block-head)
  ("a" org-babel-insert-header-arg)
  ("h" org-babel-do-key-sequence-in-edit-buffer)
  ("m" org-babel-expand-src-block-maybe)
  ("c" org-babel-check-src-block)
  ("w" org-table-edit-field)
  ("n" org-narrow-to-subtree)
  ("u" org-goto)
  ("b" org-babel-switch-to-session)
  ("q" org-babel-switch-to-session-with-code))
(key-chord-define-global "hh" #'help/hydra/right-side/org-mode/body)
#+END_SRC

Safe all buffers before working with Exports.

#+NAME: BFF7A955-3107-4ED3-9022-CAB792E779EC
#+BEGIN_SRC emacs-lisp :results output silent
(define-key org-mode-map (kbd "C-c C-e") #'help/safb-org-export-dispatch)
#+END_SRC

Make =s-l= do the same thing to leave the Source-Block-Buffer.

#+NAME: B489F70A-F1B0-41A9-BB98-A5861A867547
#+BEGIN_SRC emacs-lisp :results output silent
(define-key org-src-mode-map (kbd "s-l") #'org-edit-src-exit)
#+END_SRC

Easily enter guillemots.

#+NAME: 46FE856B-D5C6-45B0-95D5-891211AC295C
#+BEGIN_SRC emacs-lisp :results output silent
(key-chord-define org-src-mode-map "<<" (lambda () (interactive) (insert "«")))
(key-chord-define org-src-mode-map ">>" (lambda () (interactive) (insert "»")))
#+END_SRC
** (Applied Mathematics)
   :PROPERTIES:
   :ID:       BE2550C9-231A-4824-BE6C-14231A971FE9
   :END:
** Emacs Speaks Statistics (ESS)
  :PROPERTIES:
  :noweb-ref: Hacking-Applied-Mathematics-ESS
  :ID:       CB6305D8-DDBB-4865-8CAD-3648B31B76DB
  :END:

#+NAME: E7AE32C1-42CC-482F-92D2-43DBD703500C
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ess
  :ensure t)
#+END_SRC

Display object documentation.

#+NAME: DC7E5F11-0C1A-4F9B-B6B1-2133C8B86617
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-eldoc-show-on-symbol t)
#+END_SRC

Data viewing:
- *Never* rely upon on the REPL for data viewing
  - Will mix up exploratory code with data
    - Can't easily distinguish between code and data
    - Distracting you
    - Breaking your flow
- Sometimes
  - You end up somewhere
    - And the =ess= buffer cursor is at the top!
    - No problem, call =ess-switch-to-end-of-ESS=
- Make it easier to know what object values are.
  - =ess-describe-object-at-point=

#+NAME: 7EF0A0EB-FBE6-4411-A0E5-F0B37AF1743D
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-describe-at-point-method 'tooltip)
#+END_SRC

Always start =ess= within the curent =emacs= frame, it doesn't need to be separate.

#+NAME: 2FB01FE3-71DD-4FB6-AEC9-E4499AF5E007
#+BEGIN_SRC emacs-lisp :results output silent
(setq inferior-ess-same-window nil)
(setq inferior-ess-own-frame nil)
#+END_SRC

Help buffers all belong in the same frame.

#+NAME: 47202D29-D75E-426E-AD24-7218BB5F2673
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-help-own-frame nil)
#+END_SRC

When commands are executed, display their output within the current buffer,
rather than to a new dedicated buffer for them.

#+NAME: FCB70937-540C-4CC9-B0B7-63E0F0626E25
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-execute-in-process-buffer t)
#+END_SRC

When you cycle between a the REPL buffer and the script, you get to the process
buffer, you will go to the end of the buffer. This setting is specifically to
handle a buffer that is scrolling when you want to see the last result and will
scroll back after the fact to see the history.

#+NAME: 36F5EACF-A2AA-42D2-B7B7-EC5C07B2E1A4
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-switch-to-end-of-proc-buffer t)
#+END_SRC

Use typical auto completion in buffers here, but don't do it when the
next char is a symbol or closed paren.

#+NAME: 0274002E-BB6F-4131-B6B2-5531D9F630F4
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-tab-complete-in-script t)
(setq ess-first-tab-never-complete 'symbol-or-paren-or-punct)
#+END_SRC

Use =ido= completion whenever possible.

#+NAME: 043204D6-59AA-4DB4-ABF4-03D2E8D61154
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-use-ido t)
#+END_SRC

Use =eldoc= for this mode. Always show it when the point is on a symbol.
Try to keep help strings at 10 chars or less.

#+NAME: 6C6DC638-6869-4534-AA0D-746263D47FD5
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-use-eldoc t)
(setq ess-eldoc-show-on-symbol t)
(setq ess-eldoc-abbreviation-style 'normal)
#+END_SRC

These functions are metioned, and I am not sure where or how to use them yet,
but Vitalie Spinu mentioned them as being useful:

- =comint-previous-matching-input-from-input=
- =comint-history-isearch-backward-regexp=

For a while I used =ess-eval-buffer-and-go=, but now I know that it is insanely
faster to use =ess-eval-buffer= instead. Previously I've read people saying that,
and it is true.

*Philosophy*

The current =ESS= maintainers philosophies about how to maintain an R code-base
make sense to me and are virtually the same as my own. Quite simply, the rule is
that the code artifacts are the single source of system definition. Consequently,
the system should be configured in this manner:

We want to keep dump files after loading them; never delete them. The idea
is that if we use them, then they are a valid part of the system definition and
need to be kept.

#+NAME: F0740222-26A5-4DA0-9C60-6EC04DCCDDFB
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-keep-dump-files +1)
#+END_SRC

=ESS= allows us to quite easily modify live R objects and functions. It provides
this functionality via =ess-dump-object-into-edit-buffer=. These changes are
considered to be experimental, and not part of the master record according to
our philosophy. As such, we don't care to know that these new versions ever
existed and their record will be forgotten from history. In other words, that
new, modified version of the object or function, is never saved to a file for
later reuse.

#+NAME: 9FD6F694-08ED-4E08-96FE-28634970388B
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-delete-dump-files nil)
#+END_SRC

Since our systems are entirely file-based, the entirety of the system most
likely lives in different files. Before loading any file for sourcing, save
any ESS source buffers. This approach is in addition to two other things:
(1) Emacs is auto-saving every file buffer quite frequently and (2) there is
advice before every manual =eval= call so that the buffers and their files stay
in sync. Yes, it is really that important.

#+NAME: 252643D9-4FC2-4037-BAF8-5F6043D02C5A
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-mode-silently-save +1)
#+END_SRC

=ESS= executes code in another process. That is no secret. When displaying output
from that code running in another process though, it can look like Emacs is
locking up. That is not the case [fn:2fbb65bd: https://stackoverflow.com/questions/2770523/how-can-i-background-the-r-process-in-ess-emacs].
What is happening that Emacs is waiting for the output. Configure this mode to
continue to accept user input, which is obviously critical, but don't wait for
the process to provide its output. Instead, all output is printed after the last
input lines. What we gain is perceived speed, and what we lose is the nice
sequential this/that/this/that we get from a typical REPL interaction. As I
write this, I'm not totally sure how this will work, but the documentation and
post are consistent and describe what I had wanted here so I will give it a try
and see how it goes.

#+NAME: B46D5051-6F7D-4BC9-8A47-DDE14B41C3A5
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-eval-visibly 'nowait)
#+END_SRC

** SAS (ESS)
  :PROPERTIES:
  :noweb-ref: Hacking-Applied-Mathematics-ESS-SAS
  :ID:       2442E555-0F82-48E6-96EA-2ABB5C9CC666
  :END:

** R (ESS)
  :PROPERTIES:
  :noweb-ref: Hacking-Applied-Mathematics-ESS-R
  :ID:       1183D35B-77FC-4CFD-9BAA-4F7656AD8943
  :END:

Enable a debugger.

#+NAME: 77E7570C-C08D-42B4-996D-F38C9F91C248
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-use-tracebug t)
#+END_SRC

Configure debugger search path per-project.

#+NAME: F21989AE-7351-49A7-9B1F-6926F7298182
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-tracebug-search-path '())
#+END_SRC

Easily nevigate errors.

#+NAME: FAFD7683-E1BF-43CF-B862-B90029FBB319
#+BEGIN_SRC emacs-lisp :results output silent
(define-key compilation-minor-mode-map [(?n)] #'next-error-no-select)
(define-key compilation-minor-mode-map [(?p)] #'previous-error-no-select)
#+END_SRC

Diminish watched variable font-size.

#+NAME: 08D73B43-0EAC-433E-A5C8-F4E89A5ADA12
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-watch-scale-amount -1)
#+END_SRC

When =ess= starts, or when R starts, it takes the current directory as its
working directory. This is totally fine; so don't ask what the working directory
should be.

#+NAME: CAA06F3F-C308-4C51-B5EA-84CB75C66DE7
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-ask-for-ess-directory nil)
#+END_SRC

My preference is for ESS to quit and not ask me whether or not I am sure. There
is an intentional line-break after the closing round bracket because that is the
approach of the original value here.

#+NAME: 4A9DDBA7-1715-45C8-A979-69725E37381E
#+BEGIN_SRC emacs-lisp :results output silent
(setq inferior-ess-exit-command "q('no')
")
#+END_SRC

Visualize just about anything with ~ess-R-object-popup~.

#+NAME: A0EA1072-089F-4C7A-AE35-7C05D090097E
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ess-R-object-popup
  :ensure t)
#+END_SRC

Rdired is another way to work with object:
- =ess-rdired=
- View, delete, plot, and update buffer (ala /revert/) are single key commands

#+NAME: FCFBA6B6-B76D-4230-93BE-1DDFE411FF82
#+BEGIN_SRC emacs-lisp :results output silent
(autoload 'ess-rdired "ess-rdired")
#+END_SRC

Visualize data frames better:
- =ess-R-dv-ctable=
- =ess-R-dv-pprint=

#+NAME: B2C94B37-92A9-4320-A5EE-BAAD81FAB1AD
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ess-R-data-view
  :ensure t)
#+END_SRC

inlineR
- /Not/ a competitor to =org-mode=
- Ultra lightweight LP, really

#+NAME: E49028CA-9CE0-41FD-9B1E-004C3D68445B
#+BEGIN_SRC emacs-lisp :results output silent
(use-package inlineR
  :ensure t)
#+END_SRC

Documentation:
- Whole section on native documentation; I'll re-visit as needed.
- Roxygen, too.

=ess-developer= helps you to easily work within specific name-spaces.

Store history files and dump files in a single known location. If that location
doesn't exist, then make it.

#+NAME: D0976061-7DE0-4441-898F-4014547FFB29
#+BEGIN_SRC emacs-lisp :results output silent
(setq help/r-dir "~/.R/")
(defun help/make-warn-R-dir ()
  "Handle of R directory misconfiguration."
  (interactive)
  (unless (f-directory? help/r-dir)
    (progn
      (message "Couldn't find %S… creating it." help/r-dir)
      (f-mkdir help/r-dir))))
(help/make-warn-R-dir)
(setq ess-history-directory help/r-dir)
(setq ess-source-directory help/r-dir)
#+END_SRC

Since I'm using R for everything, configure /everything/ to be using R.

#+NAME: 931F150B-01FB-455C-B6F9-D730BEC162FF
#+BEGIN_SRC emacs-lisp :results output silent
(setq inferior-ess-program "R")
(setq inferior-R-program-name "R")
(setq ess-local-process-name "R")
#+END_SRC

Handle rdoc and rmd files, though I have never used them... yet.

#+NAME: 5D17A7DE-ECAF-4FAE-8425-AD43FEDD2D45
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'auto-mode-alist '("\\.rd\\'" . Rd-mode))
(add-to-list 'auto-mode-alist '("\\.Rmd$" . r-mode))
#+END_SRC

Make it really easy to search the R archives for anything.

#+NAME: 8122AAC4-008A-454B-A3F6-4F9B11F7278E
#+BEGIN_SRC emacs-lisp :results output silent
(local-set-key (kbd "C-c C-. S") #'ess-rutils-rsitesearch)
#+END_SRC

Make it really easy to do common stuff for R with good keybindings.

#+NAME: 17FD6489-F187-4667-9E96-5ECF3DAED95B
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ess-rutils
  :config
  (setq ess-rutils-keys t))
#+END_SRC

=r-autoyas= does argument completion. I had it working nice, and didn't use it for
a while, and now it doesn't work. This needs some TLC.

#+NAME: 588C7A99-908C-4CD9-A1BE-1818938E2D13
#+BEGIN_SRC emacs-lisp :results output silent
(use-package r-autoyas
  :ensure t
  :config
  (setq r-autoyas-debug t)
  (setq r-autoyas-expand-package-functions-only nil)
  (setq r-autoyas-remove-explicit-assignments nil))
#+END_SRC

Save two spaces showing function information in the mini-buffer.

#+NAME: 5D526636-47A1-463B-9466-4DD240C7F382
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-R-argument-suffix "=")
#+END_SRC

Don't use the default assignment binding and allow underscores in names.

#+NAME: 9E931868-056E-49E6-A0AE-D1447BA27039
#+BEGIN_SRC emacs-lisp :results output silent
(setq ess-S-assign-key (kbd "C-,"))
(ess-toggle-S-assign-key t)
(ess-toggle-underscore nil)
#+END_SRC

Don't save the workspace when you quit R and don't restore *ANYTHING* when you
start it, either. This adheres to the philosopy that the system is file based.

#+NAME: 4B373CC7-EF17-4900-87BE-E38995585C46
#+BEGIN_SRC emacs-lisp :results output silent
(setq inferior-R-args "--no-save --no-restore")
#+END_SRC

R mode hook.

#+NAME: E5F48F7A-E926-4FB0-92D2-92204808630E
#+BEGIN_SRC emacs-lisp :results output silent
(defun help/R-mode-hook-fn ()
  (local-set-key (kbd "s-6") #'ess-switch-to-end-of-ESS)
  (local-set-key (kbd "s-7") #'ess-rdired)
  (local-set-key (kbd "s-8") #'ess-R-dv-ctable)
  (local-set-key (kbd "s-9") #'ess-R-dv-pprint)
  (local-set-key (kbd "s-y") #'r-autoyas-expand)
  (local-set-key (kbd "s-o") #'ess-describe-object-at-point)
  (local-set-key (kbd "s-p") #'ess-R-object-popup)
  (local-set-key (kbd "C-.") #'(lambda () (interactive) (insert " -> ")))
  (key-chord-define-local "<<" #'(lambda () (interactive) (insert " <<- ")))
  (key-chord-define-local ">>" #'(lambda () (interactive) (insert " ->> ")))
  (key-chord-define-local "<>" #'(lambda () (interactive) (insert " %<>% ")))
  (local-set-key (kbd "C->") #'(lambda () (interactive) (insert " %>% ")))
  (r-autoyas-ess-activate)
  (help/turn-on-r-hide-show)
  (lambda () (add-hook 'ess-presend-filter-functions
                  (lambda ()
                    (warn
                     "ESS now supports a standard pre-send filter hook. Please update your configuration to use it instead of using advice."))))
  (ess-set-style 'RRR))

(add-hook 'R-mode-hook #'help/R-mode-hook-fn)

(defun help/turn-on-r-hide-show ()
  "Attribution: SRC https://github.com/mlf176f2/EmacsMate/blob/master/EmacsMate-ess.org"
  (when (string= "S" ess-language)
    (set (make-local-variable 'hs-special-modes-alist) #'((ess-mode "{" "}" "#" nil nil)))
    (hs-minor-mode 1)
    (when (fboundp 'foldit-mode)
      (foldit-mode 1))
    (when (fboundp 'fold-dwim-org/minor-mode)
      (fold-dwim-org/minor-mode))))

(defun help/Rd-mode-hook-fn ()
  (help/R-mode-hook-fn))

(add-hook 'Rd-mode-hook #'help/Rd-mode-hook-fn)

(defun help/inferior-ess-mode-hook-fn ()
  (help/R-mode-hook-fn))

(add-hook 'inferior-ess-mode-hook #'help/inferior-ess-mode-hook-fn)

(defun help/ess-rdired-mode-hook-fn ()
  "Personal customizations."
  (interactive)
  (turn-on-stripe-buffer-mode)
  (stripe-listify-buffer))

(add-hook 'ess-rdired-mode-hook #'help/ess-rdired-mode-hook-fn)
#+END_SRC

** YASnippet
  :PROPERTIES:
  :noweb-ref: Hacking-Applied-Mathematics-YASnippet
  :ID:       5C48A01F-D522-4AC9-A523-F8EE2E9EB384
  :END:

- Enable everywhere.
- Never expand with =TAB= *anywhere*.
  - Allow expansion to occur within fields.
- Load HELP snippets.
- Use Ido to handle user decisions.

#+NAME: 1827B724-7BC0-4228-8389-2B06F308D6AF
#+BEGIN_SRC emacs-lisp :results output silent
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode t)
  (help/not-on-gui (define-key yas-minor-mode-map (kbd "TAB") nil))
  (help/on-gui (define-key yas-minor-mode-map (kbd "<tab>") nil))
  (define-key yas-minor-mode-map (kbd "s-t") #'yas-expand)
  (help/not-on-gui (define-key yas-keymap (kbd "TAB") #'yas-next-field))
  (help/on-gui (define-key yas-keymap (kbd "<tab>") #'yas-next-field))
  (add-to-list #'yas-snippet-dirs "~/src/help/yasnippet")
  (yas-reload-all)
  (setq yas-prompt-functions '(yas-ido-prompt))
  :diminish yas-minor-mode)
#+END_SRC

** Structured Query Language (SQL)
   :PROPERTIES:
   :ID:       987C1C05-F880-4312-B902-5060208A3506
   :END:
** (Publishing)
   :PROPERTIES:
   :ID:       7D07C2F6-38B9-49BF-A584-B029CEED6141
   :END:
** TeX
  :PROPERTIES:
  :noweb-ref: Hacking-Publishing-TeX
  :ID:       E2A1BFA2-0246-4376-9A33-E35A8DE2E5A3
  :END:

#+NAME: B97EDF2E-0538-475A-AA0A-6C708DCCEC11
#+BEGIN_SRC emacs-lisp :results output silent
(use-package tex-site
  :ensure auctex
  :config
  (eval-after-load "tex"
    '(define-key TeX-mode-map (kbd "C-c C-c") #'help/safb-TeX-command-master)))
#+END_SRC

Save style info. This doesn't control the buffer save.

#+NAME: 2B0193C4-291A-4C5E-9FA0-36A80DE1D379
#+BEGIN_SRC emacs-lisp :results output silent
(setq TeX-auto-save t)
#+END_SRC

Parse on load.

#+NAME: 278E7DC2-6BD3-4F90-A4F2-25B9BE614981
#+BEGIN_SRC emacs-lisp :results output silent
(setq TeX-parse-self t)
#+END_SRC

Parse on save.

#+NAME: 10789FA5-E5AA-4F8C-BB0E-62307655F7AD
#+BEGIN_SRC emacs-lisp :results output silent
(setq TeX-auto-save t)
#+END_SRC

Use PDFTeX to generate both DVI and PDF files.

#+NAME: F89FBF57-D32D-45B0-B43F-D5A9EB489ABE
#+BEGIN_SRC emacs-lisp :results output silent
(setq TeX-PDF-mode t)
(setq TeX-DVI-via-PDFTeX t)
#+END_SRC

Don't prompt every time you run =C-c C-c= about saving the file, instead, just
save it.

#+NAME: A193F562-9E1C-49A2-982C-EBF7D9AFF32F
#+BEGIN_SRC emacs-lisp :results output silent
(setq TeX-save-query nil)
#+END_SRC

Load LCO files with AucTeX.

#+NAME: 083E953F-E95D-4596-98D1-C8554D451721
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'auto-mode-alist '("\\.lco?\\'" . TeX-latex-mode))
#+END_SRC

Culture-dependent typographical results.

#+NAME: 9FA4E728-0AB8-4A18-9EE8-DC4387E6DD08
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'org-latex-packages-alist '("english" "babel" t))
#+END_SRC

Palatino friendly mathematics fonts.

#+NAME: 6C50239B-2D5D-4022-8645-+BEGIN_SRC
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'org-latex-packages-alist '("osf" "mathpazo" t))
#+END_SRC

Small margins.

#+NAME: AA859065-4868-4A02-882E-AD5840B74349
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'org-latex-packages-alist '("margin=0.5in" "geometry" nil))
#+END_SRC

Standard LaTeX class options.

#+NAME: E6559423-7FC3-4924-A38B-FE4C9CA8CD91
#+BEGIN_SRC emacs-lisp :results output silent
(defvar help/ltx-cls-opt "paper=letter, fontsize=10pt, parskip")
#+END_SRC

Standard article class.

#+NAME: 6C864008-5602-4E73-A8DE-6DDE5DFA1EE0
#+BEGIN_SRC emacs-lisp :results output silent
(eval-after-load "ox-latex"
  '(add-to-list 'org-latex-classes
                `("help-article"
                  ,(concat "\\documentclass["
                           help/ltx-cls-opt
                           "]{article}"))))

(setq org-latex-default-class "help-article")
#+END_SRC

Use "Smartquotes".

#+NAME: 9B903D8E-6E42-41BB-83AA-EBE64298A7C8
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-export-with-smart-quotes t)
#+END_SRC

** KOMA-Script
  :PROPERTIES:
  :noweb-ref: Hacking-Publishing-KOMA
  :ID:       BFF1402E-98D4-4F36-ACCB-B1E88A3EB2D9
  :END:

I enjoy writing letters. I enjoy reading letters. LaTeX produces letters that
are easy to print and read. Org provides a [[http://orgmode.org/worg/exporters/koma-letter-export.html][KOMA Script exporter]] for [[https://www.ctan.org/pkg/koma-script?lang%3Den][KOMA-script]].
The Org documentation mentions that the user should read the [[http://orgmode.org/cgit.cgi/org-mode.git/plain/contrib/lisp/ox-koma-letter.el][ox-koma-letter.el]]
header documentation.

The [[https://www.ctan.org/pkg/babel?lang%3Den][babel]] packages is mentioned in the Org documentation. The package
documentation explains that it should be used with LaTeX, but not XeTeX. Some
time ago I decided to stick with LaTeX. This decision needs documentation. This
system leans towards LuaTeX because of its Unicode support and sticks with
PDFLaTeX because of its broad acceptance. Those two goals are at odds with each
other.

Load the KOMA exporter.

#+NAME: C2C100F1-B302-4BC7-8633-A79BCBFE1FC7
#+BEGIN_SRC emacs-lisp :results output silent
(eval-after-load "ox" '(require 'ox-koma-letter))
#+END_SRC

- Understanding KOMA and how to use it
  - There are 4 ways to set letter metadata, listed "from the most specific to
    the most general" (not sure exactly what this statement means, and the conclusion of my notes tries to make sense of what is really going on here and what is the best way to do things)
    - Org option lines (ORG)
    - Separate Org latex classes (LTX)
    - Emacs Lisp variables (LISP)
    - Letter Class Option files (LCO)
- Notes and thoughts on the ways to use it
  - LTX
    - By following the setup directions, you do this, creating "help-letter" class
    - Familiar and easy if you already know LaTeX
      - At some point in your workflow, you *must* define a class to use, anyway
    - Very easy to do, just define the class template and set =org-koma-letter-default-class=
  - ORG
    - Simple way that makes it very easy to just focus on the document content
    - This metadata takes highest priority in the workflow
      - So you should set your typical defaults in LISP or LCO and customize it
        here. This is exactly what I wanted to know.
      - This lets you do your tweaking in each unique file while relying on the
        most common defaults defined elsewhere
  - LISP
    - Very familiar style of configuring things
  - LCO
    - LCO == Letter Class Option files
    - LCO files are TeX
    - They are included in the generated TeX source code from the letter
    - Gives *full* access to KOMA-Script
      - Big deal, because not everything is exposed through ORG or LISP
      - Also gives full access to any and all TeX and LaTeX code
    - LCO files are a KOMA-Script thing, so they are a LaTeX thing
    -
      #+begin_quote
      Letter metadata set in LCO files overwrites letter metadata set in Emacs
      variables but not letter metadata set in the Org file.
      #+end_quote
    - When you include multiple LCO files, they are evaluated LIFO. Properties
      are set as they first appear, and are not set again. Say you include
      "MyGeneralStuffForAnyLetter.lco" and then include
      "MyStuffSpecificToThisLetter.lco". The specific stuff will get set first.
      Then general stuff will get set last.
      - Surely there is a better way to phrase this. I will work on that.
- Recommendations
  - What is the easiest way to start using KOMA-Script based on what you know
    today?
  - If you don't know any of the approaches
    - Then choose between learning LaTeX and Org
  - If you only know LaTeX
    - Then you will use the LTX/LCO metadata approach
  - If you only know ORG
    - Then you will use the ORG metadata approach
  - If you only know ORG and LISP
    - Then you will use the LISP approach for general metadata and the ORG
      approach specific metadata
  - If you know LTX/LCO, ORG, and LISP
    - Then you have total flexibility
    - The fact is that
      - ORG settings always trump LTX/LCO and LISP
      - LISP settings are a subset of all of the settings available in
        KOMA-Script, so you will always have to fall back to LTX/LCO if you want
        to use unexposed features
      - LCO files are just plain old LaTeX, which you already know
    - So the best thing to do
      - Is to use ORG for letter-specific settings
      - And LTX for general settings
      - Everything is a lot simpler this way because
        - One less metadata approach to keep track of
        - All KOMA-Script features are present
        - Need to learn details of KOMA-Script package anyway

Configure the default class.

[[https://tex.stackexchange.com/questions/102922/how-can-i-get-us-letter-output-from-koma-scripts-scrlttr2-class][This]] post explains how to default the US letter size. That is the likely default
for my printed correspondence.

#+NAME: 05968019-B83F-4F5B-ACF7-4CFF10CB8690
#+BEGIN_SRC emacs-lisp :results output silent
(eval-after-load "ox-koma-letter"
  '(progn
     (add-to-list 'org-latex-classes
                  `("help-letter"
                    ,(concat "\\documentclass["
                             help/ltx-cls-opt
                             "]{scrlttr2}")))

     (setq org-koma-letter-default-class "help-letter")))
#+END_SRC

There are two formats for the letters: [[http://orgmode.org/w/?p%3Dworg.git%3Ba%3Dblob%3Bf%3Dexporters/koma-letter-new-example.org%3Bh%3D180a9a0e10dd8f7483a67946daf36732c316f821%3Bhb%3D180a9a0e10dd8f7483a67946daf36732c316f821][heading-based]] and [[http://orgmode.org/w/?p%3Dworg.git%3Ba%3Dblob%3Bf%3Dexporters/koma-letter-example.org%3Bh%3De21b8b00c3e895be9dd573d02ea84b08796296a3%3Bhb%3De21b8b00c3e895be9dd573d02ea84b08796296a3][property-based]].

Set up my default LCO files.

#+NAME: EFFC0DFD-168F-42F5-9405-BAECD7EC5CB4
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-koma-letter-class-option-file "UScommercial9 KomaDefault")
#+END_SRC

** Texinfo
   :PROPERTIES:
   :ID:       F2C5CEB7-1252-4E6F-B192-C5D2D41A6D47
   :END:

Perhaps the [[https://lists.gnu.org/archive/html/emacs-orgmode/2015-07/msg00042.html][first]] document typeset with Org-Texinfo.

** Pandoc
   :PROPERTIES:
   :ID:       1E4AB0D4-F92E-48E6-9313-278C27DED142
   :END:

** Markdown
   :PROPERTIES:
   :noweb-ref: Hacking-Publishing-Markdown
   :ID:       748319ED-9F02-4A4D-BEE8-E71C462663FC
   :END:

Provide Github Flavored Markdown (GFM).

#+NAME: 02005BF5-AADC-45B1-AC64-67ECB028352A
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ox-gfm)
#+END_SRC

Program GFM.

#+NAME: 8A4DB408-7888-4705-AB2B-C7EED9262DF2
#+BEGIN_SRC emacs-lisp :results output silent
(use-package markdown-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
  (setq markdown-coding-system "utf-8"))
#+END_SRC

** Blog (WordPress)
   :PROPERTIES:
   :noweb-ref: Hacking-Publishing-Wordpress
   :ID:       F5E33EB2-2E26-435C-85F6-26CB7CE7FC56
   :END:

#+BEGIN_QUOTE
An elisp implementation of clientside XML-RPC
#+END_QUOTE

#+NAME: E99598C8-D394-484B-A7FB-333FA2544CB0
#+BEGIN_SRC emacs-lisp :results output silent
(use-package xml-rpc
  :ensure t)
#+END_SRC

#+BEGIN_QUOTE
Weblog maintenance via XML-RPC APIs
#+END_QUOTE

#+NAME: 79F63BAD-0CD7-4A97-8A7D-CBAA51BB48E1
#+BEGIN_SRC emacs-lisp :results output silent
(use-package metaweblog
  :ensure t)
#+END_SRC

#+BEGIN_QUOTE
Blog from Org mode to wordpress
#+END_QUOTE

#+NAME: DF522DDF-4A71-4D8B-B6F9-9BD6F11EB832
#+BEGIN_SRC emacs-lisp :results output silent
(use-package org2blog
  :ensure t)
#+END_SRC

Org2Blog depends on Org-Mode. This system loads Org-Mode from Git. Enter the
=ELPA= cache directory and delete it.

This system works with WisdomAndWonder. It keeps its posts separate giving focus
to each Web.

#+NAME: 9C1EAE6B-9D05-43FB-AC35-7FBFE6CB4F7E
#+BEGIN_SRC emacs-lisp :results output silent
(setq org2blog/wp-track-posts nil)
#+END_SRC

Configure Org2Blog.

#+NAME: BCA2FE29-930C-4E66-A662-17FF451D1591
#+BEGIN_SRC emacs-lisp :results output silent
(setq org2blog/wp-blog-alist
      '(("wisdomandwonder"
         :url "http://www.wisdomandwonder.com/wordpress/xmlrpc.php"
         :username "admin"
         :default-categories ("Article" "Link")
         :confirm t
         :show 'show)))
#+END_SRC

** HTML
  :PROPERTIES:
  :noweb-ref: Hacking-Publishing-HTML
  :ID:       84F673DF-2E6F-4BAA-8095-4A7586BB73FC
  :END:

#+NAME: 080472B8-EC76-4318-876A-A4A65547B056
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-html-doctype "html5")
#+END_SRC

Load Htmlize for HTML export. Use in-line CSS.

#+NAME: E26F69F8-ED1F-4F10-A291-6F9CB958FD18
#+BEGIN_SRC emacs-lisp :results output silent
(use-package htmlize
  :config
  (setq org-html-htmlize-output-type htmlize-output-type)
  (setq htmlize-output-type 'inline-css)
  (defvar help/htmlize-initial-fci-state nil
    "Variable to store the state of `fci-mode' upon calling `htmlize-buffer'.

Attribution: URL `http://permalink.gmane.org/gmane.emacs.orgmode/98153'.")
  (defvar help/htmlize-initial-flyspell-state nil
    "Variable to store the state of `flyspell-mode' upon calling `htmlize-buffer'.

Attribution: URL `http://permalink.gmane.org/gmane.emacs.orgmode/98153'.")

  (defun help/htmlize-before-hook-fn ()
    (when (fboundp 'fci-mode)
      (setq help/htmlize-initial-fci-state fci-mode)
      (when fci-mode
        (fci-mode -1))))
  (add-hook 'htmlize-before-hook #'help/htmlize-before-hook-fn)

  (defun help/htmlize-after-hook-fn ()
    (when (fboundp 'fci-mode)
      (when help/htmlize-initial-fci-state
        (fci-mode t))))
  (add-hook 'htmlize-after-hook #'help/htmlize-after-hook-fn))
#+END_SRC

** ASCII
   :PROPERTIES:
   :ID:       1F20F4EC-1D8B-402A-A0A9-504E733AEFDC
   :END:

#+NAME: B7F010D3-4A47-4E4A-9E00-D54E4D0F9D63
#+BEGIN_SRC emacs-lisp :results output silent
(setq org-ascii-text-width 80)
(setq org-ascii-global-margin 0)
#+END_SRC

** Beamer
  :PROPERTIES:
  :noweb-ref: Hacking-Publishing-Beamer
  :ID:       6B86302E-D3EC-413A-A844-9ACCAA23A056
  :END:

Load Beamer for creating presentations.

#+NAME: B77E265B-EE1A-469D-BEFB-51360B7AB45E
#+BEGIN_SRC emacs-lisp :results output silent
(use-package ox-beamer)
#+END_SRC

** (DevOps)
   :PROPERTIES:
   :ID:       8B78A8C3-E6B6-4722-9822-EF428E5DB823
   :END:
** Shell Script
   :PROPERTIES:
   :ID:       06D022B2-53ED-4042-8152-F383F5FE309E
   :END:
** Make
   :PROPERTIES:
   :ID:       5F2B3343-631D-41C3-BE6B-D98548F77E07
   :END:
** Vagrant
   :PROPERTIES:
   :ID:       A1335FE5-6DA7-4FE2-A77C-60032C76B40D
   :END:

~ruby-mode~ supports =Vagrantfile= OOTB.

** (Diagram)
   :PROPERTIES:
   :ID:       FA47D423-05B3-4911-9CEC-28A534E49428
   :END:
** Artist
  :PROPERTIES:
  :noweb-ref: Hacking-Diagram-Artist
  :ID:       F920A833-60D7-41C2-9363-EA2A8BD19009
  :END:

#+NAME: 7592B1CF-CDA3-4ED1-99FA-205E41C74FFF
#+BEGIN_SRC emacs-lisp :results output silent
(add-to-list 'auto-mode-alist '("\\.asc" . artist-mode))
(add-to-list 'auto-mode-alist '("\\.art" . artist-mode))
(add-to-list 'auto-mode-alist '("\\.asc" . artist-mode))
#+END_SRC

** DITAA
  :PROPERTIES:
  :noweb-ref: Hacking-Diagram-DITAA
  :ID:       FCC8A8F8-A967-4981-9260-CFF60CC56494
  :END:

When a drop of water joins the ocean it becomes the ocean.

#+NAME: ditaa-drop_in_the_ocean
#+BEGIN_SRC ditaa :file "./image/ditaa-drop_in_the_ocean.png" :noweb-ref ignore
+---------+
| cBLU    |
|         |
|    +----+
|    |cBLU|
|    |    |
+----+----+
#+END_SRC

#+RESULTS: ditaa-drop_in_the_ocean
[[file:./image/ditaa-drop_in_the_ocean.png]]

#+NAME: ditaa-not_a_sailboat
#+BEGIN_SRC ditaa :file "./image/ditaa-not_a_sailboat.png" :noweb-ref ignore
+----------+1       1…3+------+
| Sailboat +◆----------+ Mast |
+-----+----+           +------+
      ◆1
      |
      |             1…2+------+
      +----------------+ Hull |
                       +------+
      This is not a sailboat
#+END_SRC

#+RESULTS: ditaa-not_a_sailboat
[[file:./image/ditaa-not_a_sailboat.png]]

#+NAME: 6907A176-CCF4-4BDF-A242-BDBC4C67239F
#+BEGIN_SRC emacs-lisp :results output silent
(defconst help/ditaa-jar (concat (getenv "EELIB") "/ditaa.jar"))
(setq org-ditaa-jar-path help/ditaa-jar)
#+END_SRC

** Graphviz
  :PROPERTIES:
  :noweb-ref: Hacking-Diagram-Graphviz
  :ID:       A84665A3-4A2D-4040-926A-17159A6D4647
  :END:

#+NAME: EAADBBCB-9054-4040-8579-1EC08FB97BDE
#+BEGIN_SRC emacs-lisp :results output silent
(use-package graphviz-dot-mode
  :ensure t
  :config
  (setf (cdr (assoc "dot" org-src-lang-modes)) 'graphviz-dot))
#+END_SRC

#+NAME: graphviz-life_is_simple
#+BEGIN_SRC dot :file "./image/graphviz-life_is_simple.png" :noweb-ref ignore
digraph graphviz {
  subgraph cluster {
    ayh [label="Happy with things?", shape=ellipse];
    no [label="No.", shape=Mdiamond];
    yes [label="Yes.", shape=Mdiamond];
    ayh -> no;
    ayh -> yes;
    no -> ayh [label="Change them."];
    yes -> ayh [label="Keep doing them."];
  }
  labelloc="t";
  label="Life is simple:\nAttribution: @tgtext";
}
#+END_SRC

#+RESULTS: graphviz-life_is_simple
[[file:./image/graphviz-life_is_simple.png]]

** PlantUML
  :PROPERTIES:
  :noweb-ref: Hacking-Diagram-PlantUML
  :ID:       FCC259F8-0858-4778-B97F-07D2B21012F5
  :END:

#+NAME: 80EE7930-0025-4D06-96BB-24A70169CDEA
#+BEGIN_SRC emacs-lisp :results output silent
(use-package plantuml-mode
  :ensure t
  :init
  (defconst help/plantuml-jar (concat (getenv "EELIB") "/plantuml.jar"))
  (setq plantuml-jar-path help/plantuml-jar)
  :config
  (eval-after-load "ob-plantuml"
    (setq org-plantuml-jar-path help/plantuml-jar)))
#+END_SRC

*Sequence Diagram*

- Feature rich.
- Information rich.

#+NAME: plantuml-sequence_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-sequence_diagram.png" :noweb-ref ignore
Alice --> Bob: Authentication Request
Bob --> Alice: Authentication Response

Alice --> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
#+END_SRC

#+RESULTS: plantuml-sequence_diagram
[[file:./image/plantuml-sequence_diagram.png]]

*Use Case Diagram*

- Actor variable aliasing feature.
#+NAME: plantuml-use_case_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-use_case_diagram.png" :noweb-ref ignore
left to right direction
skinparam packageStyle rect
actor customer
actor clerk
rectangle checkout {
customer -- (checkout)
(checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk
}
#+END_SRC

#+RESULTS: plantuml-use_case_diagram
[[file:./image/plantuml-use_case_diagram.png]]

*Class Diagram*

- Valuable for all sorts of ideas in addition to classes.
- =hide=, =show=, and =include= are mentioned.
  - Could be a great reuse mechanism combined with noweb and tangling.
- Spotted characters might be useful to indicating other things.
  - Example is data which is clearly a first-class citizen.
  - Six package visualization types.
  - Packaging vs. namespaceing.
  - Good support for splitting large images among output pages.

#+NAME: plantuml-class_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-class_diagram.png" :noweb-ref ignore
title This is not a sailboat
scale 200 width
Sailboat "1" *-- "1..3" Mast
Sailboat "1" *-- "1..3" Hull
#+END_SRC

#+RESULTS: plantuml-class_diagram
[[file:./image/plantuml-class_diagram.png]]

*Activity Diagram*

- May indicate top to bottom flow using =top=.
- May label arrows.
- May force arrow direction.
- if/else structure for branching.
- Partition construct.
- [[http://plantuml.sourceforge.net/activity2.html][New syntax]] with more examples.

#+NAME: plantuml-activity_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-activity_diagram.png" :noweb-ref ignore
start
partition Initialization {
:read config file;
:init internal variable;
}
partition Running {
:wait for user interaction;
:print information;
}

stop
#+END_SRC

#+RESULTS: plantuml-activity_diagram
[[file:./image/plantuml-activity_diagram.png]]

*Component Diagram*

- The names to define all of the diagram entity types.
- Identify "Modern UML".
- Good for summaries.

#+NAME: plantuml-component_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-component_diagram.png" :noweb-ref ignore
[First component]
[Another component]
() "First Interface"
() "Another interface" as Interf2
DataAccess - [First Component]
[First Component] ..> HTTP : use
#+END_SRC

#+RESULTS: plantuml-component_diagram
[[file:./image/plantuml-component_diagram.png]]

*State Diagram*

#+NAME: plantuml-state_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-state_diagram.png" :noweb-ref ignore
[*] --> State1
State1 --> [*]
State1 : this is a string State1 : this is another string
#+END_SRC

#+RESULTS: plantuml-state_diagram
[[file:./image/plantuml-state_diagram.png]]

*Object Diagram*

#+NAME: plantuml-object_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-object_diagram.png" :noweb-ref ignore
object Object01
object Object02
Object01 <|-- Object02
#+END_SRC

#+RESULTS: plantuml-object_diagram
[[file:./image/plantuml-object_diagram.png]]

- Commands.
  - Header and footer values.
  - Zoom level.
  - Creole markup for most text elements.
  - Lists and sub-lists.
  - Horizontal lines. Will appear in most containers.
  - Headings.
  - Plain old HTML.
  - Tables, LaTeX style.
  - Use [[https://useiconic.com/open][OpenIconic icons]] anywhere.

- Fonts and colors.
  - You can change just about everything.
  - You may nest definitions.
  - =monochrome true= option.
    - If you are printing
    - Or don't want color.

- Internationalization.
  - Full Unicode character support.
