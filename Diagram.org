* Ditaa

When a drop of water joins the ocean it becomes the ocean.

#+NAME: ditaa-drop_in_the_ocean
#+BEGIN_SRC ditaa :file "./image/ditaa-drop_in_the_ocean.png" :noweb-ref ignore :wrap "RESULTS"
+---------+
| cBLU    |
|         |
|    +----+
|    |cBLU|
|    |    |
+----+----+
#+END_SRC

#+RESULTS: ditaa-drop_in_the_ocean
#+BEGIN_RESULTS
[[file:./image/ditaa-drop_in_the_ocean.png]]
#+END_RESULTS

#+NAME: ditaa-not_a_sailboat
#+BEGIN_SRC ditaa :file "./image/ditaa-not_a_sailboat.png" :noweb-ref ignore :wrap "RESULTS"
+----------+1       1…3+------+
| Sailboat +◆----------+ Mast |
+-----+----+           +------+
      ◆1
      |
      |             1…2+------+
      +----------------+ Hull |
                       +------+
      This is not a sailboat
#+END_SRC

#+RESULTS: ditaa-not_a_sailboat
#+BEGIN_RESULTS
[[file:./image/ditaa-not_a_sailboat.png]]
#+END_RESULTS

* Graphviz

#+NAME: graphviz-life_is_simple
#+BEGIN_SRC dot :file "./image/graphviz-life_is_simple.png" :noweb-ref ignore :wrap "RESULTS"
digraph graphviz {
  subgraph cluster {
    ayh [label="Happy with things?", shape=ellipse];
    no [label="No.", shape=Mdiamond];
    yes [label="Yes.", shape=Mdiamond];
    ayh -> no;
    ayh -> yes;
    no -> ayh [label="Change them."];
    yes -> ayh [label="Keep doing them."];
  }
  labelloc="t";
  label="Life is simple:\nAttribution: @tgtext";
}
#+END_SRC

#+RESULTS: graphviz-life_is_simple
#+BEGIN_RESULTS
[[file:./image/graphviz-life_is_simple.png]]
#+END_RESULTS

* PlantUML

*Sequence Diagram*

- Feature rich.
- Information rich.

#+NAME: plantuml-sequence_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-sequence_diagram.png" :noweb-ref ignore :wrap "RESULTS"
Alice --> Bob: Authentication Request
Bob --> Alice: Authentication Response

Alice --> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
#+END_SRC

#+RESULTS: plantuml-sequence_diagram
#+BEGIN_RESULTS
[[file:./image/plantuml-sequence_diagram.png]]
#+END_RESULTS

*Use Case Diagram*

- Actor variable aliasing feature.
#+NAME: plantuml-use_case_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-use_case_diagram.png" :noweb-ref ignore :wrap "RESULTS"
left to right direction
skinparam packageStyle rect
actor customer
actor clerk
rectangle checkout {
customer -- (checkout)
(checkout) .> (payment) : include (help) .> (checkout) : extends (checkout) -- clerk
}
#+END_SRC

#+RESULTS: plantuml-use_case_diagram
#+BEGIN_RESULTS
[[file:./image/plantuml-use_case_diagram.png]]
#+END_RESULTS

*Class Diagram*

- Valuable for all sorts of ideas in addition to classes.
- =hide=, =show=, and =include= are mentioned.
  - Could be a great reuse mechanism combined with noweb and tangling.
- Spotted characters might be useful to indicating other things.
  - Example is data which is clearly a first-class citizen.
  - Six package visualization types.
  - Packaging vs. namespaceing.
  - Good support for splitting large images among output pages.

#+NAME: plantuml-class_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-class_diagram.png" :noweb-ref ignore :wrap "RESULTS"
title This is not a sailboat
scale 200 width
Sailboat "1" *-- "1..3" Mast
Sailboat "1" *-- "1..3" Hull
#+END_SRC

#+RESULTS: plantuml-class_diagram
#+BEGIN_RESULTS
[[file:./image/plantuml-class_diagram.png]]
#+END_RESULTS

*Activity Diagram*

- May indicate top to bottom flow using =top=.
- May label arrows.
- May force arrow direction.
- if/else structure for branching.
- Partition construct.
- [[http://plantuml.sourceforge.net/activity2.html][New syntax]] with more examples.

#+NAME: plantuml-activity_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-activity_diagram.png" :noweb-ref ignore :wrap "RESULTS"
start
partition Initialization {
:read config file;
:init internal variable;
}
partition Running {
:wait for user interaction;
:print information;
}

stop
#+END_SRC

#+RESULTS: plantuml-activity_diagram
#+BEGIN_RESULTS
[[file:./image/plantuml-activity_diagram.png]]
#+END_RESULTS

*Component Diagram*

- The names to define all of the diagram entity types.
- Identify "Modern UML".
- Good for summaries.

#+NAME: plantuml-component_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-component_diagram.png" :noweb-ref ignore :wrap "RESULTS"
[First component]
[Another component]
() "First Interface"
() "Another interface" as Interf2
DataAccess - [First Component]
[First Component] ..> HTTP : use
#+END_SRC

#+RESULTS: plantuml-component_diagram
#+BEGIN_RESULTS
[[file:./image/plantuml-component_diagram.png]]
#+END_RESULTS

*State Diagram*

#+NAME: plantuml-state_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-state_diagram.png" :noweb-ref ignore :wrap "RESULTS"
[*] --> State1
State1 --> [*]
State1 : this is a string State1 : this is another string
#+END_SRC

#+RESULTS: plantuml-state_diagram
#+BEGIN_RESULTS
[[file:./image/plantuml-state_diagram.png]]
#+END_RESULTS

*Object Diagram*

#+NAME: plantuml-object_diagram
#+BEGIN_SRC plantuml :file "./image/plantuml-object_diagram.png" :noweb-ref ignore :wrap "RESULTS"
object Object01
object Object02
Object01 <|-- Object02
#+END_SRC

#+RESULTS: plantuml-object_diagram
#+BEGIN_RESULTS
[[file:./image/plantuml-object_diagram.png]]
#+END_RESULTS

- Commands.
  - Header and footer values.
  - Zoom level.
  - Creole markup for most text elements.
  - Lists and sub-lists.
  - Horizontal lines. Will appear in most containers.
  - Headings.
  - Plain old HTML.
  - Tables, LaTeX style.
  - Use [[https://useiconic.com/open][OpenIconic icons]] anywhere.

- Fonts and colors.
  - You can change just about everything.
  - You may nest definitions.
  - =monochrome true= option.
    - If you are printing
    - Or don't want color.

- Internationalization.
  - Full Unicode character support.
